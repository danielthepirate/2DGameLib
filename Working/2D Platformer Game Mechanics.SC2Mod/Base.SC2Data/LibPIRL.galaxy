include "TriggerLibs/NativeLib"

include "LibPIRL_h"

//--------------------------------------------------------------------------------------------------
// Library: Pirated Lib
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void libPIRL_InitLibraries () {
    libNtve_InitVariables();
}

// Variable Initialization
bool libPIRL_InitVariables_completed = false;

void libPIRL_InitVariables () {
    int init_i1;

    if (libPIRL_InitVariables_completed) {
        return;
    }

    libPIRL_InitVariables_completed = true;

    libPIRL_gv_debugStringOpenMessage = "";
    libPIRL_gv_debugStringOpenMessagePrefix = "";
    libPIRL_gv_debugStringOpenMessageAppender = "";
    libPIRL_gv_supportPanel.lv_main = c_invalidDialogControlId;
    libPIRL_gv_supportPanel.lv_header = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= 20; init_i1 += 1) {
        libPIRL_gv_supportPanel.lv_entry[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 20; init_i1 += 1) {
        libPIRL_gv_supportPanel.lv_field[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 20; init_i1 += 1) {
        libPIRL_gv_supportPanel.lv_value[init_i1] = c_invalidDialogControlId;
    }
    libPIRL_gv_supportPanel.lv_maxEntryCount = 20;
}

// Presets
// Functions
string libPIRL_gf_Capitalize (string lp_input) {
    // Variable Declarations
    int lv_inputLength;
    string lv_output;

    // Variable Initialization
    lv_output = "";

    // Implementation
    lv_inputLength = StringLength(lp_input);
    lv_output = (StringCase(StringSub(lp_input, 1, 1), true) + StringSub(lp_input, 2, lv_inputLength));
    return lv_output;
}

bool libPIRL_gf_StringIsValid (string lp_string) {
    // Implementation
    if ((lp_string != "") && (lp_string != null)) {
        return true;
    }
    else {
        return false;
    }
}

string libPIRL_gf_ConvertPointXYtoString (point lp_point, int lp_precision) {
    // Variable Declarations
    string lv_outputString;

    // Variable Initialization
    lv_outputString = "";

    // Implementation
    lv_outputString = (FixedToString(PointGetX(lp_point), lp_precision) + ", " + FixedToString(PointGetY(lp_point), lp_precision));
    return lv_outputString;
}

bool libPIRL_gf_AngleIsBetweenBounds (fixed lp_angle, fixed lp_minBound, fixed lp_maxBound) {
    // Implementation
    if ((lp_angle < lp_maxBound) && (lp_angle > lp_minBound)) {
        return true;
    }
    else {
        return false;
    }
}

bool libPIRL_gf_StringIsValid2 (int lp_integer) {
    // Implementation
    if ((ModI(lp_integer, 2) == 1)) {
        return true;
    }
    else {
        return false;
    }
}

int libPIRL_gf_SignInteger (int lp_inputInteger) {
    // Variable Declarations
    int lv_sign;

    // Variable Initialization

    // Implementation
    if ((lp_inputInteger > 0)) {
        lv_sign = 1;
    }
    else if ((lp_inputInteger == 0)) {
        lv_sign = 0;
    }
    else if ((lp_inputInteger < 0)) {
        lv_sign = -1;
    }
    return lv_sign;
}

fixed libPIRL_gf_SignReal (fixed lp_inputReal) {
    // Variable Declarations
    fixed lv_sign;

    // Variable Initialization

    // Implementation
    if ((lp_inputReal > 0.0)) {
        lv_sign = 1.0;
    }
    else if ((lp_inputReal == 0.0)) {
        lv_sign = 0.0;
    }
    else if ((lp_inputReal < 0.0)) {
        lv_sign = -1.0;
    }
    return lv_sign;
}

void libPIRL_gf_HideAllUIFramesForPlayers (playergroup lp_playerGroup) {
    // Implementation
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypeAchievementMenuButton, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypeAlertPanel, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypeAllianceButton, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypeArmyButton, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypeCashPanel, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypeCharacterSheetButton, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypeCommandPanel, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypeConsolePanel, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypeControlGroupPanel, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypeCreditsPanel, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypeErrorDisplayPanel, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypeHelpMenuButton, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypeHeroPanel, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypeIdleWorkerButton, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypeInfoPanel, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypeInventoryPanel, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypeLeaderPanel, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypeMenuBar, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypeMercenaryPanel, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypeMinimapPanel, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypeBattleReportPanel, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypeMissionTimePanel, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypeObjectivePanel, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypePingPanel, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypePlanetPanel, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypePurchasePanel, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypePylonButton, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypeResearchPanel, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypeResourcePanel, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypeRoomPanel, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypeStatusUI, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypeSupply, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypeTeamResourceButton, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypeTechGlossaryPanel, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypeTechTreePanel, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypeTextTag, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypeTipAlertPanel, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypeVictoryPanel, false);
}

bool libPIRL_gf_UnitHasBehaviorWithBehaviorFlag (unit lp_unit, int lp_behaviorFlag) {
    int auto533EA648_ae;
    int auto533EA648_ai;

    // Variable Declarations
    int lv_behaviorCount;
    string lv_pickedBehavior;
    int lv_i;

    // Variable Initialization

    // Implementation
    if ((lp_unit == null)) {
        return false;
    }
    lv_behaviorCount = UnitBehaviorCountAll(lp_unit);
    auto533EA648_ae = lv_behaviorCount;
    auto533EA648_ai = 1;
    lv_i = 1;
    for ( ; ( (auto533EA648_ai >= 0 && lv_i <= auto533EA648_ae) || (auto533EA648_ai <= 0 && lv_i >= auto533EA648_ae) ) ; lv_i += auto533EA648_ai ) {
        lv_pickedBehavior = UnitBehaviorGet(lp_unit, lv_i);
        if ((UnitBehaviorHasFlag(lv_pickedBehavior, lp_behaviorFlag) == true)) {
            return true;
        }
    }
    return false;
}

void libPIRL_gf_AddTimeToTimer (timer lp_timer, fixed lp_additionalTime) {
    // Implementation
    TimerStart(lp_timer, (TimerGetRemaining(lp_timer) + lp_additionalTime), false, c_timeGame);
}

fixed libPIRL_gf_ConvertBooleanToReal (bool lp_boolean) {
    // Implementation
    return IntToFixed(BoolToInt(lp_boolean));
}

void libPIRL_gf_ShakeCameraForPlayer (int lp_p, string lp_cameraSetting) {
    // Implementation
    CameraShake(lp_p, lp_cameraSetting, "Earthquake", 0.125, 0.25, 0.375);
}

void libPIRL_gf_DebugFlashUnit (unit lp_unit) {
    // Implementation
    libNtve_gf_SendActorMessageToUnit(lp_unit, "SetTintColor 255,0,0");
    libNtve_gf_SendActorMessageToUnit(lp_unit, "SetTintColor 255,255,255 1.000000");
}

void libPIRL_gf_DebugPoint (point lp_point) {
    // Implementation
    PlayerCreateEffectPoint(0, "DebugPoint", lp_point);
}

void libPIRL_gf_DebugPoint2 (point lp_point, fixed lp_radius) {
    // Implementation
    CatalogFieldValueSet(c_gameCatalogEffect, "DebugPointVariable", "AreaArray[" + IntToString(0) + "].Radius", 0, FixedToString(lp_radius, c_fixedPrecisionAny));
    PlayerCreateEffectPoint(0, "DebugPointCircle", lp_point);
}

void libPIRL_gf_DebugPoint3 (point lp_point, fixed lp_width, fixed lp_height) {
    // Implementation
    CatalogFieldValueSet(c_gameCatalogEffect, "DebugRectangleVariable", "AreaArray[" + IntToString(0) + "].RectangleHeight", 0, FixedToString(lp_height, c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogEffect, "DebugRectangleVariable", "AreaArray[" + IntToString(0) + "].RectangleWidth", 0, FixedToString(lp_width, c_fixedPrecisionAny));
    PlayerCreateEffectPoint(0, "DebugPointRectangle", lp_point);
}

trigger auto_libPIRL_gf_DebugPoint4_Trigger = null;
point auto_libPIRL_gf_DebugPoint4_lp_point;
fixed auto_libPIRL_gf_DebugPoint4_lp_duration;

void libPIRL_gf_DebugPoint4 (point lp_point, fixed lp_duration) {
    auto_libPIRL_gf_DebugPoint4_lp_point = lp_point;
    auto_libPIRL_gf_DebugPoint4_lp_duration = lp_duration;

    if (auto_libPIRL_gf_DebugPoint4_Trigger == null) {
        auto_libPIRL_gf_DebugPoint4_Trigger = TriggerCreate("auto_libPIRL_gf_DebugPoint4_TriggerFunc");
    }

    TriggerExecute(auto_libPIRL_gf_DebugPoint4_Trigger, false, false);
}

bool auto_libPIRL_gf_DebugPoint4_TriggerFunc (bool testConds, bool runActions) {
    point lp_point = auto_libPIRL_gf_DebugPoint4_lp_point;
    fixed lp_duration = auto_libPIRL_gf_DebugPoint4_lp_duration;

    // Variable Declarations
    unit lv_debugUnit;

    // Variable Initialization

    // Implementation
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zergling", c_unitCreateIgnorePlacement, 0, lp_point);
    lv_debugUnit = UnitLastCreated();
    Wait(lp_duration, c_timeGame);
    UnitRemove(lv_debugUnit);
    return true;
}

trigger auto_libPIRL_gf_DebugPoint5_Trigger = null;
point auto_libPIRL_gf_DebugPoint5_lp_point;
fixed auto_libPIRL_gf_DebugPoint5_lp_duration;

void libPIRL_gf_DebugPoint5 (point lp_point, fixed lp_duration) {
    auto_libPIRL_gf_DebugPoint5_lp_point = lp_point;
    auto_libPIRL_gf_DebugPoint5_lp_duration = lp_duration;

    if (auto_libPIRL_gf_DebugPoint5_Trigger == null) {
        auto_libPIRL_gf_DebugPoint5_Trigger = TriggerCreate("auto_libPIRL_gf_DebugPoint5_TriggerFunc");
    }

    TriggerExecute(auto_libPIRL_gf_DebugPoint5_Trigger, false, false);
}

bool auto_libPIRL_gf_DebugPoint5_TriggerFunc (bool testConds, bool runActions) {
    point lp_point = auto_libPIRL_gf_DebugPoint5_lp_point;
    fixed lp_duration = auto_libPIRL_gf_DebugPoint5_lp_duration;

    // Variable Declarations
    unit lv_debugUnit;

    // Variable Initialization

    // Implementation
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Mutalisk", c_unitCreateIgnorePlacement, 0, lp_point);
    lv_debugUnit = UnitLastCreated();
    Wait(lp_duration, c_timeGame);
    UnitRemove(lv_debugUnit);
    return true;
}

void libPIRL_gf_EnableDebugCategory (int lp_debugCategory) {
    // Implementation
    DataTableSetBool(true, IntToString((lp_debugCategory)), true);
}

bool libPIRL_gf_PrintCategoryIsEnabled (int lp_debugCategory) {
    // Implementation
    if ((DataTableGetBool(true, IntToString((lp_debugCategory))) == true)) {
        return true;
    }
    else {
        return false;
    }
}

void libPIRL_gf_DebugString (string lp_message) {
    // Implementation
    if ((libPIRL_gf_PrintCategoryIsEnabled(libPIRL_ge_DebugCategory_Global) == true)) {
        TriggerDebugOutput(1, StringToText(lp_message), true);
    }
}

void libPIRL_gf_DebugString2 (string lp_message, int lp_debugCategory) {
    // Implementation
    if ((libPIRL_gf_PrintCategoryIsEnabled(libPIRL_ge_DebugCategory_Global) == true) && (libPIRL_gf_PrintCategoryIsEnabled(lp_debugCategory) == true)) {
        TriggerDebugOutput(1, StringToText(lp_message), true);
    }
}

void libPIRL_gf_DebugString4 (string lp_prefix) {
    // Implementation
    libPIRL_gv_debugStringOpenMessage = "";
    libPIRL_gv_debugStringOpenMessagePrefix = "";
    libPIRL_gv_debugStringOpenMessageAppender = "";
    libPIRL_gv_debugStringOpenMessagePrefix = lp_prefix;
}

void libPIRL_gf_DebugString3 (string lp_nextMessage) {
    // Implementation
    libPIRL_gv_debugStringOpenMessage = (libPIRL_gv_debugStringOpenMessage + lp_nextMessage);
}

void libPIRL_gf_DebugString6 (string lp_nextMessage) {
    // Implementation
    libPIRL_gv_debugStringOpenMessageAppender = (libPIRL_gv_debugStringOpenMessageAppender + lp_nextMessage);
}

void libPIRL_gf_DebugString5 (int lp_debugCategory) {
    // Implementation
    if ((libPIRL_gf_PrintCategoryIsEnabled(libPIRL_ge_DebugCategory_Global) == true) && (libPIRL_gf_PrintCategoryIsEnabled(lp_debugCategory) == true) && (libPIRL_gf_StringIsValid(libPIRL_gv_debugStringOpenMessage) == true)) {
        TriggerDebugOutput(1, StringToText((libPIRL_gv_debugStringOpenMessagePrefix + libPIRL_gv_debugStringOpenMessage + libPIRL_gv_debugStringOpenMessageAppender)), true);
    }
    libPIRL_gv_debugStringOpenMessage = "";
    libPIRL_gv_debugStringOpenMessagePrefix = "";
    libPIRL_gv_debugStringOpenMessageAppender = "";
}

void libPIRL_gf_HookupSupportPanel () {
    int autoF03C6515_ae;
    int autoF03C6515_ai;

    // Variable Declarations
    int lv_i;
    string lv_debugPanelFrameName;
    string lv_debugPanelFrameNumber;

    // Variable Initialization
    lv_debugPanelFrameName = "";
    lv_debugPanelFrameNumber = "";

    // Implementation
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/SupportLibDebugPanel");
    libPIRL_gv_supportPanel.lv_main = DialogControlLastCreated();
    lv_debugPanelFrameName = ("UIContainer/ConsoleUIContainer/SupportLibDebugPanel/Header");
    DialogControlHookupStandard(c_triggerControlTypeLabel, lv_debugPanelFrameName);
    libPIRL_gv_supportPanel.lv_header = DialogControlLastCreated();
    autoF03C6515_ae = libPIRL_gv_supportPanel.lv_maxEntryCount;
    autoF03C6515_ai = 1;
    lv_i = 1;
    for ( ; ( (autoF03C6515_ai >= 0 && lv_i <= autoF03C6515_ae) || (autoF03C6515_ai <= 0 && lv_i >= autoF03C6515_ae) ) ; lv_i += autoF03C6515_ai ) {
        if ((lv_i < 10)) {
            lv_debugPanelFrameNumber = ("0" + IntToString(lv_i));
        }
        else {
            lv_debugPanelFrameNumber = IntToString(lv_i);
        }
        lv_debugPanelFrameName = ("UIContainer/ConsoleUIContainer/SupportLibDebugPanel/Entry" + lv_debugPanelFrameNumber);
        DialogControlHookupStandard(c_triggerControlTypePanel, lv_debugPanelFrameName);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
        libPIRL_gv_supportPanel.lv_entry[(lv_i - 1)] = DialogControlLastCreated();
        lv_debugPanelFrameName = ("UIContainer/ConsoleUIContainer/SupportLibDebugPanel/Entry" + lv_debugPanelFrameNumber + "/Field");
        DialogControlHookupStandard(c_triggerControlTypeLabel, lv_debugPanelFrameName);
        libNtve_gf_SetDialogItemText(DialogControlLastCreated(), (StringExternal("Param/Value/lib_PIRL_F5207A89") + StringToText(lv_debugPanelFrameNumber)), PlayerGroupAll());
        libPIRL_gv_supportPanel.lv_field[(lv_i - 1)] = DialogControlLastCreated();
        lv_debugPanelFrameName = ("UIContainer/ConsoleUIContainer/SupportLibDebugPanel/Entry" + lv_debugPanelFrameNumber + "/Value");
        DialogControlHookupStandard(c_triggerControlTypeLabel, lv_debugPanelFrameName);
        libNtve_gf_SetDialogItemText(DialogControlLastCreated(), (StringExternal("Param/Value/lib_PIRL_A6574454") + StringToText(lv_debugPanelFrameNumber)), PlayerGroupAll());
        libPIRL_gv_supportPanel.lv_value[(lv_i - 1)] = DialogControlLastCreated();
    }
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool libPIRL_InitLib_completed = false;

void libPIRL_InitLib () {
    if (libPIRL_InitLib_completed) {
        return;
    }

    libPIRL_InitLib_completed = true;

    libPIRL_InitLibraries();
    libPIRL_InitVariables();
}

