//==================================================================================================
// 
// Generated Map Script
// 
// Name:   Super Sonya Bros
// 
//==================================================================================================
include "TriggerLibs/NativeLib"

//--------------------------------------------------------------------------------------------------
// Library: PiratedLib
//--------------------------------------------------------------------------------------------------
// Preset Declarations
const int lib1_ge_DebugCategory_Global = 0;
const int lib1_ge_DebugCategory_Internal = 1;
const int lib1_ge_DebugCategory_MovementSystem = 2;
const int lib1_ge_DebugCategory_Actor = 3;
const int lib1_ge_DebugCategory_Physics = 4;

// Structures
struct lib1_gs_SupportPanelRecord {
    int lv_main;
    int lv_header;
    int[21] lv_entry;
    int[21] lv_field;
    int[21] lv_value;
    int lv_maxEntryCount;
};

// Variable Declarations
string lib1_gv_debugStringOpenMessage;
string lib1_gv_debugStringOpenMessagePrefix;
string lib1_gv_debugStringOpenMessageAppender;
lib1_gs_SupportPanelRecord lib1_gv_supportPanel;

// Function Declarations
string lib1_gf_Capitalize (string lp_input);
bool lib1_gf_StringIsValid (string lp_string);
string lib1_gf_ConvertPointXYtoString (point lp_point, int lp_precision);
bool lib1_gf_AngleIsBetweenBounds (fixed lp_angle, fixed lp_minBound, fixed lp_maxBound);
bool lib1_gf_StringIsValid2 (int lp_integer);
int lib1_gf_SignInteger (int lp_inputInteger);
fixed lib1_gf_SignReal (fixed lp_inputReal);
void lib1_gf_HideAllUIFramesForPlayers (playergroup lp_playerGroup);
bool lib1_gf_UnitHasBehaviorWithBehaviorFlag (unit lp_unit, int lp_behaviorFlag);
void lib1_gf_ModifyUnitCustomValue (unit lp_unit, int lp_customValuePreset, fixed lp_customValueModification);
void lib1_gf_ModifyUnitCustomValue2 (unit lp_unit, int lp_customValuePreset, fixed lp_customValueNew);
fixed lib1_gf_PresetCustomValue (unit lp_unit, int lp_customValuePreset);
void lib1_gf_AddTimeToTimer (timer lp_timer, fixed lp_additionalTime);
fixed lib1_gf_ConvertBooleanToReal (bool lp_boolean);
void lib1_gf_ShakeCameraForPlayer (int lp_p, string lp_cameraSetting);
void lib1_gf_DebugFlashUnit (unit lp_unit);
void lib1_gf_DebugPoint (point lp_point);
void lib1_gf_DebugPoint2 (point lp_point, fixed lp_radius);
void lib1_gf_DebugPoint3 (point lp_point, fixed lp_width, fixed lp_height);
void lib1_gf_DebugPoint4 (point lp_point, fixed lp_duration);
void lib1_gf_DebugPoint5 (point lp_point, fixed lp_duration);
void lib1_gf_EnableDebugCategory (int lp_debugCategory);
bool lib1_gf_PrintCategoryIsEnabled (int lp_debugCategory);
void lib1_gf_DebugString (string lp_message);
void lib1_gf_DebugString2 (string lp_message, int lp_debugCategory);
void lib1_gf_DebugString4 (string lp_prefix);
void lib1_gf_DebugString3 (string lp_nextMessage);
void lib1_gf_DebugString6 (string lp_nextMessage);
void lib1_gf_DebugString5 (int lp_debugCategory);
void lib1_gf_HookupSupportPanel ();

// Library Initialization
void lib1_InitVariables ();

//--------------------------------------------------------------------------------------------------
// Library: PiratedLib
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void lib1_InitLibraries () {
    libNtve_InitVariables();
}

// Variable Initialization
bool lib1_InitVariables_completed = false;

void lib1_InitVariables () {
    int init_i1;

    if (lib1_InitVariables_completed) {
        return;
    }

    lib1_InitVariables_completed = true;

    lib1_gv_debugStringOpenMessage = "";
    lib1_gv_debugStringOpenMessagePrefix = "";
    lib1_gv_debugStringOpenMessageAppender = "";
    lib1_gv_supportPanel.lv_main = c_invalidDialogControlId;
    lib1_gv_supportPanel.lv_header = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= 20; init_i1 += 1) {
        lib1_gv_supportPanel.lv_entry[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 20; init_i1 += 1) {
        lib1_gv_supportPanel.lv_field[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 20; init_i1 += 1) {
        lib1_gv_supportPanel.lv_value[init_i1] = c_invalidDialogControlId;
    }
    lib1_gv_supportPanel.lv_maxEntryCount = 20;
}

// Presets
// Functions
string lib1_gf_Capitalize (string lp_input) {
    // Variable Declarations
    int lv_inputLength;
    string lv_output;

    // Variable Initialization
    lv_output = "";

    // Implementation
    lv_inputLength = StringLength(lp_input);
    lv_output = (StringCase(StringSub(lp_input, 1, 1), true) + StringSub(lp_input, 2, lv_inputLength));
    return lv_output;
}

bool lib1_gf_StringIsValid (string lp_string) {
    // Implementation
    if ((lp_string != "") && (lp_string != null)) {
        return true;
    }
    else {
        return false;
    }
}

string lib1_gf_ConvertPointXYtoString (point lp_point, int lp_precision) {
    // Variable Declarations
    string lv_outputString;

    // Variable Initialization
    lv_outputString = "";

    // Implementation
    lv_outputString = (FixedToString(PointGetX(lp_point), lp_precision) + ", " + FixedToString(PointGetY(lp_point), lp_precision));
    return lv_outputString;
}

bool lib1_gf_AngleIsBetweenBounds (fixed lp_angle, fixed lp_minBound, fixed lp_maxBound) {
    // Implementation
    if ((lp_angle < lp_maxBound) && (lp_angle > lp_minBound)) {
        return true;
    }
    else {
        return false;
    }
}

bool lib1_gf_StringIsValid2 (int lp_integer) {
    // Implementation
    if ((ModI(lp_integer, 2) == 1)) {
        return true;
    }
    else {
        return false;
    }
}

int lib1_gf_SignInteger (int lp_inputInteger) {
    // Variable Declarations
    int lv_sign;

    // Variable Initialization

    // Implementation
    if ((lp_inputInteger > 0)) {
        lv_sign = 1;
    }
    else if ((lp_inputInteger == 0)) {
        lv_sign = 0;
    }
    else if ((lp_inputInteger < 0)) {
        lv_sign = -1;
    }
    return lv_sign;
}

fixed lib1_gf_SignReal (fixed lp_inputReal) {
    // Variable Declarations
    fixed lv_sign;

    // Variable Initialization

    // Implementation
    if ((lp_inputReal > 0.0)) {
        lv_sign = 1.0;
    }
    else if ((lp_inputReal == 0.0)) {
        lv_sign = 0.0;
    }
    else if ((lp_inputReal < 0.0)) {
        lv_sign = -1.0;
    }
    return lv_sign;
}

void lib1_gf_HideAllUIFramesForPlayers (playergroup lp_playerGroup) {
    // Implementation
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypeAchievementMenuButton, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypeAlertPanel, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypeAllianceButton, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypeArmyButton, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypeCashPanel, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypeCharacterSheetButton, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypeCommandPanel, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypeConsolePanel, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypeControlGroupPanel, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypeCreditsPanel, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypeErrorDisplayPanel, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypeHelpMenuButton, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypeHeroPanel, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypeIdleWorkerButton, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypeInfoPanel, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypeInventoryPanel, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypeLeaderPanel, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypeMenuBar, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypeMercenaryPanel, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypeMinimapPanel, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypeBattleReportPanel, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypeMissionTimePanel, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypeObjectivePanel, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypePingPanel, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypePlanetPanel, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypePurchasePanel, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypePylonButton, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypeResearchPanel, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypeResourcePanel, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypeRoomPanel, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypeStatusUI, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypeSupply, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypeTeamResourceButton, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypeTechGlossaryPanel, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypeTechTreePanel, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypeTextTag, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypeTipAlertPanel, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypeVictoryPanel, false);
}

bool lib1_gf_UnitHasBehaviorWithBehaviorFlag (unit lp_unit, int lp_behaviorFlag) {
    int autoDFAAECA9_ae;
    int autoDFAAECA9_ai;

    // Variable Declarations
    int lv_behaviorCount;
    string lv_pickedBehavior;
    int lv_i;

    // Variable Initialization

    // Implementation
    if ((lp_unit == null)) {
        return false;
    }
    lv_behaviorCount = UnitBehaviorCountAll(lp_unit);
    autoDFAAECA9_ae = lv_behaviorCount;
    autoDFAAECA9_ai = 1;
    lv_i = 1;
    for ( ; ( (autoDFAAECA9_ai >= 0 && lv_i <= autoDFAAECA9_ae) || (autoDFAAECA9_ai <= 0 && lv_i >= autoDFAAECA9_ae) ) ; lv_i += autoDFAAECA9_ai ) {
        lv_pickedBehavior = UnitBehaviorGet(lp_unit, lv_i);
        if ((UnitBehaviorHasFlag(lv_pickedBehavior, lp_behaviorFlag) == true)) {
            return true;
        }
    }
    return false;
}

void lib1_gf_ModifyUnitCustomValue (unit lp_unit, int lp_customValuePreset, fixed lp_customValueModification) {
    // Variable Declarations
    fixed lv_customValueCurrent;

    // Variable Initialization

    // Implementation
    lv_customValueCurrent = UnitGetCustomValue(lp_unit, (lp_customValuePreset));
    lv_customValueCurrent += lp_customValueModification;
    UnitSetCustomValue(lp_unit, (lp_customValuePreset), lv_customValueCurrent);
}

void lib1_gf_ModifyUnitCustomValue2 (unit lp_unit, int lp_customValuePreset, fixed lp_customValueNew) {
    // Variable Declarations
    fixed lv_customValueCurrent;

    // Variable Initialization

    // Implementation
    lv_customValueCurrent = UnitGetCustomValue(lp_unit, (lp_customValuePreset));
    UnitSetCustomValue(lp_unit, (lp_customValuePreset), lp_customValueNew);
}

fixed lib1_gf_PresetCustomValue (unit lp_unit, int lp_customValuePreset) {
    // Implementation
    return UnitGetCustomValue(lp_unit, (lp_customValuePreset));
}

void lib1_gf_AddTimeToTimer (timer lp_timer, fixed lp_additionalTime) {
    // Implementation
    TimerStart(lp_timer, (TimerGetRemaining(lp_timer) + lp_additionalTime), false, c_timeGame);
}

fixed lib1_gf_ConvertBooleanToReal (bool lp_boolean) {
    // Implementation
    return IntToFixed(BoolToInt(lp_boolean));
}

void lib1_gf_ShakeCameraForPlayer (int lp_p, string lp_cameraSetting) {
    // Implementation
    CameraShake(lp_p, lp_cameraSetting, "Earthquake", 0.125, 0.25, 0.375);
}

void lib1_gf_DebugFlashUnit (unit lp_unit) {
    // Implementation
    libNtve_gf_SendActorMessageToUnit(lp_unit, "SetTintColor 255,0,0");
    libNtve_gf_SendActorMessageToUnit(lp_unit, "SetTintColor 255,255,255 1.000000");
}

void lib1_gf_DebugPoint (point lp_point) {
    // Implementation
    PlayerCreateEffectPoint(0, "DebugPoint", lp_point);
}

void lib1_gf_DebugPoint2 (point lp_point, fixed lp_radius) {
    // Implementation
    CatalogFieldValueSet(c_gameCatalogEffect, "DebugPointVariable", "AreaArray[" + IntToString(0) + "].Radius", 0, FixedToString(lp_radius, c_fixedPrecisionAny));
    PlayerCreateEffectPoint(0, "DebugPointVariable", lp_point);
}

void lib1_gf_DebugPoint3 (point lp_point, fixed lp_width, fixed lp_height) {
    // Implementation
    CatalogFieldValueSet(c_gameCatalogEffect, "DebugRectangleVariable", "AreaArray[" + IntToString(0) + "].RectangleHeight", 0, FixedToString(lp_height, c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogEffect, "DebugRectangleVariable", "AreaArray[" + IntToString(0) + "].RectangleWidth", 0, FixedToString(lp_width, c_fixedPrecisionAny));
    PlayerCreateEffectPoint(0, "DebugRectangleVariable", lp_point);
}

trigger auto_lib1_gf_DebugPoint4_Trigger = null;
point auto_lib1_gf_DebugPoint4_lp_point;
fixed auto_lib1_gf_DebugPoint4_lp_duration;

void lib1_gf_DebugPoint4 (point lp_point, fixed lp_duration) {
    auto_lib1_gf_DebugPoint4_lp_point = lp_point;
    auto_lib1_gf_DebugPoint4_lp_duration = lp_duration;

    if (auto_lib1_gf_DebugPoint4_Trigger == null) {
        auto_lib1_gf_DebugPoint4_Trigger = TriggerCreate("auto_lib1_gf_DebugPoint4_TriggerFunc");
    }

    TriggerExecute(auto_lib1_gf_DebugPoint4_Trigger, false, false);
}

bool auto_lib1_gf_DebugPoint4_TriggerFunc (bool testConds, bool runActions) {
    point lp_point = auto_lib1_gf_DebugPoint4_lp_point;
    fixed lp_duration = auto_lib1_gf_DebugPoint4_lp_duration;

    // Variable Declarations
    unit lv_debugUnit;

    // Variable Initialization

    // Implementation
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zergling", c_unitCreateIgnorePlacement, 0, lp_point);
    lv_debugUnit = UnitLastCreated();
    Wait(lp_duration, c_timeGame);
    UnitRemove(lv_debugUnit);
    return true;
}

trigger auto_lib1_gf_DebugPoint5_Trigger = null;
point auto_lib1_gf_DebugPoint5_lp_point;
fixed auto_lib1_gf_DebugPoint5_lp_duration;

void lib1_gf_DebugPoint5 (point lp_point, fixed lp_duration) {
    auto_lib1_gf_DebugPoint5_lp_point = lp_point;
    auto_lib1_gf_DebugPoint5_lp_duration = lp_duration;

    if (auto_lib1_gf_DebugPoint5_Trigger == null) {
        auto_lib1_gf_DebugPoint5_Trigger = TriggerCreate("auto_lib1_gf_DebugPoint5_TriggerFunc");
    }

    TriggerExecute(auto_lib1_gf_DebugPoint5_Trigger, false, false);
}

bool auto_lib1_gf_DebugPoint5_TriggerFunc (bool testConds, bool runActions) {
    point lp_point = auto_lib1_gf_DebugPoint5_lp_point;
    fixed lp_duration = auto_lib1_gf_DebugPoint5_lp_duration;

    // Variable Declarations
    unit lv_debugUnit;

    // Variable Initialization

    // Implementation
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Mutalisk", c_unitCreateIgnorePlacement, 0, lp_point);
    lv_debugUnit = UnitLastCreated();
    Wait(lp_duration, c_timeGame);
    UnitRemove(lv_debugUnit);
    return true;
}

void lib1_gf_EnableDebugCategory (int lp_debugCategory) {
    // Implementation
    DataTableSetBool(true, IntToString((lp_debugCategory)), true);
}

bool lib1_gf_PrintCategoryIsEnabled (int lp_debugCategory) {
    // Implementation
    if ((DataTableGetBool(true, IntToString((lp_debugCategory))) == true)) {
        return true;
    }
    else {
        return false;
    }
}

void lib1_gf_DebugString (string lp_message) {
    // Implementation
    if ((lib1_gf_PrintCategoryIsEnabled(lib1_ge_DebugCategory_Global) == true)) {
        TriggerDebugOutput(1, StringToText(lp_message), true);
    }
}

void lib1_gf_DebugString2 (string lp_message, int lp_debugCategory) {
    // Implementation
    if ((lib1_gf_PrintCategoryIsEnabled(lib1_ge_DebugCategory_Global) == true) && (lib1_gf_PrintCategoryIsEnabled(lp_debugCategory) == true)) {
        TriggerDebugOutput(1, StringToText(lp_message), true);
    }
}

void lib1_gf_DebugString4 (string lp_prefix) {
    // Implementation
    lib1_gv_debugStringOpenMessage = "";
    lib1_gv_debugStringOpenMessagePrefix = "";
    lib1_gv_debugStringOpenMessageAppender = "";
    lib1_gv_debugStringOpenMessagePrefix = lp_prefix;
}

void lib1_gf_DebugString3 (string lp_nextMessage) {
    // Implementation
    lib1_gv_debugStringOpenMessage = (lib1_gv_debugStringOpenMessage + lp_nextMessage);
}

void lib1_gf_DebugString6 (string lp_nextMessage) {
    // Implementation
    lib1_gv_debugStringOpenMessageAppender = (lib1_gv_debugStringOpenMessageAppender + lp_nextMessage);
}

void lib1_gf_DebugString5 (int lp_debugCategory) {
    // Implementation
    if ((lib1_gf_PrintCategoryIsEnabled(lib1_ge_DebugCategory_Global) == true) && (lib1_gf_PrintCategoryIsEnabled(lp_debugCategory) == true) && (lib1_gf_StringIsValid(lib1_gv_debugStringOpenMessage) == true)) {
        TriggerDebugOutput(1, StringToText((lib1_gv_debugStringOpenMessagePrefix + lib1_gv_debugStringOpenMessage + lib1_gv_debugStringOpenMessageAppender)), true);
    }
    lib1_gv_debugStringOpenMessage = "";
    lib1_gv_debugStringOpenMessagePrefix = "";
    lib1_gv_debugStringOpenMessageAppender = "";
}

void lib1_gf_HookupSupportPanel () {
    int auto3AA10D21_ae;
    int auto3AA10D21_ai;

    // Variable Declarations
    int lv_i;
    string lv_debugPanelFrameName;
    string lv_debugPanelFrameNumber;

    // Variable Initialization
    lv_debugPanelFrameName = "";
    lv_debugPanelFrameNumber = "";

    // Implementation
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/SupportLibDebugPanel");
    lib1_gv_supportPanel.lv_main = DialogControlLastCreated();
    lv_debugPanelFrameName = ("UIContainer/ConsoleUIContainer/SupportLibDebugPanel/Header");
    DialogControlHookupStandard(c_triggerControlTypeLabel, lv_debugPanelFrameName);
    lib1_gv_supportPanel.lv_header = DialogControlLastCreated();
    auto3AA10D21_ae = lib1_gv_supportPanel.lv_maxEntryCount;
    auto3AA10D21_ai = 1;
    lv_i = 1;
    for ( ; ( (auto3AA10D21_ai >= 0 && lv_i <= auto3AA10D21_ae) || (auto3AA10D21_ai <= 0 && lv_i >= auto3AA10D21_ae) ) ; lv_i += auto3AA10D21_ai ) {
        if ((lv_i < 10)) {
            lv_debugPanelFrameNumber = ("0" + IntToString(lv_i));
        }
        else {
            lv_debugPanelFrameNumber = IntToString(lv_i);
        }
        lv_debugPanelFrameName = ("UIContainer/ConsoleUIContainer/SupportLibDebugPanel/Entry" + lv_debugPanelFrameNumber);
        DialogControlHookupStandard(c_triggerControlTypePanel, lv_debugPanelFrameName);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
        lib1_gv_supportPanel.lv_entry[(lv_i - 1)] = DialogControlLastCreated();
        lv_debugPanelFrameName = ("UIContainer/ConsoleUIContainer/SupportLibDebugPanel/Entry" + lv_debugPanelFrameNumber + "/Field");
        DialogControlHookupStandard(c_triggerControlTypeLabel, lv_debugPanelFrameName);
        libNtve_gf_SetDialogItemText(DialogControlLastCreated(), (StringExternal("Param/Value/lib_1_3BB27C0A") + StringToText(lv_debugPanelFrameNumber)), PlayerGroupAll());
        lib1_gv_supportPanel.lv_field[(lv_i - 1)] = DialogControlLastCreated();
        lv_debugPanelFrameName = ("UIContainer/ConsoleUIContainer/SupportLibDebugPanel/Entry" + lv_debugPanelFrameNumber + "/Value");
        DialogControlHookupStandard(c_triggerControlTypeLabel, lv_debugPanelFrameName);
        libNtve_gf_SetDialogItemText(DialogControlLastCreated(), (StringExternal("Param/Value/lib_1_94629CDC") + StringToText(lv_debugPanelFrameNumber)), PlayerGroupAll());
        lib1_gv_supportPanel.lv_value[(lv_i - 1)] = DialogControlLastCreated();
    }
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool lib1_InitLib_completed = false;

void lib1_InitLib () {
    if (lib1_InitLib_completed) {
        return;
    }

    lib1_InitLib_completed = true;

    lib1_InitLibraries();
    lib1_InitVariables();
}

//--------------------------------------------------------------------------------------------------
// Library: 2DGameLib
//--------------------------------------------------------------------------------------------------
// Preset Declarations
const int lib3_ge_UnitCollisionTestPoint_Top = 0;
const int lib3_ge_UnitCollisionTestPoint_LeftHigh = 1;
const int lib3_ge_UnitCollisionTestPoint_LeftMid = 2;
const int lib3_ge_UnitCollisionTestPoint_LeftLow = 3;
const int lib3_ge_UnitCollisionTestPoint_RightHigh = 4;
const int lib3_ge_UnitCollisionTestPoint_RightMid = 5;
const int lib3_ge_UnitCollisionTestPoint_RightLow = 6;
const int lib3_ge_UnitCollisionTestPoint_Origin = 7;
const int lib3_ge_UnitCollisionTestPoint_Center = 8;
const int lib3_ge__2DUnitFacing_Right = 0;
const int lib3_ge__2DUnitFacing_Left = 1;
const int lib3_ge_KineticArrayDirections_Up = 0;
const int lib3_ge_KineticArrayDirections_Down = 1;
const int lib3_ge_KineticArrayDirections_Left = 2;
const int lib3_ge_KineticArrayDirections_Right = 3;
const int lib3_ge_GenericEvent_None = 0;
const int lib3_ge_GenericEvent_StaticCollisionBottom = 1;
const int lib3_ge_GenericEventParameter_TargetUnit = 0;
const int lib3_ge_GenericEventParameter_CollisionUnit = 1;
const int lib3_ge_DebugPanelConfigurations_UnitPhysics = 0;
const int lib3_ge_UnitCustomValue_CurrentVelocityX = 0;
const int lib3_ge_UnitCustomValue_CurrentVelocityY = 1;
const int lib3_ge_UnitCustomValue_Height = 2;
const int lib3_ge_UnitCustomValue_Width = 3;
const int lib3_ge_UnitCustomValue_GroundSpeed = 4;
const int lib3_ge_UnitCustomValue_AirSpeed = 5;
const int lib3_ge_UnitCustomValue_JumpForce = 6;
const int lib3_ge_UnitCustomValue_JumpForceSecondary = 7;
const int lib3_ge_UnitCustomValue_JumpChargesMax = 8;
const int lib3_ge_UnitCustomValue_JumpChargesCurrent = 9;
const int lib3_ge_UnitCustomValue_Restitution = 10;
const int lib3_ge_UnitCustomValue_StoredVelocityX = 11;
const int lib3_ge_UnitCustomValue_StoredVelocityY = 12;
const int lib3_ge_UnitCustomValue_GroundedState = 13;
const int lib3_ge_UnitCustomValue_OneWayPlatformPhaseState = 14;
const int lib3_ge_UnitCustomValue_IgnoreCollisionState = 15;
const int lib3_ge_UnitCustomValue_Facing = 16;
const int lib3_ge_UnitCustomValue_HalfWidth = 17;
const int lib3_ge_UnitCustomValue_HalfHeight = 18;
const int lib3_ge_UnitCustomValue_LowHeight = 19;
const int lib3_ge_UnitCustomValue_HighHeight = 20;
const int lib3_ge_UnitCustomValue_XOffset = 21;
const int lib3_ge_UnitCustomValue_YOffset = 22;
const int lib3_ge_UnitCustomValue_CollisionIndex = 23;

// Constants
const fixed lib3_gv_terminalVelocity = 9.99;
const fixed lib3_gv_trivialVelocity = 0.01;
const fixed lib3_gv_speculativeContactStep = 0.25;
const fixed lib3_gv_speculativeContactStep2 = 0.2;
const fixed lib3_gv_speculativeContactStep3 = 0.8;

// Structures
struct lib3_gs_GameData {
    int lv_maxPlayers;
    fixed lv_friction;
    fixed lv_airResistance;
    fixed lv_gravity;
};

struct lib3_gs_PlayerArray {
    unit lv_hero;
    int lv_index;
    int lv_coins;
    int lv_points;
    point lv_respawnPoint;
    bool lv_input_KeyW_isPressed;
    bool lv_input_KeyW_isHeld;
    bool lv_input_KeyA_isPressed;
    bool lv_input_KeyS_isPressed;
    bool lv_input_KeyS_isHeld;
    bool lv_input_KeyD_isPressed;
    bool lv_input_Jump_isLimited;
    timer lv_controlLoss;
};

struct lib3_gs_StaticCollisionArray {
    region lv_region;
    unit lv_unit;
    int lv_index;
    bool lv_oneWayState;
};

struct lib3_gs_UIObjects {
    int lv_heroStatus;
    int lv_coinsCollected;
    int lv_pointsCollected;
};

struct lib3_gs_EntityHeroData {
    fixed lv_width;
    fixed lv_height;
    fixed lv_groundSpeed;
    fixed lv_airSpeed;
    fixed lv_jumpForce;
    fixed lv_jumpForceSecondary;
    int lv_jumpChargesMax;
    int lv_jumpChargesCurrent;
};

struct lib3_gs_EntityCoinData {
    fixed lv_width;
    fixed lv_height;
    fixed lv_restitution;
};

struct lib3_gs_EntityHealthGlobeData {
    fixed lv_width;
    fixed lv_height;
    fixed lv_restitution;
};

struct lib3_gs_EntityPatrollerData {
    fixed lv_width;
    fixed lv_height;
    fixed lv_groundSpeed;
    fixed lv_airSpeed;
};

// Variable Declarations
lib3_gs_UIObjects lib3_gv_uI;
lib3_gs_PlayerArray[17] lib3_gv_player;
lib3_gs_EntityHeroData lib3_gv_entityHero;
lib3_gs_EntityPatrollerData lib3_gv_entityPatroller;
lib3_gs_EntityCoinData lib3_gv_entityCoin;
lib3_gs_EntityHealthGlobeData lib3_gv_entityHealthGlobe;
lib3_gs_GameData lib3_gv_game;
lib3_gs_StaticCollisionArray[2049] lib3_gv_staticCollision;
int lib3_gv_staticCollisionArrayCount;
string[4][10] lib3_gv_kineticTranslate;
string[4][10] lib3_gv_kineticTranslate2;
string[4][10] lib3_gv_kineticTranslate3;
string[4][10] lib3_gv_kineticTranslate6;
string[4][10] lib3_gv_kineticTranslate5;
string[4][10] lib3_gv_kineticTranslate4;
unitgroup lib3_gv_activePhysicsUnits;
unitgroup lib3_gv_staticCollisionUnits;
region lib3_gv_gameCollisionRegion;
region lib3_gv_gameCollisionRegionOneWay;
int lib3_gv_totalLiveKinetics;
int lib3_gv_totalLiveKinetics2;
fixed lib3_gv_maximumCollisionRadius;
fixed lib3_gv_minimumCollisionLength;
fixed lib3_gv_minimumHorizontalTest;
fixed lib3_gv_maximumHorizontalTest;
fixed lib3_gv_midHeightTest;
fixed lib3_gv_maxHeightTest;

// Function Declarations
void lib3_gf_SetUnitVerticalVelocity (unit lp_unit, fixed lp_velocityTarget);
void lib3_gf_SetUnitHorizontalVelocity (unit lp_unit, fixed lp_velocityTarget);
void lib3_gf_AddVerticalVelocity (unit lp_unit, fixed lp_velocityAddition);
void lib3_gf_AddHorizontalVelocity (unit lp_unit, fixed lp_velocityAddition);
void lib3_gf_UnitRemoveHorizontalKinetics (unit lp_unit);
void lib3_gf_UnitRemoveVerticalKinetics (unit lp_unit);
fixed lib3_gf_PresetCustomValue (unit lp_unit);
fixed lib3_gf_PresetCustomValue2 (unit lp_unit);
fixed lib3_gf_UnitCalculatedLandingHorizontalVelocity (unit lp_unit);
bool lib3_gf_UnitIsInMotion (unit lp_unit);
bool lib3_gf_UnitIsHeroUnit (unit lp_unit);
unit lib3_gf_GetCollisionUnitFromPoint (point lp_testPoint);
void lib3_gf_TranslateUnit5 (unit lp_unit, fixed lp_verticalImpulse);
void lib3_gf_TranslateUnit4 (unit lp_unit, fixed lp_horizontalImpulse);
point lib3_gf_UnitGetCollisionTestPoint2 (unit lp_unit, int lp_hitTestPointType);
point lib3_gf_UnitGetPresetPointNext (unit lp_unit, int lp_hitTestPointType);
unit lib3_gf_UnitGetParent (unit lp_unit);
bool lib3_gf_HitboxIndexExists (string lp_hitboxIndex);
string lib3_gf_UnitGetHitboxGroupCode (unit lp_unit);
void lib3_gf_MoveUnitAndHitboxUnitsInstantly (unit lp_unit, point lp_point);
void lib3_gf_RemoveKineticFromUnitAndHitboxUnits (unit lp_unit, string lp_effect);
void lib3_gf_UnitRemoveHitboxGroup (unit lp_unit);
string lib3_gf_UnitGetHitboxGroupCode2 (unit lp_attacker, unit lp_target);
bool lib3_gf_UnitHasAttackImmunityFrames (unit lp_targetUnit, string lp_attackIndex);
void lib3_gf_UnitAddAttackImmunityFrames (unit lp_targetUnit, string lp_attackIndex, fixed lp_duration);
fixed lib3_gf_XOfCollisionUnitLeft (unit lp_unit);
fixed lib3_gf_XOfCollisionUnitRight (unit lp_unit);
fixed lib3_gf_YOfCollisionUnitTop (unit lp_unit);
fixed lib3_gf_YOfCollisionUnitBottom (unit lp_unit);
bool lib3_gf_CollisionDirectionIsDown (point lp_targetPoint, unit lp_collisionUnit);
bool lib3_gf_CollisionDirectionIsDown2 (point lp_targetPoint, unit lp_collisionUnit);
bool lib3_gf_CollisionDirectionIsDown3 (point lp_targetPoint, unit lp_collisionUnit);
bool lib3_gf_CollisionDirectionIsDown4 (point lp_targetPoint, unit lp_collisionUnit);
void lib3_gf_CreateUnitDeathFlareAtPoint (point lp_point);
void lib3_gf_UnitRemoveJumpChargeAfterBuffer (unit lp_unit, fixed lp_delay);
void lib3_gf_UnitSet2DFacing (unit lp_unit, int lp_facing);
void lib3_gf_SeparateTargetUnitFromKnockbackUnit (unit lp_targetUnit, unit lp_collisionUnit, fixed lp_hitDirection);
void lib3_gf_KnockbackXOverTime (unit lp_unit, fixed lp_power, fixed lp_duration);
void lib3_gf_KnockbackYOverTime (unit lp_unit, fixed lp_power, fixed lp_duration);
void lib3_gf_HeroSetFacingFromInput (unit lp_targetUnit);
void lib3_gf_HeroRespawnForPlayer (point lp_point, int lp_p);
void lib3_gf_PlayerAddPoints (int lp_p, int lp_addedPoints);
text lib3_gf_FormatPoints (int lp_points);
void lib3_gf_Initialize2DGameLib ();
void lib3_gf_InitializeGameUI ();
void lib3_gf_InitializeGameData ();
void lib3_gf_InitializeEnvironment ();
void lib3_gf_InitializePlayerSettings ();
void lib3_gf_InitializeDebugSettings ();
void lib3_gf_InitializeGravity ();
void lib3_gf_InitializeGroundRegion ();
void lib3_gf_SetCollisionVariablesFromInstance (string lp_staticCollisionData, string lp_staticCollisionInstance);
void lib3_gf_CalculateCollisionVariables ();
void lib3_gf_InitializeKineticArray ();
void lib3_gf_PlayerResolveInput (int lp_p);
void lib3_gf_UnitResolveSpeculativeContact (unit lp_unit);
void lib3_gf_UnitResolveHorizontalCollision (unit lp_unit);
void lib3_gf_UnitResolveVerticalCollision (unit lp_unit);
void lib3_gf_ResolveGravityForUnit (unit lp_unit);
void lib3_gf_ResolveRestitutionForUnit (unit lp_unit);
void lib3_gf_TranslateUnit (unit lp_unit);
void lib3_gf_TranslateUnit2 (unit lp_unit);
void lib3_gf_TranslateUnit3 (unit lp_unit);
void lib3_gf_HeroSetHurtboxArea (unit lp_unit);
void lib3_gf_BlockUnitSpawnCarriedObejct (unit lp_collisionUnit);
void lib3_gf_RemoveCollisionUnitData (unit lp_collisionUnit);
void lib3_gf_BlockUnitBounceUnitsOnBlock (unit lp_collisionUnit);
void lib3_gf_RedrawGameCollisionRegion ();
void lib3_gf_PatrollerAIController (unit lp_aIUnit);
void lib3_gf_RoverAIController (unit lp_aIUnit);
void lib3_gf_UnitIssueWalkOrder (unit lp_unit, fixed lp_orderTargetOffset);
string lib3_gf_PresetGenericEvent (int lp_event);
string lib3_gf_PresetGenericEvent2 (int lp_event, int lp_parameter);
void lib3_gf_SendGenericEventPreset (int lp_event);
void lib3_gf_SetStaticCollisionVisibility (bool lp_show);
void lib3_gf_DebugUnitCollisionTestsNext (unit lp_unit);
void lib3_gf_DebugUnitCollisionTests (unit lp_unit);
void lib3_gf_ConfigureDebugPanelforUnitPhysics (unit lp_unit, playergroup lp_targetPlayers);
void lib3_gf_ConfigureDebugPanelforUnitPhysics2 (unit lp_unit, playergroup lp_targetPlayers);
string lib3_gf_ConvertUnitVelocityToString (unit lp_unit);
string lib3_gf_ConvertUnitPhysicsStateToString (unit lp_unit);
string lib3_gf_ConvertUnitGroundedStateToString (unit lp_unit);

// Trigger Declarations
trigger lib3_gt_EachGameTick;
trigger lib3_gt_PlayerInputKeyDown;
trigger lib3_gt_PlayerInputKeyUp;
trigger lib3_gt_UnitEntersBottomlessPit;
trigger lib3_gt_UnitDies;
trigger lib3_gt_CoinEntersMap;
trigger lib3_gt_HeroCoinPickup;
trigger lib3_gt_HealthGlobeEntersMap;
trigger lib3_gt_HeroHealthPickup;
trigger lib3_gt_HeroEntersMap;
trigger lib3_gt_HeroMovementTrailAnimation;
trigger lib3_gt_RoverEntersMap;
trigger lib3_gt_PatrollerEntersMap;
trigger lib3_gt_PatrollerHitsHero;
trigger lib3_gt_PatrollerGetsStomped;
trigger lib3_gt_HeroHitsBreakableBlock;
trigger lib3_gt_HeroHitsQuestionBlock;

// Library Initialization
void lib3_InitVariables ();

//--------------------------------------------------------------------------------------------------
// Library: 2DGameLib
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void lib3_InitLibraries () {
    libNtve_InitVariables();
}

// Variable Initialization
bool lib3_InitVariables_completed = false;

void lib3_InitVariables () {
    int init_i;

    if (lib3_InitVariables_completed) {
        return;
    }

    lib3_InitVariables_completed = true;

    lib3_gv_uI.lv_heroStatus = c_invalidDialogControlId;
    lib3_gv_uI.lv_coinsCollected = c_invalidDialogControlId;
    lib3_gv_uI.lv_pointsCollected = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 16; init_i += 1) {
        lib3_gv_player[init_i].lv_controlLoss = TimerCreate();
    }
    lib3_gv_entityHero.lv_width = 0.66;
    lib3_gv_entityHero.lv_height = 2.0;
    lib3_gv_entityHero.lv_groundSpeed = 0.6;
    lib3_gv_entityHero.lv_airSpeed = 0.25;
    lib3_gv_entityHero.lv_jumpForce = 1.0;
    lib3_gv_entityHero.lv_jumpForceSecondary = 0.8;
    lib3_gv_entityHero.lv_jumpChargesMax = 2;
    lib3_gv_entityHero.lv_jumpChargesCurrent = 2;
    lib3_gv_entityPatroller.lv_width = 1.0;
    lib3_gv_entityPatroller.lv_height = 1.0;
    lib3_gv_entityPatroller.lv_groundSpeed = 0.3;
    lib3_gv_entityPatroller.lv_airSpeed = 0.2;
    lib3_gv_entityCoin.lv_width = 1.0;
    lib3_gv_entityCoin.lv_height = 1.0;
    lib3_gv_entityCoin.lv_restitution = 0.5;
    lib3_gv_entityHealthGlobe.lv_width = 1.0;
    lib3_gv_entityHealthGlobe.lv_height = 1.0;
    lib3_gv_game.lv_maxPlayers = 1;
    lib3_gv_game.lv_friction = 0.5;
    lib3_gv_game.lv_airResistance = 0.7;
    lib3_gv_game.lv_gravity = -0.12;
    lib3_gv_activePhysicsUnits = UnitGroupEmpty();
    lib3_gv_staticCollisionUnits = UnitGroupEmpty();
}

// Presets
// Functions
void lib3_gf_SetUnitVerticalVelocity (unit lp_unit, fixed lp_velocityTarget) {
    // Variable Declarations
    fixed lv_newVelocity;
    string lv_velocityKinetic;
    fixed lv_i;

    // Variable Initialization

    // Implementation
    lv_newVelocity = libNtve_gf_ArithmeticRealClamp(lp_velocityTarget, (-1.0 * lib3_gv_terminalVelocity), lib3_gv_terminalVelocity);
    if ((lv_newVelocity < lib3_gv_trivialVelocity) && (lv_newVelocity > (-1.0 * lib3_gv_trivialVelocity))) {
        lv_newVelocity = 0.0;
    }
    if ((lv_newVelocity == 0.0)) {
        lib3_gf_UnitRemoveVerticalKinetics(lp_unit);
    }
    UnitSetCustomValue(lp_unit, (lib3_ge_UnitCustomValue_CurrentVelocityY), lv_newVelocity);
    if ((lib3_gf_UnitIsInMotion(lp_unit) == true)) {
        UnitGroupAdd(lib3_gv_activePhysicsUnits, lp_unit);
    }
    else {
        UnitGroupRemove(lib3_gv_activePhysicsUnits, lp_unit);
    }
}

void lib3_gf_SetUnitHorizontalVelocity (unit lp_unit, fixed lp_velocityTarget) {
    // Variable Declarations
    fixed lv_newVelocity;
    string lv_velocityKinetic;
    fixed lv_i;

    // Variable Initialization

    // Implementation
    lv_newVelocity = libNtve_gf_ArithmeticRealClamp(lp_velocityTarget, (-1.0 * lib3_gv_terminalVelocity), lib3_gv_terminalVelocity);
    if ((lv_newVelocity < lib3_gv_trivialVelocity) && (lv_newVelocity > (-1.0 * lib3_gv_trivialVelocity))) {
        lv_newVelocity = 0.0;
    }
    if ((lv_newVelocity == 0.0)) {
        lib3_gf_UnitRemoveHorizontalKinetics(lp_unit);
    }
    UnitSetCustomValue(lp_unit, (lib3_ge_UnitCustomValue_CurrentVelocityX), lv_newVelocity);
    if ((lib3_gf_UnitIsInMotion(lp_unit) == true)) {
        UnitGroupAdd(lib3_gv_activePhysicsUnits, lp_unit);
    }
    else {
        UnitGroupRemove(lib3_gv_activePhysicsUnits, lp_unit);
    }
}

void lib3_gf_AddVerticalVelocity (unit lp_unit, fixed lp_velocityAddition) {
    // Variable Declarations
    fixed lv_currentVelocity;
    fixed lv_newVelocity;
    string lv_velocityKinetic;
    fixed lv_i;

    // Variable Initialization

    // Implementation
    lv_currentVelocity = lib3_gf_PresetCustomValue2(lp_unit);
    lv_newVelocity = libNtve_gf_ArithmeticRealClamp((lv_currentVelocity + lp_velocityAddition), (-1.0 * lib3_gv_terminalVelocity), lib3_gv_terminalVelocity);
    if ((lv_newVelocity < lib3_gv_trivialVelocity) && (lv_newVelocity > (-1.0 * lib3_gv_trivialVelocity))) {
        lv_newVelocity = 0.0;
    }
    if ((lv_newVelocity == 0.0)) {
        lib3_gf_UnitRemoveVerticalKinetics(lp_unit);
    }
    UnitSetCustomValue(lp_unit, (lib3_ge_UnitCustomValue_CurrentVelocityY), lv_newVelocity);
    if ((lib3_gf_UnitIsInMotion(lp_unit) == true)) {
        UnitGroupAdd(lib3_gv_activePhysicsUnits, lp_unit);
    }
    else {
        UnitGroupRemove(lib3_gv_activePhysicsUnits, lp_unit);
    }
}

void lib3_gf_AddHorizontalVelocity (unit lp_unit, fixed lp_velocityAddition) {
    // Variable Declarations
    fixed lv_currentVelocity;
    fixed lv_newVelocity;
    string lv_velocityKinetic;
    fixed lv_i;

    // Variable Initialization

    // Implementation
    lv_currentVelocity = lib3_gf_PresetCustomValue(lp_unit);
    lv_newVelocity = libNtve_gf_ArithmeticRealClamp((lv_currentVelocity + lp_velocityAddition), (-1.0 * lib3_gv_terminalVelocity), lib3_gv_terminalVelocity);
    if ((lv_newVelocity < lib3_gv_trivialVelocity) && (lv_newVelocity > (-1.0 * lib3_gv_trivialVelocity))) {
        lv_newVelocity = 0.0;
    }
    if ((lv_newVelocity == 0.0)) {
        lib3_gf_UnitRemoveHorizontalKinetics(lp_unit);
    }
    UnitSetCustomValue(lp_unit, (lib3_ge_UnitCustomValue_CurrentVelocityX), lv_newVelocity);
    if ((lib3_gf_UnitIsInMotion(lp_unit) == true)) {
        UnitGroupAdd(lib3_gv_activePhysicsUnits, lp_unit);
    }
    else {
        UnitGroupRemove(lib3_gv_activePhysicsUnits, lp_unit);
    }
}

void lib3_gf_UnitRemoveHorizontalKinetics (unit lp_unit) {
    // Variable Declarations
    fixed lv_velocityX;
    string lv_kineticDirection;

    // Variable Initialization

    // Implementation
    lv_velocityX = lib3_gf_PresetCustomValue(lp_unit);
    if ((lv_velocityX > 0.0)) {
        lv_kineticDirection = "VelocityRemoveAllRight";
    }
    else {
        lv_kineticDirection = "VelocityRemoveAllLeft";
    }
    lib3_gf_RemoveKineticFromUnitAndHitboxUnits(lp_unit, lv_kineticDirection);
    return ;
}

void lib3_gf_UnitRemoveVerticalKinetics (unit lp_unit) {
    // Variable Declarations
    fixed lv_velocityY;
    string lv_kineticDirection;

    // Variable Initialization

    // Implementation
    lv_velocityY = lib3_gf_PresetCustomValue2(lp_unit);
    if ((lv_velocityY > 0.0)) {
        lv_kineticDirection = "VelocityRemoveAllUp";
    }
    else {
        lv_kineticDirection = "VelocityRemoveAllDown";
    }
    lib3_gf_RemoveKineticFromUnitAndHitboxUnits(lp_unit, lv_kineticDirection);
    return ;
}

fixed lib3_gf_PresetCustomValue (unit lp_unit) {
    // Implementation
    return UnitGetCustomValue(lp_unit, (lib3_ge_UnitCustomValue_CurrentVelocityX));
}

fixed lib3_gf_PresetCustomValue2 (unit lp_unit) {
    // Implementation
    return UnitGetCustomValue(lp_unit, (lib3_ge_UnitCustomValue_CurrentVelocityY));
}

fixed lib3_gf_UnitCalculatedLandingHorizontalVelocity (unit lp_unit) {
    // Variable Declarations
    fixed lv_landingVelocity;
    fixed lv_currentVelocity;
    fixed lv_restitution;

    // Variable Initialization

    // Implementation
    lv_restitution = lib1_gf_PresetCustomValue(lp_unit, lib3_ge_UnitCustomValue_Restitution);
    lv_currentVelocity = lib1_gf_PresetCustomValue(lp_unit, lib3_ge_UnitCustomValue_CurrentVelocityX);
    if ((lv_restitution == 0.0)) {
        return (lv_currentVelocity * lib3_gv_game.lv_friction);
    }
    lv_landingVelocity = ((lv_currentVelocity * lib3_gv_game.lv_friction) + ((1.0 - lib3_gv_game.lv_friction) * lv_currentVelocity * lv_restitution));
    return lv_landingVelocity;
}

bool lib3_gf_UnitIsInMotion (unit lp_unit) {
    // Implementation
    if ((lib1_gf_PresetCustomValue(lp_unit, lib3_ge_UnitCustomValue_GroundedState) == IntToFixed(BoolToInt(true))) && (lib3_gf_PresetCustomValue(lp_unit) == 0.0) && (lib3_gf_PresetCustomValue2(lp_unit) == 0.0)) {
        return false;
    }
    else {
        return true;
    }
}

bool lib3_gf_UnitIsHeroUnit (unit lp_unit) {
    // Implementation
    if ((UnitGetType(lp_unit) == "Hero")) {
        return true;
    }
    else {
        return false;
    }
}

unit lib3_gf_GetCollisionUnitFromPoint (point lp_testPoint) {
    int autoDB1C3BD5_ae;
    int autoDB1C3BD5_ai;

    // Variable Declarations
    unit lv_staticCollisionUnit;
    int lv_i;

    // Variable Initialization

    // Implementation
    autoDB1C3BD5_ae = lib3_gv_staticCollisionArrayCount;
    autoDB1C3BD5_ai = 1;
    lv_i = 1;
    for ( ; ( (autoDB1C3BD5_ai >= 0 && lv_i <= autoDB1C3BD5_ae) || (autoDB1C3BD5_ai <= 0 && lv_i >= autoDB1C3BD5_ae) ) ; lv_i += autoDB1C3BD5_ai ) {
        if ((RegionContainsPoint(lib3_gv_staticCollision[lv_i].lv_region, lp_testPoint) == true)) {
            lv_staticCollisionUnit = lib3_gv_staticCollision[lv_i].lv_unit;
            return lv_staticCollisionUnit;
        }
    }
    return null;
}

void lib3_gf_TranslateUnit5 (unit lp_unit, fixed lp_verticalImpulse) {
    int autoCD2A480B_ae;
    int autoCD2A480B_ai;

    // Variable Declarations
    fixed lv_velocityY;
    fixed lv_absVelocity;
    int lv_i;
    int lv_kineticDotHundred;
    int lv_kineticDotTen;
    int lv_kineticOne;
    int lv_directionIndex;
    string lv_hitboxIndex;
    unitgroup lv_hitboxGroup;
    int lv_hitboxCount;
    unit lv_hitboxUnit;

    // Variable Initialization
    lv_hitboxIndex = "";
    lv_hitboxGroup = UnitGroupEmpty();

    // Implementation
    lv_velocityY = lp_verticalImpulse;
    lv_absVelocity = AbsF(lv_velocityY);
    if ((lv_velocityY == 0.0)) {
        return ;
    }
    if ((lv_velocityY > 0.0)) {
        lv_directionIndex = lib3_ge_KineticArrayDirections_Up;
    }
    else {
        lv_directionIndex = lib3_ge_KineticArrayDirections_Down;
    }
    lv_kineticOne = TruncI(lv_absVelocity);
    lv_kineticDotTen = TruncI(((lv_absVelocity * 10.0) - (lv_kineticOne * 10.0)));
    lv_kineticDotHundred = (RoundI((lv_absVelocity * 100.0)) - ((lv_kineticDotTen * 10) + (lv_kineticOne * 100)));
    if ((lv_kineticDotHundred == 10)) {
        lv_kineticDotHundred = 0;
        lv_kineticDotTen += 1;
    }
    if (((lv_kineticDotHundred >= 1) && (lv_kineticDotHundred <= 9))) {
        PlayerCreateEffectUnit(0, lib3_gv_kineticTranslate[(lv_directionIndex)][lv_kineticDotHundred], lp_unit);
        lib3_gv_totalLiveKinetics += 1;
    }
    if (((lv_kineticDotTen >= 1) && (lv_kineticDotTen <= 9))) {
        PlayerCreateEffectUnit(0, lib3_gv_kineticTranslate2[(lv_directionIndex)][lv_kineticDotTen], lp_unit);
        lib3_gv_totalLiveKinetics += 1;
    }
    if (((lv_kineticOne >= 1) && (lv_kineticOne <= 9))) {
        PlayerCreateEffectUnit(0, lib3_gv_kineticTranslate3[(lv_directionIndex)][lv_kineticOne], lp_unit);
        lib3_gv_totalLiveKinetics += 1;
    }
    lv_hitboxIndex = lib3_gf_UnitGetHitboxGroupCode(lp_unit);
    if ((DataTableValueExists(true, lv_hitboxIndex) == true)) {
        lv_hitboxGroup = DataTableGetUnitGroup(true, lv_hitboxIndex);
        lv_hitboxCount = UnitGroupCount(lv_hitboxGroup, c_unitCountAll);
        autoCD2A480B_ae = lv_hitboxCount;
        autoCD2A480B_ai = 1;
        lv_i = 1;
        for ( ; ( (autoCD2A480B_ai >= 0 && lv_i <= autoCD2A480B_ae) || (autoCD2A480B_ai <= 0 && lv_i >= autoCD2A480B_ae) ) ; lv_i += autoCD2A480B_ai ) {
            lv_hitboxUnit = UnitGroupUnit(lv_hitboxGroup, lv_i);
            if (((lv_kineticOne >= 1) && (lv_kineticOne <= 9))) {
                PlayerCreateEffectUnit(0, lib3_gv_kineticTranslate3[(lv_directionIndex)][lv_kineticOne], lv_hitboxUnit);
                lib3_gv_totalLiveKinetics += 1;
            }
            if (((lv_kineticDotTen >= 1) && (lv_kineticDotTen <= 9))) {
                PlayerCreateEffectUnit(0, lib3_gv_kineticTranslate2[(lv_directionIndex)][lv_kineticDotTen], lv_hitboxUnit);
                lib3_gv_totalLiveKinetics += 1;
            }
            if (((lv_kineticDotHundred >= 1) && (lv_kineticDotHundred <= 9))) {
                PlayerCreateEffectUnit(0, lib3_gv_kineticTranslate[(lv_directionIndex)][lv_kineticDotHundred], lv_hitboxUnit);
                lib3_gv_totalLiveKinetics += 1;
            }
        }
    }
}

void lib3_gf_TranslateUnit4 (unit lp_unit, fixed lp_horizontalImpulse) {
    int auto52C432E4_ae;
    int auto52C432E4_ai;

    // Variable Declarations
    fixed lv_velocityX;
    fixed lv_absVelocity;
    int lv_i;
    int lv_kineticDotHundred;
    int lv_kineticDotTen;
    int lv_kineticOne;
    int lv_directionIndex;
    string lv_hitboxIndex;
    unitgroup lv_hitboxGroup;
    int lv_hitboxCount;
    unit lv_hitboxUnit;

    // Variable Initialization
    lv_hitboxIndex = "";
    lv_hitboxGroup = UnitGroupEmpty();

    // Implementation
    lv_velocityX = lp_horizontalImpulse;
    lv_absVelocity = AbsF(lv_velocityX);
    if ((lv_velocityX == 0.0)) {
        return ;
    }
    if ((lv_velocityX > 0.0)) {
        lv_directionIndex = lib3_ge_KineticArrayDirections_Right;
    }
    else {
        lv_directionIndex = lib3_ge_KineticArrayDirections_Left;
    }
    lv_kineticOne = TruncI(lv_absVelocity);
    lv_kineticDotTen = TruncI(((lv_absVelocity * 10.0) - (lv_kineticOne * 10.0)));
    lv_kineticDotHundred = (RoundI((lv_absVelocity * 100.0)) - ((lv_kineticDotTen * 10) + (lv_kineticOne * 100)));
    if ((lv_kineticDotHundred == 10)) {
        lv_kineticDotHundred = 0;
        lv_kineticDotTen += 1;
    }
    if (((lv_kineticDotHundred >= 1) && (lv_kineticDotHundred <= 9))) {
        PlayerCreateEffectUnit(0, lib3_gv_kineticTranslate[(lv_directionIndex)][lv_kineticDotHundred], lp_unit);
        lib3_gv_totalLiveKinetics += 1;
    }
    if (((lv_kineticDotTen >= 1) && (lv_kineticDotTen <= 9))) {
        PlayerCreateEffectUnit(0, lib3_gv_kineticTranslate2[(lv_directionIndex)][lv_kineticDotTen], lp_unit);
        lib3_gv_totalLiveKinetics += 1;
    }
    if (((lv_kineticOne >= 1) && (lv_kineticOne <= 9))) {
        PlayerCreateEffectUnit(0, lib3_gv_kineticTranslate3[(lv_directionIndex)][lv_kineticOne], lp_unit);
        lib3_gv_totalLiveKinetics += 1;
    }
    lv_hitboxIndex = lib3_gf_UnitGetHitboxGroupCode(lp_unit);
    if ((DataTableValueExists(true, lv_hitboxIndex) == true)) {
        lv_hitboxGroup = DataTableGetUnitGroup(true, lv_hitboxIndex);
        lv_hitboxCount = UnitGroupCount(lv_hitboxGroup, c_unitCountAll);
        auto52C432E4_ae = lv_hitboxCount;
        auto52C432E4_ai = 1;
        lv_i = 1;
        for ( ; ( (auto52C432E4_ai >= 0 && lv_i <= auto52C432E4_ae) || (auto52C432E4_ai <= 0 && lv_i >= auto52C432E4_ae) ) ; lv_i += auto52C432E4_ai ) {
            lv_hitboxUnit = UnitGroupUnit(lv_hitboxGroup, lv_i);
            if (((lv_kineticOne >= 1) && (lv_kineticOne <= 9))) {
                PlayerCreateEffectUnit(0, lib3_gv_kineticTranslate3[(lv_directionIndex)][lv_kineticOne], lv_hitboxUnit);
                lib3_gv_totalLiveKinetics += 1;
            }
            if (((lv_kineticDotTen >= 1) && (lv_kineticDotTen <= 9))) {
                PlayerCreateEffectUnit(0, lib3_gv_kineticTranslate2[(lv_directionIndex)][lv_kineticDotTen], lv_hitboxUnit);
                lib3_gv_totalLiveKinetics += 1;
            }
            if (((lv_kineticDotHundred >= 1) && (lv_kineticDotHundred <= 9))) {
                PlayerCreateEffectUnit(0, lib3_gv_kineticTranslate[(lv_directionIndex)][lv_kineticDotHundred], lv_hitboxUnit);
                lib3_gv_totalLiveKinetics += 1;
            }
        }
    }
}

point lib3_gf_UnitGetCollisionTestPoint2 (unit lp_unit, int lp_hitTestPointType) {
    // Variable Declarations
    point lv_testPoint;
    point lv_unitOrigin;
    fixed lv_widthOffset;
    fixed lv_heightOffset;

    // Variable Initialization

    // Implementation
    lv_unitOrigin = UnitGetPosition(lp_unit);
    if ((lp_hitTestPointType == lib3_ge_UnitCollisionTestPoint_Origin)) {
        lv_testPoint = lv_unitOrigin;
    }
    else if ((lp_hitTestPointType == lib3_ge_UnitCollisionTestPoint_Top)) {
        lv_heightOffset = lib1_gf_PresetCustomValue(lp_unit, lib3_ge_UnitCustomValue_Height);
        lv_testPoint = Point(PointGetX(lv_unitOrigin), (PointGetY(lv_unitOrigin) + lv_heightOffset));
    }
    else if ((lp_hitTestPointType == lib3_ge_UnitCollisionTestPoint_LeftHigh)) {
        lv_widthOffset = lib1_gf_PresetCustomValue(lp_unit, lib3_ge_UnitCustomValue_HalfWidth);
        lv_heightOffset = lib1_gf_PresetCustomValue(lp_unit, lib3_ge_UnitCustomValue_HighHeight);
        lv_testPoint = Point((PointGetX(lv_unitOrigin) - lv_widthOffset), (PointGetY(lv_unitOrigin) + lv_heightOffset));
    }
    else if ((lp_hitTestPointType == lib3_ge_UnitCollisionTestPoint_LeftMid)) {
        lv_widthOffset = lib1_gf_PresetCustomValue(lp_unit, lib3_ge_UnitCustomValue_HalfWidth);
        lv_heightOffset = lib1_gf_PresetCustomValue(lp_unit, lib3_ge_UnitCustomValue_HalfHeight);
        lv_testPoint = Point((PointGetX(lv_unitOrigin) - lv_widthOffset), (PointGetY(lv_unitOrigin) + lv_heightOffset));
    }
    else if ((lp_hitTestPointType == lib3_ge_UnitCollisionTestPoint_LeftLow)) {
        lv_widthOffset = lib1_gf_PresetCustomValue(lp_unit, lib3_ge_UnitCustomValue_HalfWidth);
        lv_heightOffset = lib1_gf_PresetCustomValue(lp_unit, lib3_ge_UnitCustomValue_LowHeight);
        lv_testPoint = Point((PointGetX(lv_unitOrigin) - lv_widthOffset), (PointGetY(lv_unitOrigin) + lv_heightOffset));
    }
    else if ((lp_hitTestPointType == lib3_ge_UnitCollisionTestPoint_RightHigh)) {
        lv_widthOffset = lib1_gf_PresetCustomValue(lp_unit, lib3_ge_UnitCustomValue_HalfWidth);
        lv_heightOffset = lib1_gf_PresetCustomValue(lp_unit, lib3_ge_UnitCustomValue_HighHeight);
        lv_testPoint = Point((PointGetX(lv_unitOrigin) + lv_widthOffset), (PointGetY(lv_unitOrigin) + lv_heightOffset));
    }
    else if ((lp_hitTestPointType == lib3_ge_UnitCollisionTestPoint_RightMid)) {
        lv_widthOffset = lib1_gf_PresetCustomValue(lp_unit, lib3_ge_UnitCustomValue_HalfWidth);
        lv_heightOffset = lib1_gf_PresetCustomValue(lp_unit, lib3_ge_UnitCustomValue_HalfHeight);
        lv_testPoint = Point((PointGetX(lv_unitOrigin) + lv_widthOffset), (PointGetY(lv_unitOrigin) + lv_heightOffset));
    }
    else if ((lp_hitTestPointType == lib3_ge_UnitCollisionTestPoint_RightLow)) {
        lv_widthOffset = lib1_gf_PresetCustomValue(lp_unit, lib3_ge_UnitCustomValue_HalfWidth);
        lv_heightOffset = lib1_gf_PresetCustomValue(lp_unit, lib3_ge_UnitCustomValue_LowHeight);
        lv_testPoint = Point((PointGetX(lv_unitOrigin) + lv_widthOffset), (PointGetY(lv_unitOrigin) + lv_heightOffset));
    }
    else if ((lp_hitTestPointType == lib3_ge_UnitCollisionTestPoint_Center)) {
        lv_heightOffset = lib1_gf_PresetCustomValue(lp_unit, lib3_ge_UnitCustomValue_HalfHeight);
        lv_testPoint = Point(PointGetX(lv_unitOrigin), (PointGetY(lv_unitOrigin) + lv_heightOffset));
    }
    return lv_testPoint;
}

point lib3_gf_UnitGetPresetPointNext (unit lp_unit, int lp_hitTestPointType) {
    // Variable Declarations
    point lv_testPoint;
    point lv_unitOriginNew;
    fixed lv_widthOffset;
    fixed lv_heightOffset;

    // Variable Initialization

    // Implementation
    lv_unitOriginNew = Point((PointGetX(UnitGetPosition(lp_unit)) + lib1_gf_PresetCustomValue(lp_unit, lib3_ge_UnitCustomValue_CurrentVelocityX)), (PointGetY(UnitGetPosition(lp_unit)) + lib1_gf_PresetCustomValue(lp_unit, lib3_ge_UnitCustomValue_CurrentVelocityY)));
    if ((lp_hitTestPointType == lib3_ge_UnitCollisionTestPoint_Origin)) {
        lv_testPoint = lv_unitOriginNew;
    }
    else if ((lp_hitTestPointType == lib3_ge_UnitCollisionTestPoint_Top)) {
        lv_heightOffset = lib1_gf_PresetCustomValue(lp_unit, lib3_ge_UnitCustomValue_Height);
        lv_testPoint = Point(PointGetX(lv_unitOriginNew), (PointGetY(lv_unitOriginNew) + lv_heightOffset));
    }
    else if ((lp_hitTestPointType == lib3_ge_UnitCollisionTestPoint_LeftHigh)) {
        lv_widthOffset = lib1_gf_PresetCustomValue(lp_unit, lib3_ge_UnitCustomValue_HalfWidth);
        lv_heightOffset = lib1_gf_PresetCustomValue(lp_unit, lib3_ge_UnitCustomValue_HighHeight);
        lv_testPoint = Point((PointGetX(lv_unitOriginNew) - lv_widthOffset), (PointGetY(lv_unitOriginNew) + lv_heightOffset));
    }
    else if ((lp_hitTestPointType == lib3_ge_UnitCollisionTestPoint_LeftMid)) {
        lv_widthOffset = lib1_gf_PresetCustomValue(lp_unit, lib3_ge_UnitCustomValue_HalfWidth);
        lv_heightOffset = lib1_gf_PresetCustomValue(lp_unit, lib3_ge_UnitCustomValue_HalfHeight);
        lv_testPoint = Point((PointGetX(lv_unitOriginNew) - lv_widthOffset), (PointGetY(lv_unitOriginNew) + lv_heightOffset));
    }
    else if ((lp_hitTestPointType == lib3_ge_UnitCollisionTestPoint_LeftLow)) {
        lv_widthOffset = lib1_gf_PresetCustomValue(lp_unit, lib3_ge_UnitCustomValue_HalfWidth);
        lv_heightOffset = lib1_gf_PresetCustomValue(lp_unit, lib3_ge_UnitCustomValue_LowHeight);
        lv_testPoint = Point((PointGetX(lv_unitOriginNew) - lv_widthOffset), (PointGetY(lv_unitOriginNew) + lv_heightOffset));
    }
    else if ((lp_hitTestPointType == lib3_ge_UnitCollisionTestPoint_RightHigh)) {
        lv_widthOffset = lib1_gf_PresetCustomValue(lp_unit, lib3_ge_UnitCustomValue_HalfWidth);
        lv_heightOffset = lib1_gf_PresetCustomValue(lp_unit, lib3_ge_UnitCustomValue_HighHeight);
        lv_testPoint = Point((PointGetX(lv_unitOriginNew) + lv_widthOffset), (PointGetY(lv_unitOriginNew) + lv_heightOffset));
    }
    else if ((lp_hitTestPointType == lib3_ge_UnitCollisionTestPoint_RightMid)) {
        lv_widthOffset = lib1_gf_PresetCustomValue(lp_unit, lib3_ge_UnitCustomValue_HalfWidth);
        lv_heightOffset = lib1_gf_PresetCustomValue(lp_unit, lib3_ge_UnitCustomValue_HalfHeight);
        lv_testPoint = Point((PointGetX(lv_unitOriginNew) + lv_widthOffset), (PointGetY(lv_unitOriginNew) + lv_heightOffset));
    }
    else if ((lp_hitTestPointType == lib3_ge_UnitCollisionTestPoint_RightLow)) {
        lv_widthOffset = lib1_gf_PresetCustomValue(lp_unit, lib3_ge_UnitCustomValue_HalfWidth);
        lv_heightOffset = lib1_gf_PresetCustomValue(lp_unit, lib3_ge_UnitCustomValue_LowHeight);
        lv_testPoint = Point((PointGetX(lv_unitOriginNew) + lv_widthOffset), (PointGetY(lv_unitOriginNew) + lv_heightOffset));
    }
    else if ((lp_hitTestPointType == lib3_ge_UnitCollisionTestPoint_Center)) {
        lv_heightOffset = lib1_gf_PresetCustomValue(lp_unit, lib3_ge_UnitCustomValue_HalfHeight);
        lv_testPoint = Point(PointGetX(lv_unitOriginNew), (PointGetY(lv_unitOriginNew) + lv_heightOffset));
    }
    return lv_testPoint;
}

unit lib3_gf_UnitGetParent (unit lp_unit) {
    // Variable Declarations
    unit lv_parentUnit;

    // Variable Initialization

    // Implementation
    if ((UnitHasBehavior2(lp_unit, "KineticGroupBehavior") == true)) {
        lv_parentUnit = UnitBehaviorEffectUnit(lp_unit, "KineticGroupBehavior", c_effectUnitCaster, 0);
    }
    else {
        lv_parentUnit = lp_unit;
    }
    return lv_parentUnit;
}

bool lib3_gf_HitboxIndexExists (string lp_hitboxIndex) {
    // Implementation
    return DataTableValueExists(true, lp_hitboxIndex);
}

string lib3_gf_UnitGetHitboxGroupCode (unit lp_unit) {
    // Variable Declarations
    string lv_hitboxIndex;

    // Variable Initialization
    lv_hitboxIndex = "";

    // Implementation
    lv_hitboxIndex = ("UnitHitbox" + IntToString(UnitGetTag(lp_unit)));
    return lv_hitboxIndex;
}

void lib3_gf_MoveUnitAndHitboxUnitsInstantly (unit lp_unit, point lp_point) {
    int auto1A06E405_ae;
    int auto1A06E405_ai;

    // Variable Declarations
    string lv_hitboxIndex;
    int lv_hitboxCount;
    unitgroup lv_hitboxGroup;
    unit lv_hitboxUnit;
    fixed lv_hitboxNewX;
    fixed lv_hitboxNewY;
    int lv_i;

    // Variable Initialization
    lv_hitboxIndex = "";
    lv_hitboxGroup = UnitGroupEmpty();

    // Implementation
    UnitSetPosition(lp_unit, lp_point, true);
    lv_hitboxIndex = lib3_gf_UnitGetHitboxGroupCode(lp_unit);
    if ((DataTableValueExists(true, lv_hitboxIndex) == true)) {
        lv_hitboxGroup = DataTableGetUnitGroup(true, lv_hitboxIndex);
        lv_hitboxCount = UnitGroupCount(lv_hitboxGroup, c_unitCountAll);
        auto1A06E405_ae = lv_hitboxCount;
        auto1A06E405_ai = 1;
        lv_i = 1;
        for ( ; ( (auto1A06E405_ai >= 0 && lv_i <= auto1A06E405_ae) || (auto1A06E405_ai <= 0 && lv_i >= auto1A06E405_ae) ) ; lv_i += auto1A06E405_ai ) {
            lv_hitboxUnit = UnitGroupUnit(lv_hitboxGroup, lv_i);
            lv_hitboxNewX = (PointGetX(lp_point) + lib1_gf_PresetCustomValue(lv_hitboxUnit, lib3_ge_UnitCustomValue_XOffset));
            lv_hitboxNewY = (PointGetY(lp_point) + lib1_gf_PresetCustomValue(lv_hitboxUnit, lib3_ge_UnitCustomValue_YOffset));
            UnitSetPosition(lv_hitboxUnit, Point(lv_hitboxNewX, lv_hitboxNewY), false);
        }
    }
}

void lib3_gf_RemoveKineticFromUnitAndHitboxUnits (unit lp_unit, string lp_effect) {
    int autoDB43E460_ae;
    int autoDB43E460_ai;

    // Variable Declarations
    string lv_hitboxIndex;
    unitgroup lv_hitboxGroup;
    int lv_hitboxCount;
    unit lv_hitboxUnit;
    int lv_i;

    // Variable Initialization
    lv_hitboxIndex = "";
    lv_hitboxGroup = UnitGroupEmpty();

    // Implementation
    PlayerCreateEffectUnit(0, lp_effect, lp_unit);
    lv_hitboxIndex = lib3_gf_UnitGetHitboxGroupCode(lp_unit);
    if ((DataTableValueExists(true, lv_hitboxIndex) == true)) {
        lv_hitboxGroup = DataTableGetUnitGroup(true, lv_hitboxIndex);
        lv_hitboxCount = UnitGroupCount(lv_hitboxGroup, c_unitCountAll);
        autoDB43E460_ae = lv_hitboxCount;
        autoDB43E460_ai = 1;
        lv_i = 1;
        for ( ; ( (autoDB43E460_ai >= 0 && lv_i <= autoDB43E460_ae) || (autoDB43E460_ai <= 0 && lv_i >= autoDB43E460_ae) ) ; lv_i += autoDB43E460_ai ) {
            lv_hitboxUnit = UnitGroupUnit(lv_hitboxGroup, lv_i);
            PlayerCreateEffectUnit(0, lp_effect, lv_hitboxUnit);
        }
    }
}

void lib3_gf_UnitRemoveHitboxGroup (unit lp_unit) {
    // Variable Declarations
    unitgroup lv_hitboxUnits;
    string lv_hitboxUnitCode;

    // Variable Initialization
    lv_hitboxUnits = UnitGroupEmpty();
    lv_hitboxUnitCode = "";

    // Implementation
    lv_hitboxUnitCode = lib3_gf_UnitGetHitboxGroupCode(lp_unit);
    lv_hitboxUnits = DataTableGetUnitGroup(true, lv_hitboxUnitCode);
    UnitGroupLoopBegin(lv_hitboxUnits);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        lib3_gv_totalLiveKinetics2 += 1;
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    DataTableValueRemove(true, lv_hitboxUnitCode);
}

string lib3_gf_UnitGetHitboxGroupCode2 (unit lp_attacker, unit lp_target) {
    // Implementation
    return ("Unit" + IntToString(UnitGetTag(lp_attacker)) + "AttackIndex" + IntToString(UnitGetTag(lp_target)));
}

bool lib3_gf_UnitHasAttackImmunityFrames (unit lp_targetUnit, string lp_attackIndex) {
    // Implementation
    if ((UnitGetChargeUsed(lp_targetUnit, lp_attackIndex) == 0.0)) {
        return false;
    }
    else {
        return true;
    }
}

trigger auto_lib3_gf_UnitAddAttackImmunityFrames_Trigger = null;
unit auto_lib3_gf_UnitAddAttackImmunityFrames_lp_targetUnit;
string auto_lib3_gf_UnitAddAttackImmunityFrames_lp_attackIndex;
fixed auto_lib3_gf_UnitAddAttackImmunityFrames_lp_duration;

void lib3_gf_UnitAddAttackImmunityFrames (unit lp_targetUnit, string lp_attackIndex, fixed lp_duration) {
    auto_lib3_gf_UnitAddAttackImmunityFrames_lp_targetUnit = lp_targetUnit;
    auto_lib3_gf_UnitAddAttackImmunityFrames_lp_attackIndex = lp_attackIndex;
    auto_lib3_gf_UnitAddAttackImmunityFrames_lp_duration = lp_duration;

    if (auto_lib3_gf_UnitAddAttackImmunityFrames_Trigger == null) {
        auto_lib3_gf_UnitAddAttackImmunityFrames_Trigger = TriggerCreate("auto_lib3_gf_UnitAddAttackImmunityFrames_TriggerFunc");
    }

    TriggerExecute(auto_lib3_gf_UnitAddAttackImmunityFrames_Trigger, false, false);
}

bool auto_lib3_gf_UnitAddAttackImmunityFrames_TriggerFunc (bool testConds, bool runActions) {
    unit lp_targetUnit = auto_lib3_gf_UnitAddAttackImmunityFrames_lp_targetUnit;
    string lp_attackIndex = auto_lib3_gf_UnitAddAttackImmunityFrames_lp_attackIndex;
    fixed lp_duration = auto_lib3_gf_UnitAddAttackImmunityFrames_lp_duration;

    // Implementation
    UnitAddChargeUsed(lp_targetUnit, lp_attackIndex, 1.0);
    Wait(lp_duration, c_timeGame);
    UnitAddChargeUsed(lp_targetUnit, lp_attackIndex, -1.0);
    return true;
}

fixed lib3_gf_XOfCollisionUnitLeft (unit lp_unit) {
    // Variable Declarations
    fixed lv_x;

    // Variable Initialization

    // Implementation
    lv_x = (PointGetX(UnitGetPosition(lp_unit)) - lib1_gf_PresetCustomValue(lp_unit, lib3_ge_UnitCustomValue_HalfWidth));
    return lv_x;
}

fixed lib3_gf_XOfCollisionUnitRight (unit lp_unit) {
    // Variable Declarations
    fixed lv_x;

    // Variable Initialization

    // Implementation
    lv_x = (PointGetX(UnitGetPosition(lp_unit)) + lib1_gf_PresetCustomValue(lp_unit, lib3_ge_UnitCustomValue_HalfWidth));
    return lv_x;
}

fixed lib3_gf_YOfCollisionUnitTop (unit lp_unit) {
    // Variable Declarations
    fixed lv_y;

    // Variable Initialization

    // Implementation
    lv_y = (PointGetY(UnitGetPosition(lp_unit)) + lib1_gf_PresetCustomValue(lp_unit, lib3_ge_UnitCustomValue_HalfHeight));
    return lv_y;
}

fixed lib3_gf_YOfCollisionUnitBottom (unit lp_unit) {
    // Variable Declarations
    fixed lv_y;

    // Variable Initialization

    // Implementation
    lv_y = (PointGetY(UnitGetPosition(lp_unit)) - lib1_gf_PresetCustomValue(lp_unit, lib3_ge_UnitCustomValue_HalfHeight));
    return lv_y;
}

bool lib3_gf_CollisionDirectionIsDown (point lp_targetPoint, unit lp_collisionUnit) {
    // Variable Declarations
    point lv_collisionTestPoint;
    fixed lv_collisionAngle;

    // Variable Initialization

    // Implementation
    lv_collisionTestPoint = lib3_gf_UnitGetCollisionTestPoint2(lp_collisionUnit, lib3_ge_UnitCollisionTestPoint_Origin);
    lv_collisionAngle = AngleBetweenPoints(lp_targetPoint, lv_collisionTestPoint);
    if ((lv_collisionAngle >= -135.0) && (lv_collisionAngle <= -45.0)) {
        return true;
    }
    else {
        return false;
    }
}

bool lib3_gf_CollisionDirectionIsDown2 (point lp_targetPoint, unit lp_collisionUnit) {
    // Variable Declarations
    point lv_collisionTestPoint;
    fixed lv_collisionAngle;

    // Variable Initialization

    // Implementation
    lv_collisionTestPoint = lib3_gf_UnitGetCollisionTestPoint2(lp_collisionUnit, lib3_ge_UnitCollisionTestPoint_Origin);
    lv_collisionAngle = AngleBetweenPoints(lp_targetPoint, lv_collisionTestPoint);
    if ((lv_collisionAngle >= 45.0) && (lv_collisionAngle <= 135.0)) {
        return true;
    }
    else {
        return false;
    }
}

bool lib3_gf_CollisionDirectionIsDown3 (point lp_targetPoint, unit lp_collisionUnit) {
    // Variable Declarations
    point lv_collisionTestPoint;
    fixed lv_collisionAngle;

    // Variable Initialization

    // Implementation
    lv_collisionTestPoint = lib3_gf_UnitGetCollisionTestPoint2(lp_collisionUnit, lib3_ge_UnitCollisionTestPoint_Origin);
    lv_collisionAngle = AngleBetweenPoints(lp_targetPoint, lv_collisionTestPoint);
    if ((lv_collisionAngle >= -45.0) && (lv_collisionAngle <= 45.0)) {
        return true;
    }
    else {
        return false;
    }
}

bool lib3_gf_CollisionDirectionIsDown4 (point lp_targetPoint, unit lp_collisionUnit) {
    // Variable Declarations
    point lv_collisionTestPoint;
    fixed lv_collisionAngle;

    // Variable Initialization

    // Implementation
    lv_collisionTestPoint = lib3_gf_UnitGetCollisionTestPoint2(lp_collisionUnit, lib3_ge_UnitCollisionTestPoint_Origin);
    lv_collisionAngle = AngleBetweenPoints(lp_targetPoint, lv_collisionTestPoint);
    if (((lv_collisionAngle >= 135.0) || (lv_collisionAngle <= -135.0))) {
        return true;
    }
    else {
        return false;
    }
}

void lib3_gf_CreateUnitDeathFlareAtPoint (point lp_point) {
    // Variable Declarations
    fixed lv_unitDeathFlareCameraShakeRadius;

    // Variable Initialization

    // Implementation
    lv_unitDeathFlareCameraShakeRadius = 16.0;
    libNtve_gf_CreateActorAtPoint("HeroDeathFlare", lp_point);
    SoundPlayAtPointForPlayer(SoundLink("UIOffscreenDeathFlare", -1), c_maxPlayers, PlayerGroupAll(), lp_point, 0.0, 100.0, 0.0);
    PlayerGroupLoopBegin(PlayerGroupActive());
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if ((DistanceBetweenPoints(CameraGetTarget(PlayerGroupLoopCurrent()), lp_point) <= lv_unitDeathFlareCameraShakeRadius)) {
            lib1_gf_ShakeCameraForPlayer(PlayerGroupLoopCurrent(), "Heavy");
        }
    }
    PlayerGroupLoopEnd();
}

trigger auto_lib3_gf_UnitRemoveJumpChargeAfterBuffer_Trigger = null;
unit auto_lib3_gf_UnitRemoveJumpChargeAfterBuffer_lp_unit;
fixed auto_lib3_gf_UnitRemoveJumpChargeAfterBuffer_lp_delay;

void lib3_gf_UnitRemoveJumpChargeAfterBuffer (unit lp_unit, fixed lp_delay) {
    auto_lib3_gf_UnitRemoveJumpChargeAfterBuffer_lp_unit = lp_unit;
    auto_lib3_gf_UnitRemoveJumpChargeAfterBuffer_lp_delay = lp_delay;

    if (auto_lib3_gf_UnitRemoveJumpChargeAfterBuffer_Trigger == null) {
        auto_lib3_gf_UnitRemoveJumpChargeAfterBuffer_Trigger = TriggerCreate("auto_lib3_gf_UnitRemoveJumpChargeAfterBuffer_TriggerFunc");
    }

    TriggerExecute(auto_lib3_gf_UnitRemoveJumpChargeAfterBuffer_Trigger, false, false);
}

bool auto_lib3_gf_UnitRemoveJumpChargeAfterBuffer_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_lib3_gf_UnitRemoveJumpChargeAfterBuffer_lp_unit;
    fixed lp_delay = auto_lib3_gf_UnitRemoveJumpChargeAfterBuffer_lp_delay;

    // Implementation
    Wait(lp_delay, c_timeGame);
    if ((UnitIsAlive(lp_unit) == true)) {
        if ((UnitHasBehavior2(lp_unit, "UnitStateFallingAnimation") == true) && (lib1_gf_PresetCustomValue(lp_unit, lib3_ge_UnitCustomValue_JumpChargesCurrent) == lib1_gf_PresetCustomValue(lp_unit, lib3_ge_UnitCustomValue_JumpChargesMax))) {
            lib1_gf_ModifyUnitCustomValue(lp_unit, lib3_ge_UnitCustomValue_JumpChargesCurrent, -1.0);
        }
    }
    return true;
}

void lib3_gf_UnitSet2DFacing (unit lp_unit, int lp_facing) {
    // Variable Declarations
    unitgroup lv_hitboxUnits;
    point lv_hitboxPositionReflected;

    // Variable Initialization
    lv_hitboxUnits = UnitGroupEmpty();

    // Implementation
    if ((lib1_gf_PresetCustomValue(lp_unit, lib3_ge_UnitCustomValue_Facing) != (lp_facing))) {
        lv_hitboxUnits = DataTableGetUnitGroup(true, lib3_gf_UnitGetHitboxGroupCode(lp_unit));
        lib1_gf_ModifyUnitCustomValue2(lp_unit, lib3_ge_UnitCustomValue_Facing, (lp_facing));
        if ((lp_facing == lib3_ge__2DUnitFacing_Right)) {
            libNtve_gf_SendActorMessageToUnit(lp_unit, "EventMacroRun TurnRightStartRunnable");
            UnitGroupLoopBegin(lv_hitboxUnits);
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                if ((lib1_gf_PresetCustomValue(UnitGroupLoopCurrent(), lib3_ge_UnitCustomValue_XOffset) != 0.0)) {
                    lv_hitboxPositionReflected = Point((PointGetX(UnitGetPosition(lp_unit)) + lib1_gf_PresetCustomValue(UnitGroupLoopCurrent(), lib3_ge_UnitCustomValue_XOffset)), PointGetY(UnitGetPosition(UnitGroupLoopCurrent())));
                    UnitSetPosition(UnitGroupLoopCurrent(), lv_hitboxPositionReflected, false);
                }
            }
            UnitGroupLoopEnd();
        }
        else {
            libNtve_gf_SendActorMessageToUnit(lp_unit, "EventMacroRun TurnLeftStartRunnable");
            UnitGroupLoopBegin(lv_hitboxUnits);
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                if ((lib1_gf_PresetCustomValue(UnitGroupLoopCurrent(), lib3_ge_UnitCustomValue_XOffset) != 0.0)) {
                    lv_hitboxPositionReflected = Point((PointGetX(UnitGetPosition(lp_unit)) - lib1_gf_PresetCustomValue(UnitGroupLoopCurrent(), lib3_ge_UnitCustomValue_XOffset)), PointGetY(UnitGetPosition(UnitGroupLoopCurrent())));
                    UnitSetPosition(UnitGroupLoopCurrent(), lv_hitboxPositionReflected, false);
                }
            }
            UnitGroupLoopEnd();
        }
    }
}

void lib3_gf_SeparateTargetUnitFromKnockbackUnit (unit lp_targetUnit, unit lp_collisionUnit, fixed lp_hitDirection) {
    // Variable Declarations
    point lv_seperationPoint;

    // Variable Initialization

    // Implementation
    lib3_gf_SetUnitVerticalVelocity(lp_targetUnit, 0.0);
    lib3_gf_SetUnitHorizontalVelocity(lp_targetUnit, 0.0);
    if ((lp_hitDirection == 1)) {
        lv_seperationPoint = Point(((lib3_gf_XOfCollisionUnitRight(lp_collisionUnit) + MaxF(0.0, lib3_gf_PresetCustomValue(lp_collisionUnit))) + lib1_gf_PresetCustomValue(lp_targetUnit, lib3_ge_UnitCustomValue_HalfWidth)), PointGetY(UnitGetPosition(lp_targetUnit)));
    }
    else {
        lv_seperationPoint = Point(((lib3_gf_XOfCollisionUnitLeft(lp_collisionUnit) + MinF(0.0, lib3_gf_PresetCustomValue(lp_collisionUnit))) + lib1_gf_PresetCustomValue(lp_targetUnit, lib3_ge_UnitCustomValue_HalfWidth)), PointGetY(UnitGetPosition(lp_targetUnit)));
    }
    if ((RegionContainsPoint(lib3_gv_gameCollisionRegion, lv_seperationPoint) == false)) {
        lib3_gf_MoveUnitAndHitboxUnitsInstantly(lp_targetUnit, lv_seperationPoint);
    }
    else {
        lib3_gf_AddVerticalVelocity(lp_targetUnit, (lib1_gf_PresetCustomValue(lp_targetUnit, lib3_ge_UnitCustomValue_Height) * 0.25));
    }
}

trigger auto_lib3_gf_KnockbackXOverTime_Trigger = null;
unit auto_lib3_gf_KnockbackXOverTime_lp_unit;
fixed auto_lib3_gf_KnockbackXOverTime_lp_power;
fixed auto_lib3_gf_KnockbackXOverTime_lp_duration;

void lib3_gf_KnockbackXOverTime (unit lp_unit, fixed lp_power, fixed lp_duration) {
    auto_lib3_gf_KnockbackXOverTime_lp_unit = lp_unit;
    auto_lib3_gf_KnockbackXOverTime_lp_power = lp_power;
    auto_lib3_gf_KnockbackXOverTime_lp_duration = lp_duration;

    if (auto_lib3_gf_KnockbackXOverTime_Trigger == null) {
        auto_lib3_gf_KnockbackXOverTime_Trigger = TriggerCreate("auto_lib3_gf_KnockbackXOverTime_TriggerFunc");
    }

    TriggerExecute(auto_lib3_gf_KnockbackXOverTime_Trigger, false, false);
}

bool auto_lib3_gf_KnockbackXOverTime_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_lib3_gf_KnockbackXOverTime_lp_unit;
    fixed lp_power = auto_lib3_gf_KnockbackXOverTime_lp_power;
    fixed lp_duration = auto_lib3_gf_KnockbackXOverTime_lp_duration;

    fixed auto8A54A85A_ae;
    fixed auto8A54A85A_ai;

    // Variable Declarations
    fixed lv_i;

    // Variable Initialization

    // Implementation
    auto8A54A85A_ae = lp_duration;
    auto8A54A85A_ai = 0.0625;
    lv_i = 0.0;
    for ( ; ( (auto8A54A85A_ai >= 0 && lv_i <= auto8A54A85A_ae) || (auto8A54A85A_ai <= 0 && lv_i >= auto8A54A85A_ae) ) ; lv_i += auto8A54A85A_ai ) {
        lib3_gf_AddHorizontalVelocity(lp_unit, lp_power);
        Wait(0.0625, c_timeGame);
    }
    return true;
}

trigger auto_lib3_gf_KnockbackYOverTime_Trigger = null;
unit auto_lib3_gf_KnockbackYOverTime_lp_unit;
fixed auto_lib3_gf_KnockbackYOverTime_lp_power;
fixed auto_lib3_gf_KnockbackYOverTime_lp_duration;

void lib3_gf_KnockbackYOverTime (unit lp_unit, fixed lp_power, fixed lp_duration) {
    auto_lib3_gf_KnockbackYOverTime_lp_unit = lp_unit;
    auto_lib3_gf_KnockbackYOverTime_lp_power = lp_power;
    auto_lib3_gf_KnockbackYOverTime_lp_duration = lp_duration;

    if (auto_lib3_gf_KnockbackYOverTime_Trigger == null) {
        auto_lib3_gf_KnockbackYOverTime_Trigger = TriggerCreate("auto_lib3_gf_KnockbackYOverTime_TriggerFunc");
    }

    TriggerExecute(auto_lib3_gf_KnockbackYOverTime_Trigger, false, false);
}

bool auto_lib3_gf_KnockbackYOverTime_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_lib3_gf_KnockbackYOverTime_lp_unit;
    fixed lp_power = auto_lib3_gf_KnockbackYOverTime_lp_power;
    fixed lp_duration = auto_lib3_gf_KnockbackYOverTime_lp_duration;

    fixed auto60DF66D6_ae;
    fixed auto60DF66D6_ai;

    // Variable Declarations
    fixed lv_i;

    // Variable Initialization

    // Implementation
    auto60DF66D6_ae = lp_duration;
    auto60DF66D6_ai = 0.0625;
    lv_i = 0.0;
    for ( ; ( (auto60DF66D6_ai >= 0 && lv_i <= auto60DF66D6_ae) || (auto60DF66D6_ai <= 0 && lv_i >= auto60DF66D6_ae) ) ; lv_i += auto60DF66D6_ai ) {
        lib3_gf_AddVerticalVelocity(lp_unit, lp_power);
        Wait(0.0625, c_timeGame);
    }
    return true;
}

void lib3_gf_HeroSetFacingFromInput (unit lp_targetUnit) {
    // Variable Declarations
    int lv_p;

    // Variable Initialization

    // Implementation
    lv_p = UnitGetOwner(lp_targetUnit);
    if ((UnitIsAlive(lp_targetUnit) == false)) {
        return ;
    }
    if ((lib3_gv_player[lv_p].lv_input_KeyD_isPressed == true) && (lib3_gv_player[lv_p].lv_input_KeyA_isPressed == true)) {
        return ;
    }
    else if ((lib3_gv_player[lv_p].lv_input_KeyD_isPressed == true)) {
        lib3_gf_UnitSet2DFacing(lp_targetUnit, lib3_ge__2DUnitFacing_Right);
        if ((lib1_gf_PresetCustomValue(lp_targetUnit, lib3_ge_UnitCustomValue_GroundedState) == IntToFixed(BoolToInt(true)))) {
            libNtve_gf_SendActorMessageToUnit(lp_targetUnit, "Create HeroSuddenMovementRight");
        }
    }
    else if ((lib3_gv_player[lv_p].lv_input_KeyA_isPressed == true)) {
        lib3_gf_UnitSet2DFacing(lp_targetUnit, lib3_ge__2DUnitFacing_Left);
        if ((lib1_gf_PresetCustomValue(lp_targetUnit, lib3_ge_UnitCustomValue_GroundedState) == IntToFixed(BoolToInt(true)))) {
            libNtve_gf_SendActorMessageToUnit(lp_targetUnit, "Create HeroSuddenMovementLeft");
        }
    }
}

void lib3_gf_HeroRespawnForPlayer (point lp_point, int lp_p) {
    // Variable Declarations
    unit lv_oldHero;

    // Variable Initialization

    // Implementation
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Hero", c_unitCreateIgnorePlacement, lp_p, lp_point);
    lib3_gv_player[lp_p].lv_hero = UnitLastCreated();
    libNtve_gf_SetDialogItemUnit(lib3_gv_uI.lv_heroStatus, lib3_gv_player[lp_p].lv_hero, PlayerGroupSingle(lp_p));
}

void lib3_gf_PlayerAddPoints (int lp_p, int lp_addedPoints) {
    // Variable Declarations
    int lv_maximumDisplayPoints;
    unit lv_playerHero;

    // Variable Initialization

    // Implementation
    lib3_gv_player[lp_p].lv_points = (lib3_gv_player[lp_p].lv_points + lp_addedPoints);
    lv_maximumDisplayPoints = 99999;
    lv_playerHero = lib3_gv_player[lp_p].lv_hero;
    if ((lib3_gv_player[lp_p].lv_points > lv_maximumDisplayPoints)) {
        lib3_gv_player[lp_p].lv_points = ModI(lib3_gv_player[lp_p].lv_points, 100000);
    }
    libNtve_gf_SetDialogItemText(lib3_gv_uI.lv_pointsCollected, lib3_gf_FormatPoints(lib3_gv_player[lp_p].lv_points), PlayerGroupSingle(lp_p));
}

text lib3_gf_FormatPoints (int lp_points) {
    // Variable Declarations
    text lv_formattedPoints;
    text lv_paddingDigits;

    // Variable Initialization

    // Implementation
    if ((lp_points < 10)) {
        lv_paddingDigits = StringExternal("Param/Value/lib_3_4B4245E6");
    }
    else if ((lp_points < 100)) {
        lv_paddingDigits = StringExternal("Param/Value/lib_3_E2AF5DAA");
    }
    else if ((lp_points < 1000)) {
        lv_paddingDigits = StringExternal("Param/Value/lib_3_D24CF20C");
    }
    else if ((lp_points < 10000)) {
        lv_paddingDigits = StringExternal("Param/Value/lib_3_39B10B37");
    }
    lv_formattedPoints = (StringExternal("Param/Value/lib_3_BC41C7B0") + lv_paddingDigits + IntToText(lp_points) + StringExternal("Param/Value/lib_3_DA02A9F8"));
    return lv_formattedPoints;
}

void lib3_gf_Initialize2DGameLib () {
    // Implementation
    lib3_gf_InitializeGameUI();
    lib3_gf_InitializeGameData();
    lib3_gf_InitializePlayerSettings();
    lib3_gf_InitializeEnvironment();
    lib3_gf_InitializeDebugSettings();
    TriggerEnable(lib3_gt_EachGameTick, true);
}

void lib3_gf_InitializeGameUI () {
    // Implementation
    DialogControlHookupStandard(c_triggerControlTypeUnitStatus, "UIContainer/ConsoleUIContainer/2DGameUI/PlayerHUD/HeroStatus");
    lib3_gv_uI.lv_heroStatus = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeLabel, "UIContainer/ConsoleUIContainer/2DGameUI/PlayerHUD/CoinTotal");
    lib3_gv_uI.lv_coinsCollected = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeLabel, "UIContainer/ConsoleUIContainer/2DGameUI/PlayerHUD/PointTotal");
    lib3_gv_uI.lv_pointsCollected = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(lib3_gv_uI.lv_coinsCollected, StringExternal("Param/Value/lib_3_C063E471"), PlayerGroupAll());
}

void lib3_gf_InitializeGameData () {
    // Implementation
    lib3_gf_InitializeKineticArray();
    lib3_gf_InitializeGravity();
}

void lib3_gf_InitializeEnvironment () {
    // Implementation
    lib3_gf_InitializeGroundRegion();
    lib3_gf_InitializeGravity();
}

void lib3_gf_InitializePlayerSettings () {
    int autoD12531C5_ae;
    int autoD12531C5_ai;

    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Implementation
    lib1_gf_HideAllUIFramesForPlayers(PlayerGroupAll());
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeTextTag, true);
    UISetDragSelectEnabled(PlayerGroupAll(), false);
    PingSetPlayerPingsShown(PlayerGroupAll(), false);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryAlert, true);
    CameraSetData(PlayerGroupAll(), "BlizzardAllStars");
    autoD12531C5_ae = lib3_gv_game.lv_maxPlayers;
    autoD12531C5_ai = 1;
    lv_i = 1;
    for ( ; ( (autoD12531C5_ai >= 0 && lv_i <= autoD12531C5_ae) || (autoD12531C5_ai <= 0 && lv_i >= autoD12531C5_ae) ) ; lv_i += autoD12531C5_ai ) {
        PlayerOptionOverride(lv_i, "camerafollow", "0");
        CameraLockInput(lv_i, true);
        CameraApplyInfo(lv_i, CameraInfoFromId(3), 0.0, -1, 10.0, true);
        VisRevealArea(lv_i, RegionEntireMap(), 0.0, false);
        lib3_gv_player[lv_i].lv_index = lv_i;
    }
}

void lib3_gf_InitializeDebugSettings () {
    // Implementation
    lib1_gf_HookupSupportPanel();
    DialogControlSetVisible(lib1_gv_supportPanel.lv_main, PlayerGroupAll(), false);
}

void lib3_gf_InitializeGravity () {
    fixed auto9EBFF29D_ae;
    fixed auto9EBFF29D_ai;
    fixed autoCDAEA6F0_ae;
    fixed autoCDAEA6F0_ai;

    // Variable Declarations
    fixed lv_x;
    fixed lv_y;

    // Variable Initialization

    // Implementation
    auto9EBFF29D_ae = libNtve_gf_WidthOfRegion(RegionEntireMap());
    auto9EBFF29D_ai = 5.0;
    lv_x = 5.0;
    for ( ; ( (auto9EBFF29D_ai >= 0 && lv_x <= auto9EBFF29D_ae) || (auto9EBFF29D_ai <= 0 && lv_x >= auto9EBFF29D_ae) ) ; lv_x += auto9EBFF29D_ai ) {
        autoCDAEA6F0_ae = libNtve_gf_HeightOfRegion(RegionEntireMap());
        autoCDAEA6F0_ai = 5.0;
        lv_y = 5.0;
        for ( ; ( (autoCDAEA6F0_ai >= 0 && lv_y <= autoCDAEA6F0_ae) || (autoCDAEA6F0_ai <= 0 && lv_y >= autoCDAEA6F0_ae) ) ; lv_y += autoCDAEA6F0_ai ) {
            libNtve_gf_CreateActorAtPoint("Game2DGravity", Point(lv_x, lv_y));
        }
    }
}

void lib3_gf_InitializeGroundRegion () {
    int auto30746BC1_ae;
    int auto30746BC1_ai;

    // Variable Declarations
    int lv_collisionIndex;
    unitgroup lv_groundRegionUnits;
    string lv_staticCollisionData;
    string lv_staticCollisionInstance;
    int lv_staticCollisionInstanceCount;
    string lv_staticCollisionUnitType;
    int lv_i;

    // Variable Initialization
    lv_groundRegionUnits = UnitGroupEmpty();

    // Implementation
    lib3_gv_gameCollisionRegion = RegionCircle(Point(0.0, 0.0), 0.1);
    lib3_gv_gameCollisionRegionOneWay = RegionCircle(Point(0.0, 0.0), 0.1);
    lv_staticCollisionData = "StaticCollisionUnits";
    lv_staticCollisionInstanceCount = UserDataInstanceCount(lv_staticCollisionData);
    auto30746BC1_ae = lv_staticCollisionInstanceCount;
    auto30746BC1_ai = 1;
    lv_i = 1;
    for ( ; ( (auto30746BC1_ai >= 0 && lv_i <= auto30746BC1_ae) || (auto30746BC1_ai <= 0 && lv_i >= auto30746BC1_ae) ) ; lv_i += auto30746BC1_ai ) {
        lv_staticCollisionInstance = UserDataInstance(lv_staticCollisionData, lv_i);
        lv_staticCollisionUnitType = UserDataGetUnit(lv_staticCollisionData, lv_staticCollisionInstance, "Unit", 1);
        UnitGroupAddUnitGroup(lv_groundRegionUnits, UnitGroup(lv_staticCollisionUnitType, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        lib3_gf_SetCollisionVariablesFromInstance("StaticCollisionUnits", lv_staticCollisionInstance);
        UnitGroupLoopBegin(lv_groundRegionUnits);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitGroupAdd(lib3_gv_staticCollisionUnits, UnitGroupLoopCurrent());
            lib1_gf_ModifyUnitCustomValue2(UnitGroupLoopCurrent(), lib3_ge_UnitCustomValue_Height, UserDataGetFixed(lv_staticCollisionData, lv_staticCollisionInstance, "Height", 1));
            lib1_gf_ModifyUnitCustomValue2(UnitGroupLoopCurrent(), lib3_ge_UnitCustomValue_Width, UserDataGetFixed(lv_staticCollisionData, lv_staticCollisionInstance, "Width", 1));
            lib1_gf_ModifyUnitCustomValue2(UnitGroupLoopCurrent(), lib3_ge_UnitCustomValue_HalfWidth, (lib1_gf_PresetCustomValue(UnitGroupLoopCurrent(), lib3_ge_UnitCustomValue_Width) * 0.5));
            lib1_gf_ModifyUnitCustomValue2(UnitGroupLoopCurrent(), lib3_ge_UnitCustomValue_HalfHeight, (lib1_gf_PresetCustomValue(UnitGroupLoopCurrent(), lib3_ge_UnitCustomValue_Height) * 0.5));
            lib3_gv_staticCollisionArrayCount += 1;
            lv_collisionIndex = lib3_gv_staticCollisionArrayCount;
            lib3_gv_staticCollision[lv_collisionIndex].lv_unit = UnitGroupLoopCurrent();
            lib3_gv_staticCollision[lv_collisionIndex].lv_index = lv_collisionIndex;
            lib3_gv_staticCollision[lv_collisionIndex].lv_region = RegionRect(lib3_gf_XOfCollisionUnitLeft(UnitGroupLoopCurrent()), lib3_gf_YOfCollisionUnitBottom(UnitGroupLoopCurrent()), lib3_gf_XOfCollisionUnitRight(UnitGroupLoopCurrent()), lib3_gf_YOfCollisionUnitTop(UnitGroupLoopCurrent()));
            lib1_gf_ModifyUnitCustomValue2(UnitGroupLoopCurrent(), lib3_ge_UnitCustomValue_CollisionIndex, IntToFixed(lv_collisionIndex));
            if ((UserDataGetInt(lv_staticCollisionData, lv_staticCollisionInstance, "One Way State", 1) == 0)) {
                RegionAddRegion(lib3_gv_gameCollisionRegion, lib3_gv_staticCollision[lv_collisionIndex].lv_region);
            }
            else {
                lib3_gv_staticCollision[lv_collisionIndex].lv_oneWayState = true;
                RegionAddRegion(lib3_gv_gameCollisionRegionOneWay, lib3_gv_staticCollision[lv_collisionIndex].lv_region);
            }
            UnitGroupRemove(lv_groundRegionUnits, UnitGroupLoopCurrent());
        }
        UnitGroupLoopEnd();
    }
    lib3_gf_CalculateCollisionVariables();
}

void lib3_gf_SetCollisionVariablesFromInstance (string lp_staticCollisionData, string lp_staticCollisionInstance) {
    // Variable Declarations
    fixed lv_collisionUnitRadius;
    fixed lv_collisionWidth;
    fixed lv_collisionHeight;

    // Variable Initialization

    // Implementation
    lv_collisionUnitRadius = SquareRoot((Pow((UserDataGetFixed(lp_staticCollisionData, lp_staticCollisionInstance, "Width", 1) / 2.0), 2.0) + Pow((UserDataGetFixed(lp_staticCollisionData, lp_staticCollisionInstance, "Height", 1) / 2.0), 2.0)));
    if ((lv_collisionUnitRadius > lib3_gv_maximumCollisionRadius)) {
        lib3_gv_maximumCollisionRadius = lv_collisionUnitRadius;
    }
    if ((lib3_gv_minimumCollisionLength == 0.0)) {
        lib3_gv_minimumCollisionLength = UserDataGetFixed(lp_staticCollisionData, lp_staticCollisionInstance, "Height", 1);
    }
    if ((UserDataGetInt(lp_staticCollisionData, lp_staticCollisionInstance, "One Way State", 1) == 0)) {
        lv_collisionWidth = UserDataGetFixed(lp_staticCollisionData, lp_staticCollisionInstance, "Width", 1);
        lv_collisionHeight = UserDataGetFixed(lp_staticCollisionData, lp_staticCollisionInstance, "Height", 1);
        if ((lv_collisionWidth < lib3_gv_minimumCollisionLength)) {
            lib3_gv_minimumCollisionLength = lv_collisionWidth;
        }
        if ((lv_collisionHeight < lib3_gv_minimumCollisionLength)) {
            lib3_gv_minimumCollisionLength = lv_collisionHeight;
        }
    }
}

void lib3_gf_CalculateCollisionVariables () {
    // Implementation
    lib3_gv_minimumHorizontalTest = (lib3_gv_minimumCollisionLength / (lib3_gv_speculativeContactStep3 - lib3_gv_speculativeContactStep2));
    lib3_gv_maximumHorizontalTest = (lib3_gv_minimumHorizontalTest * 2.0);
}

void lib3_gf_InitializeKineticArray () {
    int init_i;

    int auto588BCA0D_ae;
    int auto588BCA0D_ai;
    int auto3422B699_ae;
    int auto3422B699_ai;

    // Variable Declarations
    int lv_i;
    int lv_directionIndex;
    string[5] lv_directionString;

    // Variable Initialization
    for (init_i = 0; init_i <= 4; init_i += 1) {
        lv_directionString[init_i] = "";
    }

    // Implementation
    lv_directionString[lib3_ge_KineticArrayDirections_Up] = "Up";
    lv_directionString[lib3_ge_KineticArrayDirections_Down] = "Down";
    lv_directionString[lib3_ge_KineticArrayDirections_Left] = "Left";
    lv_directionString[lib3_ge_KineticArrayDirections_Right] = "Right";
    auto588BCA0D_ae = 3;
    auto588BCA0D_ai = 1;
    lv_directionIndex = 0;
    for ( ; ( (auto588BCA0D_ai >= 0 && lv_directionIndex <= auto588BCA0D_ae) || (auto588BCA0D_ai <= 0 && lv_directionIndex >= auto588BCA0D_ae) ) ; lv_directionIndex += auto588BCA0D_ai ) {
        auto3422B699_ae = 9;
        auto3422B699_ai = 1;
        lv_i = 1;
        for ( ; ( (auto3422B699_ai >= 0 && lv_i <= auto3422B699_ae) || (auto3422B699_ai <= 0 && lv_i >= auto3422B699_ae) ) ; lv_i += auto3422B699_ai ) {
            lib3_gv_kineticTranslate[lv_directionIndex][lv_i] = (("VelocityApply" + lv_directionString[lv_directionIndex] + "Dot0" + IntToString(lv_i)));
            lib3_gv_kineticTranslate2[lv_directionIndex][lv_i] = (("VelocityApply" + lv_directionString[lv_directionIndex] + "Dot" + IntToString(lv_i) + "0"));
            lib3_gv_kineticTranslate3[lv_directionIndex][lv_i] = (("VelocityApply" + lv_directionString[lv_directionIndex] + "0" + IntToString(lv_i)));
            lib3_gv_kineticTranslate6[lv_directionIndex][lv_i] = (("VelocityRemove" + lv_directionString[lv_directionIndex] + "Dot0" + IntToString(lv_i)));
            lib3_gv_kineticTranslate5[lv_directionIndex][lv_i] = (("VelocityRemove" + lv_directionString[lv_directionIndex] + "Dot" + IntToString(lv_i) + "0"));
            lib3_gv_kineticTranslate4[lv_directionIndex][lv_i] = (("VelocityRemove" + lv_directionString[lv_directionIndex] + "0" + IntToString(lv_i)));
            if ((CatalogEntryIsValid(c_gameCatalogEffect, lib3_gv_kineticTranslate[lv_directionIndex][lv_i]) == false)) {
                TriggerDebugOutput(1, (StringExternal("Param/Value/lib_3_BF6EE61D") + StringToText((lib3_gv_kineticTranslate[lv_directionIndex][lv_i])) + StringExternal("Param/Value/lib_3_E07882E8")), true);
            }
            if ((CatalogEntryIsValid(c_gameCatalogEffect, lib3_gv_kineticTranslate2[lv_directionIndex][lv_i]) == false)) {
                TriggerDebugOutput(1, (StringExternal("Param/Value/lib_3_522179D7") + StringToText((lib3_gv_kineticTranslate2[lv_directionIndex][lv_i])) + StringExternal("Param/Value/lib_3_05803899")), true);
            }
            if ((CatalogEntryIsValid(c_gameCatalogEffect, lib3_gv_kineticTranslate3[lv_directionIndex][lv_i]) == false)) {
                TriggerDebugOutput(1, (StringExternal("Param/Value/lib_3_B743AA66") + StringToText((lib3_gv_kineticTranslate3[lv_directionIndex][lv_i])) + StringExternal("Param/Value/lib_3_9C78F05A")), true);
            }
            if ((CatalogEntryIsValid(c_gameCatalogEffect, lib3_gv_kineticTranslate6[lv_directionIndex][lv_i]) == false)) {
                TriggerDebugOutput(1, (StringExternal("Param/Value/lib_3_76FEF597") + StringToText((lib3_gv_kineticTranslate6[lv_directionIndex][lv_i])) + StringExternal("Param/Value/lib_3_4AA5B348")), true);
            }
            if ((CatalogEntryIsValid(c_gameCatalogEffect, lib3_gv_kineticTranslate5[lv_directionIndex][lv_i]) == false)) {
                TriggerDebugOutput(1, (StringExternal("Param/Value/lib_3_E2ED68D4") + StringToText((lib3_gv_kineticTranslate5[lv_directionIndex][lv_i])) + StringExternal("Param/Value/lib_3_8B7C251C")), true);
            }
            if ((CatalogEntryIsValid(c_gameCatalogEffect, lib3_gv_kineticTranslate4[lv_directionIndex][lv_i]) == false)) {
                TriggerDebugOutput(1, (StringExternal("Param/Value/lib_3_5F62DB57") + StringToText((lib3_gv_kineticTranslate4[lv_directionIndex][lv_i])) + StringExternal("Param/Value/lib_3_F17CA603")), true);
            }
        }
    }
}

void lib3_gf_PlayerResolveInput (int lp_p) {
    // Variable Declarations
    unit lv_targetUnit;
    fixed lv_accelerationMultiplier;
    fixed lv_jumpLimitFactor;
    fixed lv_platformDropDisplacement;

    // Variable Initialization

    // Implementation
    lv_targetUnit = lib3_gv_player[lp_p].lv_hero;
    if ((TimerGetRemaining(lib3_gv_player[lp_p].lv_controlLoss) > 0.0)) {
        return ;
    }
    if ((UnitIsAlive(lv_targetUnit) == false)) {
        return ;
    }
    if ((lib3_gv_player[lp_p].lv_input_KeyA_isPressed == true) && (lib3_gv_player[lp_p].lv_input_KeyD_isPressed == false)) {
        UnitBehaviorAdd(lv_targetUnit, "UnitStateWalkingAnimation", lv_targetUnit, 1);
        lv_accelerationMultiplier = -1.0;
        if ((lib3_gf_PresetCustomValue(lv_targetUnit) > 0.0)) {
            lv_accelerationMultiplier = (lv_accelerationMultiplier * 1.5);
        }
        if ((lib1_gf_PresetCustomValue(lv_targetUnit, lib3_ge_UnitCustomValue_GroundedState) == BoolToInt(true))) {
            lib3_gf_AddHorizontalVelocity(lv_targetUnit, (lv_accelerationMultiplier * lib1_gf_PresetCustomValue(lv_targetUnit, lib3_ge_UnitCustomValue_GroundSpeed)));
        }
        else {
            lib3_gf_AddHorizontalVelocity(lv_targetUnit, (lv_accelerationMultiplier * lib1_gf_PresetCustomValue(lv_targetUnit, lib3_ge_UnitCustomValue_AirSpeed)));
        }
    }
    if ((lib3_gv_player[lp_p].lv_input_KeyD_isPressed == true) && (lib3_gv_player[lp_p].lv_input_KeyA_isPressed == false)) {
        UnitBehaviorAdd(lv_targetUnit, "UnitStateWalkingAnimation", lv_targetUnit, 1);
        lv_accelerationMultiplier = 1.0;
        if ((lib3_gf_PresetCustomValue(lv_targetUnit) < 0.0)) {
            lv_accelerationMultiplier = (lv_accelerationMultiplier * 1.5);
        }
        if ((lib1_gf_PresetCustomValue(lv_targetUnit, lib3_ge_UnitCustomValue_GroundedState) == BoolToInt(true))) {
            lib3_gf_AddHorizontalVelocity(lv_targetUnit, (lv_accelerationMultiplier * lib1_gf_PresetCustomValue(lv_targetUnit, lib3_ge_UnitCustomValue_GroundSpeed)));
        }
        else {
            lib3_gf_AddHorizontalVelocity(lv_targetUnit, (lv_accelerationMultiplier * lib1_gf_PresetCustomValue(lv_targetUnit, lib3_ge_UnitCustomValue_AirSpeed)));
        }
    }
    if ((lib3_gv_player[lp_p].lv_input_KeyW_isHeld == false) && (lib3_gv_player[lp_p].lv_input_KeyW_isPressed == true)) {
        lib3_gv_player[lp_p].lv_input_KeyW_isHeld = true;
        if ((lib1_gf_PresetCustomValue(lv_targetUnit, lib3_ge_UnitCustomValue_JumpChargesCurrent) > 0.0)) {
            lib3_gv_player[lp_p].lv_input_Jump_isLimited = false;
            lib1_gf_ModifyUnitCustomValue2(lv_targetUnit, lib3_ge_UnitCustomValue_GroundedState, IntToFixed(BoolToInt(false)));
            UnitBehaviorRemove(lv_targetUnit, "UnitStateJumpingAnimation", 1);
            UnitBehaviorRemove(lv_targetUnit, "UnitStateFallingAnimation", 1);
            UnitBehaviorAdd(lv_targetUnit, "UnitStateJumpingAnimation", lv_targetUnit, 1);
            if ((lib1_gf_PresetCustomValue(lv_targetUnit, lib3_ge_UnitCustomValue_JumpChargesCurrent) == lib1_gf_PresetCustomValue(lv_targetUnit, lib3_ge_UnitCustomValue_JumpChargesMax))) {
                libNtve_gf_SendActorMessageToUnit(lv_targetUnit, "Create HeroJumpLaunch");
                lib3_gf_AddVerticalVelocity(lv_targetUnit, lib1_gf_PresetCustomValue(lv_targetUnit, lib3_ge_UnitCustomValue_JumpForce));
            }
            else {
                libNtve_gf_SendActorMessageToUnit(lv_targetUnit, "Create HeroJumpImpact");
                lib3_gf_SetUnitVerticalVelocity(lv_targetUnit, 0.0);
                lib3_gf_AddVerticalVelocity(lv_targetUnit, lib1_gf_PresetCustomValue(lv_targetUnit, lib3_ge_UnitCustomValue_JumpForceSecondary));
            }
            lib1_gf_ModifyUnitCustomValue(lv_targetUnit, lib3_ge_UnitCustomValue_JumpChargesCurrent, -1.0);
        }
    }
    if ((lib3_gv_player[lp_p].lv_input_KeyW_isHeld == true) && (lib3_gv_player[lp_p].lv_input_KeyW_isPressed == false)) {
        lib3_gv_player[lp_p].lv_input_KeyW_isHeld = false;
        if ((lib3_gv_player[lp_p].lv_input_Jump_isLimited == false)) {
            lib3_gv_player[lp_p].lv_input_Jump_isLimited = true;
            lv_jumpLimitFactor = 0.6;
            if ((lib1_gf_PresetCustomValue(lv_targetUnit, lib3_ge_UnitCustomValue_JumpChargesCurrent) == (lib1_gf_PresetCustomValue(lv_targetUnit, lib3_ge_UnitCustomValue_JumpChargesMax) - 1.0)) && (lib3_gf_PresetCustomValue2(lv_targetUnit) > (lib1_gf_PresetCustomValue(lv_targetUnit, lib3_ge_UnitCustomValue_JumpForce) * lv_jumpLimitFactor)) && (lib1_gf_PresetCustomValue(lv_targetUnit, lib3_ge_UnitCustomValue_GroundedState) == BoolToInt(false)) && (UnitHasBehavior2(lv_targetUnit, "UnitStateJumpingAnimation") == true)) {
                lib3_gf_AddVerticalVelocity(lv_targetUnit, (-1.0 * (lib1_gf_PresetCustomValue(lv_targetUnit, lib3_ge_UnitCustomValue_JumpForce) * (1.0 - lv_jumpLimitFactor))));
            }
            else if ((lib3_gf_PresetCustomValue2(lv_targetUnit) > (lib1_gf_PresetCustomValue(lv_targetUnit, lib3_ge_UnitCustomValue_JumpForceSecondary) * lv_jumpLimitFactor)) && (lib1_gf_PresetCustomValue(lv_targetUnit, lib3_ge_UnitCustomValue_GroundedState) == BoolToInt(false)) && (UnitHasBehavior2(lv_targetUnit, "UnitStateJumpingAnimation") == true)) {
                lib3_gf_AddVerticalVelocity(lv_targetUnit, (-1.0 * (lib1_gf_PresetCustomValue(lv_targetUnit, lib3_ge_UnitCustomValue_JumpForceSecondary) * (1.0 - lv_jumpLimitFactor))));
            }
        }
    }
    if (((lib3_gv_player[lp_p].lv_input_KeyS_isHeld == true) || (lib3_gv_player[lp_p].lv_input_KeyS_isPressed == true)) && (lib1_gf_PresetCustomValue(lv_targetUnit, lib3_ge_UnitCustomValue_OneWayPlatformPhaseState) == BoolToInt(false))) {
        lib1_gf_ModifyUnitCustomValue2(lv_targetUnit, lib3_ge_UnitCustomValue_OneWayPlatformPhaseState, IntToFixed(BoolToInt(true)));
        if ((lib1_gf_PresetCustomValue(lv_targetUnit, lib3_ge_UnitCustomValue_GroundedState) == BoolToInt(true)) && (RegionContainsPoint(lib3_gv_gameCollisionRegionOneWay, lib3_gf_UnitGetCollisionTestPoint2(lv_targetUnit, lib3_ge_UnitCollisionTestPoint_Origin)) == true)) {
            lv_platformDropDisplacement = -0.6;
            lib1_gf_ModifyUnitCustomValue2(lv_targetUnit, lib3_ge_UnitCustomValue_GroundedState, IntToFixed(BoolToInt(false)));
            lib3_gf_AddVerticalVelocity(lv_targetUnit, lv_platformDropDisplacement);
            UnitBehaviorAdd(lv_targetUnit, "UnitStateJumpingAnimation", lv_targetUnit, 1);
        }
    }
    if ((lib3_gv_player[lp_p].lv_input_KeyS_isHeld == false) && (lib3_gv_player[lp_p].lv_input_KeyS_isPressed == false) && (lib1_gf_PresetCustomValue(lv_targetUnit, lib3_ge_UnitCustomValue_OneWayPlatformPhaseState) == BoolToInt(true))) {
        lib1_gf_ModifyUnitCustomValue2(lv_targetUnit, lib3_ge_UnitCustomValue_OneWayPlatformPhaseState, IntToFixed(BoolToInt(false)));
    }
}

void lib3_gf_UnitResolveSpeculativeContact (unit lp_unit) {
    fixed auto766FBBAE_ae;
    fixed auto766FBBAE_ai;
    fixed auto8135FADC_ae;
    fixed auto8135FADC_ai;

    // Variable Declarations
    fixed lv_unitVelocityX;
    fixed lv_unitVelocityY;
    fixed lv_unitAdjustedXVelocity;
    fixed lv_unitAdjustedYVelocity;
    fixed lv_unitNormalVelocity;
    point lv_unitCenter;
    point lv_unitOrigin;
    point lv_unitOriginSpeculative;
    point lv_unitSpeculativeTestCenter;
    fixed lv_unitSpeculativeTestX;
    fixed lv_unitSpeculativeTestY;
    point lv_unitSpeculativeTestLeft;
    point lv_unitSpeculativeTestRight;
    point lv_unitSpeculativeTestTop;
    point lv_unitSpeculativeTestBottom;
    region lv_collisionRegion;
    region lv_collisionRegionOneWay;
    unit lv_collisionUnit;
    unit lv_closestSpeculativeCollisionUnit;
    fixed lv_closestSpeculativeCollisionDistance;
    fixed lv_speculativeStep;
    fixed lv_speculativeAngle;
    bool lv_collisionHasOccuredHorizontally;
    bool lv_collisionHasOccuredVertically;
    fixed lv_halfHeight;
    fixed lv_halfWidth;

    // Variable Initialization

    // Implementation
    lv_unitOrigin = UnitGetPosition(lp_unit);
    lv_unitOriginSpeculative = lib3_gf_UnitGetPresetPointNext(lp_unit, lib3_ge_UnitCollisionTestPoint_Origin);
    lv_unitNormalVelocity = DistanceBetweenPoints(lv_unitOrigin, lv_unitOriginSpeculative);
    if ((lv_unitNormalVelocity <= lib3_gv_speculativeContactStep)) {
        return ;
    }
    lv_unitCenter = lib3_gf_UnitGetCollisionTestPoint2(lp_unit, lib3_ge_UnitCollisionTestPoint_Center);
    lv_closestSpeculativeCollisionUnit = UnitGroupClosestToPoint(lib3_gv_staticCollisionUnits, lv_unitCenter);
    lv_closestSpeculativeCollisionDistance = DistanceBetweenPoints(lv_unitCenter, UnitGetPosition(lv_closestSpeculativeCollisionUnit));
    lv_closestSpeculativeCollisionDistance = (lv_closestSpeculativeCollisionDistance - lib3_gv_maximumCollisionRadius);
    if ((lv_unitNormalVelocity < lv_closestSpeculativeCollisionDistance)) {
        return ;
    }
    lv_closestSpeculativeCollisionDistance = MaxF(lv_closestSpeculativeCollisionDistance, 0.0);
    lv_collisionRegion = lib3_gv_gameCollisionRegion;
    lv_collisionRegionOneWay = lib3_gv_gameCollisionRegionOneWay;
    lv_speculativeAngle = AngleBetweenPoints(lv_unitOrigin, lv_unitOriginSpeculative);
    lv_halfHeight = lib1_gf_PresetCustomValue(lp_unit, lib3_ge_UnitCustomValue_HalfHeight);
    lv_halfWidth = lib1_gf_PresetCustomValue(lp_unit, lib3_ge_UnitCustomValue_HalfWidth);
    lv_unitVelocityX = lib3_gf_PresetCustomValue(lp_unit);
    lv_unitVelocityY = lib3_gf_PresetCustomValue2(lp_unit);
    auto766FBBAE_ae = lv_unitNormalVelocity;
    auto766FBBAE_ai = lib3_gv_speculativeContactStep;
    lv_speculativeStep = lv_closestSpeculativeCollisionDistance;
    for ( ; ( (auto766FBBAE_ai >= 0 && lv_speculativeStep <= auto766FBBAE_ae) || (auto766FBBAE_ai <= 0 && lv_speculativeStep >= auto766FBBAE_ae) ) ; lv_speculativeStep += auto766FBBAE_ai ) {
        lv_unitSpeculativeTestCenter = PointWithOffsetPolar(lib3_gf_UnitGetCollisionTestPoint2(lp_unit, lib3_ge_UnitCollisionTestPoint_Center), lv_speculativeStep, lv_speculativeAngle);
        lv_unitSpeculativeTestX = PointGetX(lv_unitSpeculativeTestCenter);
        lv_unitSpeculativeTestY = PointGetY(lv_unitSpeculativeTestCenter);
        if ((lv_unitVelocityX >= 0.0)) {
            lv_unitSpeculativeTestRight = Point((lv_unitSpeculativeTestX + lv_halfWidth), lv_unitSpeculativeTestY);
            if ((RegionContainsPoint(lv_collisionRegion, lv_unitSpeculativeTestRight) == true)) {
                lv_collisionUnit = lib3_gf_GetCollisionUnitFromPoint(lv_unitSpeculativeTestRight);
                if ((lib3_gf_CollisionDirectionIsDown3(lv_unitSpeculativeTestCenter, lv_collisionUnit) == true)) {
                    lv_unitAdjustedXVelocity = (lib3_gf_XOfCollisionUnitLeft(lv_collisionUnit) - lib3_gf_XOfCollisionUnitRight(lp_unit));
                    lib1_gf_ModifyUnitCustomValue2(lp_unit, lib3_ge_UnitCustomValue_StoredVelocityX, lv_unitVelocityX);
                    lib3_gf_SetUnitHorizontalVelocity(lp_unit, lv_unitAdjustedXVelocity);
                    lv_collisionHasOccuredHorizontally = true;
                    break;
                }
            }
        }
        if ((lv_unitVelocityX <= 0.0)) {
            lv_unitSpeculativeTestLeft = Point((lv_unitSpeculativeTestX - lv_halfWidth), lv_unitSpeculativeTestY);
            if ((RegionContainsPoint(lv_collisionRegion, lv_unitSpeculativeTestLeft) == true)) {
                lv_collisionUnit = lib3_gf_GetCollisionUnitFromPoint(lv_unitSpeculativeTestLeft);
                if ((lib3_gf_CollisionDirectionIsDown4(lv_unitSpeculativeTestCenter, lv_collisionUnit) == true)) {
                    lv_unitAdjustedXVelocity = (lib3_gf_XOfCollisionUnitRight(lv_collisionUnit) - lib3_gf_XOfCollisionUnitLeft(lp_unit));
                    lib1_gf_ModifyUnitCustomValue2(lp_unit, lib3_ge_UnitCustomValue_StoredVelocityX, lv_unitVelocityX);
                    lib3_gf_SetUnitHorizontalVelocity(lp_unit, lv_unitAdjustedXVelocity);
                    lv_collisionHasOccuredHorizontally = true;
                    break;
                }
            }
        }
        if ((lv_unitVelocityY >= 0.0)) {
            lv_unitSpeculativeTestTop = Point(lv_unitSpeculativeTestX, (lv_unitSpeculativeTestY + lv_halfHeight));
            if ((RegionContainsPoint(lv_collisionRegion, lv_unitSpeculativeTestTop) == true)) {
                lv_collisionUnit = lib3_gf_GetCollisionUnitFromPoint(lv_unitSpeculativeTestTop);
                if ((lib3_gf_CollisionDirectionIsDown2(lv_unitSpeculativeTestCenter, lv_collisionUnit) == true)) {
                    lv_unitAdjustedYVelocity = (lib3_gf_YOfCollisionUnitBottom(lv_collisionUnit) - (PointGetY(UnitGetPosition(lp_unit)) + lib1_gf_PresetCustomValue(lp_unit, lib3_ge_UnitCustomValue_Height)));
                    lib1_gf_ModifyUnitCustomValue2(lp_unit, lib3_ge_UnitCustomValue_StoredVelocityY, lv_unitVelocityY);
                    lib3_gf_SetUnitVerticalVelocity(lp_unit, lv_unitAdjustedYVelocity);
                    lv_collisionHasOccuredVertically = true;
                    break;
                }
            }
        }
        if ((lv_unitVelocityY <= 0.0) && (lib1_gf_PresetCustomValue(lp_unit, lib3_ge_UnitCustomValue_GroundedState) == BoolToInt(false))) {
            lv_unitSpeculativeTestBottom = Point(lv_unitSpeculativeTestX, (lv_unitSpeculativeTestY - lv_halfHeight));
            if (((RegionContainsPoint(lv_collisionRegion, lv_unitSpeculativeTestBottom) == true) || ((RegionContainsPoint(lv_collisionRegionOneWay, lv_unitSpeculativeTestBottom) == true) && (lib1_gf_PresetCustomValue(lp_unit, lib3_ge_UnitCustomValue_OneWayPlatformPhaseState) == BoolToInt(false))))) {
                lv_collisionUnit = lib3_gf_GetCollisionUnitFromPoint(lv_unitSpeculativeTestBottom);
                if ((PointGetY(lv_unitOrigin) >= lib3_gf_YOfCollisionUnitTop(lv_collisionUnit)) && (lib3_gf_CollisionDirectionIsDown(lv_unitSpeculativeTestCenter, lv_collisionUnit) == true)) {
                    lv_unitAdjustedYVelocity = (lib3_gf_YOfCollisionUnitTop(lv_collisionUnit) - PointGetY(UnitGetPosition(lp_unit)));
                    lib1_gf_ModifyUnitCustomValue2(lp_unit, lib3_ge_UnitCustomValue_StoredVelocityY, lv_unitVelocityY);
                    lib3_gf_SetUnitVerticalVelocity(lp_unit, lv_unitAdjustedYVelocity);
                    lv_collisionHasOccuredVertically = true;
                    break;
                }
            }
        }
    }
    if ((lv_collisionHasOccuredHorizontally == false) && (lv_collisionHasOccuredVertically == false)) {
        return ;
    }
    lv_unitOriginSpeculative = lib3_gf_UnitGetPresetPointNext(lp_unit, lib3_ge_UnitCollisionTestPoint_Origin);
    lv_speculativeAngle = AngleBetweenPoints(lv_unitOrigin, lv_unitOriginSpeculative);
    lv_unitNormalVelocity = DistanceBetweenPoints(lv_unitOrigin, lv_unitOriginSpeculative);
    lv_unitVelocityX = lib3_gf_PresetCustomValue(lp_unit);
    lv_unitVelocityY = lib3_gf_PresetCustomValue2(lp_unit);
    auto8135FADC_ae = lv_unitNormalVelocity;
    auto8135FADC_ai = lib3_gv_speculativeContactStep;
    lv_speculativeStep = lv_closestSpeculativeCollisionDistance;
    for ( ; ( (auto8135FADC_ai >= 0 && lv_speculativeStep <= auto8135FADC_ae) || (auto8135FADC_ai <= 0 && lv_speculativeStep >= auto8135FADC_ae) ) ; lv_speculativeStep += auto8135FADC_ai ) {
        lv_unitSpeculativeTestCenter = PointWithOffsetPolar(lib3_gf_UnitGetCollisionTestPoint2(lp_unit, lib3_ge_UnitCollisionTestPoint_Center), lv_speculativeStep, lv_speculativeAngle);
        lv_unitSpeculativeTestX = PointGetX(lv_unitSpeculativeTestCenter);
        lv_unitSpeculativeTestY = PointGetY(lv_unitSpeculativeTestCenter);
        if ((lv_unitVelocityX >= 0.0) && (lv_collisionHasOccuredHorizontally == false)) {
            lv_unitSpeculativeTestRight = Point((lv_unitSpeculativeTestX + lv_halfWidth), lv_unitSpeculativeTestY);
            if ((RegionContainsPoint(lv_collisionRegion, lv_unitSpeculativeTestRight) == true) && (RegionContainsPoint(lv_collisionRegionOneWay, lv_unitSpeculativeTestRight) == false)) {
                lv_collisionUnit = lib3_gf_GetCollisionUnitFromPoint(lv_unitSpeculativeTestRight);
                if ((lib3_gf_CollisionDirectionIsDown3(lv_unitSpeculativeTestCenter, lv_collisionUnit) == true)) {
                    lv_unitAdjustedXVelocity = (lib3_gf_XOfCollisionUnitLeft(lv_collisionUnit) - lib3_gf_XOfCollisionUnitRight(lp_unit));
                    lib1_gf_ModifyUnitCustomValue2(lp_unit, lib3_ge_UnitCustomValue_StoredVelocityX, lv_unitVelocityX);
                    lib3_gf_SetUnitHorizontalVelocity(lp_unit, lv_unitAdjustedXVelocity);
                    lv_collisionHasOccuredHorizontally = true;
                    return ;
                }
            }
        }
        if ((lv_unitVelocityX <= 0.0) && (lv_collisionHasOccuredHorizontally == false)) {
            lv_unitSpeculativeTestLeft = Point((lv_unitSpeculativeTestX - lv_halfWidth), lv_unitSpeculativeTestY);
            if ((RegionContainsPoint(lv_collisionRegion, lv_unitSpeculativeTestLeft) == true)) {
                lv_collisionUnit = lib3_gf_GetCollisionUnitFromPoint(lv_unitSpeculativeTestLeft);
                if ((lib3_gf_CollisionDirectionIsDown4(lv_unitSpeculativeTestCenter, lv_collisionUnit) == true)) {
                    lv_unitAdjustedXVelocity = (lib3_gf_XOfCollisionUnitRight(lv_collisionUnit) - lib3_gf_XOfCollisionUnitLeft(lp_unit));
                    lib1_gf_ModifyUnitCustomValue2(lp_unit, lib3_ge_UnitCustomValue_StoredVelocityX, lv_unitVelocityX);
                    lib3_gf_SetUnitHorizontalVelocity(lp_unit, lv_unitAdjustedXVelocity);
                    lv_collisionHasOccuredHorizontally = true;
                    return ;
                }
            }
        }
        if ((lv_unitVelocityY >= 0.0) && (lv_collisionHasOccuredVertically == false)) {
            lv_unitSpeculativeTestTop = Point(lv_unitSpeculativeTestX, (lv_unitSpeculativeTestY + lv_halfHeight));
            if ((RegionContainsPoint(lv_collisionRegion, lv_unitSpeculativeTestTop) == true)) {
                lv_collisionUnit = lib3_gf_GetCollisionUnitFromPoint(lv_unitSpeculativeTestTop);
                if ((lib3_gf_CollisionDirectionIsDown2(lv_unitSpeculativeTestCenter, lv_collisionUnit) == true)) {
                    lv_unitAdjustedYVelocity = (lib3_gf_YOfCollisionUnitBottom(lv_collisionUnit) - (PointGetY(UnitGetPosition(lp_unit)) + lib1_gf_PresetCustomValue(lp_unit, lib3_ge_UnitCustomValue_Height)));
                    lib1_gf_ModifyUnitCustomValue2(lp_unit, lib3_ge_UnitCustomValue_StoredVelocityY, lv_unitVelocityY);
                    lib3_gf_SetUnitVerticalVelocity(lp_unit, lv_unitAdjustedYVelocity);
                    lv_collisionHasOccuredVertically = true;
                    return ;
                }
            }
        }
        if ((lv_unitVelocityY <= 0.0) && (lv_collisionHasOccuredVertically == false) && (lib1_gf_PresetCustomValue(lp_unit, lib3_ge_UnitCustomValue_GroundedState) == BoolToInt(false))) {
            lv_unitSpeculativeTestBottom = Point(lv_unitSpeculativeTestX, (lv_unitSpeculativeTestY - lv_halfHeight));
            if (((RegionContainsPoint(lv_collisionRegion, lv_unitSpeculativeTestBottom) == true) || (RegionContainsPoint(lv_collisionRegionOneWay, lv_unitSpeculativeTestBottom) == true))) {
                lv_collisionUnit = lib3_gf_GetCollisionUnitFromPoint(lv_unitSpeculativeTestBottom);
                if ((lib3_gf_CollisionDirectionIsDown(lv_unitSpeculativeTestCenter, lv_collisionUnit) == true)) {
                    lv_unitAdjustedYVelocity = (lib3_gf_YOfCollisionUnitTop(lv_collisionUnit) - PointGetY(UnitGetPosition(lp_unit)));
                    lib1_gf_ModifyUnitCustomValue2(lp_unit, lib3_ge_UnitCustomValue_StoredVelocityY, lv_unitVelocityY);
                    lib3_gf_SetUnitVerticalVelocity(lp_unit, lv_unitAdjustedYVelocity);
                    lv_collisionHasOccuredVertically = true;
                    return ;
                }
            }
        }
    }
}

void lib3_gf_UnitResolveHorizontalCollision (unit lp_unit) {
    fixed auto8A3A4DF7_ae;
    fixed auto8A3A4DF7_ai;
    fixed autoB4725575_ae;
    fixed autoB4725575_ai;

    // Variable Declarations
    region lv_collisionRegion;
    point lv_collisionTestLeftHigh;
    point lv_collisionTestLeftIntermediate;
    point lv_collisionTestLeftLow;
    point lv_collisionTestRightHigh;
    point lv_collisionTestRightIntermediate;
    point lv_collisionTestRightLow;
    point lv_collisionTestCenter;
    fixed lv_unitWidthOffset;
    unit lv_collisionUnit;
    point lv_resolvedPosition;
    fixed lv_unitStoredVelocity;
    fixed lv_unitHeight;
    fixed lv_intermediateHeightTest;

    // Variable Initialization

    // Implementation
    if ((lib3_gf_PresetCustomValue(lp_unit) == 0.0)) {
        return ;
    }
    lv_collisionRegion = lib3_gv_gameCollisionRegion;
    lv_unitWidthOffset = lib1_gf_PresetCustomValue(lp_unit, lib3_ge_UnitCustomValue_HalfWidth);
    lv_unitHeight = lib1_gf_PresetCustomValue(lp_unit, lib3_ge_UnitCustomValue_Height);
    lv_collisionTestCenter = lib3_gf_UnitGetPresetPointNext(lp_unit, lib3_ge_UnitCollisionTestPoint_Center);
    if ((lib3_gf_PresetCustomValue(lp_unit) > 0.0)) {
        lv_collisionTestRightLow = lib3_gf_UnitGetPresetPointNext(lp_unit, lib3_ge_UnitCollisionTestPoint_RightLow);
        if ((lv_resolvedPosition == null) && (RegionContainsPoint(lv_collisionRegion, lv_collisionTestRightLow) == true)) {
            lv_collisionUnit = lib3_gf_GetCollisionUnitFromPoint(lv_collisionTestRightLow);
            if ((lib3_gf_CollisionDirectionIsDown2(lv_collisionTestRightLow, lv_collisionUnit) == false) && (lib3_gf_CollisionDirectionIsDown(lv_collisionTestRightLow, lv_collisionUnit) == false)) {
                lv_resolvedPosition = Point((lib3_gf_XOfCollisionUnitLeft(lv_collisionUnit) - lv_unitWidthOffset), PointGetY(UnitGetPosition(lp_unit)));
            }
        }
        lv_collisionTestRightHigh = lib3_gf_UnitGetPresetPointNext(lp_unit, lib3_ge_UnitCollisionTestPoint_RightHigh);
        if ((lv_resolvedPosition == null) && (RegionContainsPoint(lv_collisionRegion, lv_collisionTestRightHigh) == true)) {
            lv_collisionUnit = lib3_gf_GetCollisionUnitFromPoint(lv_collisionTestRightHigh);
            if ((lib3_gf_CollisionDirectionIsDown2(lv_collisionTestRightHigh, lv_collisionUnit) == false) && (lib3_gf_CollisionDirectionIsDown(lv_collisionTestRightHigh, lv_collisionUnit) == false)) {
                lv_resolvedPosition = Point((lib3_gf_XOfCollisionUnitLeft(lv_collisionUnit) - lv_unitWidthOffset), PointGetY(UnitGetPosition(lp_unit)));
            }
        }
        if ((lv_resolvedPosition == null) && (lv_unitHeight > lib3_gv_minimumHorizontalTest) && (lv_unitHeight < lib3_gv_maximumHorizontalTest)) {
            lv_collisionTestRightIntermediate = lib3_gf_UnitGetCollisionTestPoint2(lp_unit, lib3_ge_UnitCollisionTestPoint_RightMid);
            if ((RegionContainsPoint(lv_collisionRegion, lv_collisionTestRightIntermediate) == true)) {
                lv_collisionUnit = lib3_gf_GetCollisionUnitFromPoint(lv_collisionTestRightIntermediate);
                if ((lib3_gf_CollisionDirectionIsDown2(lv_collisionTestRightIntermediate, lv_collisionUnit) == false) && (lib3_gf_CollisionDirectionIsDown(lv_collisionTestRightIntermediate, lv_collisionUnit) == false)) {
                    lv_resolvedPosition = Point((lib3_gf_XOfCollisionUnitLeft(lv_collisionUnit) - lv_unitWidthOffset), PointGetY(UnitGetPosition(lp_unit)));
                }
            }
        }
        else if ((lv_resolvedPosition == null) && (lv_unitHeight >= lib3_gv_minimumHorizontalTest)) {
            autoB4725575_ae = (lib1_gf_PresetCustomValue(lp_unit, lib3_ge_UnitCustomValue_HighHeight) - lib3_gv_minimumCollisionLength);
            autoB4725575_ai = lib3_gv_minimumCollisionLength;
            lv_intermediateHeightTest = (lib1_gf_PresetCustomValue(lp_unit, lib3_ge_UnitCustomValue_LowHeight) + lib3_gv_minimumCollisionLength);
            for ( ; ( (autoB4725575_ai >= 0 && lv_intermediateHeightTest <= autoB4725575_ae) || (autoB4725575_ai <= 0 && lv_intermediateHeightTest >= autoB4725575_ae) ) ; lv_intermediateHeightTest += autoB4725575_ai ) {
                lv_collisionTestRightIntermediate = Point(PointGetX(lv_collisionTestRightLow), (PointGetY(UnitGetPosition(lp_unit)) + lv_intermediateHeightTest));
                if ((lv_resolvedPosition == null) && (RegionContainsPoint(lv_collisionRegion, lv_collisionTestRightIntermediate) == true)) {
                    lv_collisionUnit = lib3_gf_GetCollisionUnitFromPoint(lv_collisionTestRightIntermediate);
                    if ((lib3_gf_CollisionDirectionIsDown2(lv_collisionTestRightIntermediate, lv_collisionUnit) == false) && (lib3_gf_CollisionDirectionIsDown(lv_collisionTestRightIntermediate, lv_collisionUnit) == false)) {
                        lv_resolvedPosition = Point((lib3_gf_XOfCollisionUnitLeft(lv_collisionUnit) - lv_unitWidthOffset), PointGetY(UnitGetPosition(lp_unit)));
                    }
                }
            }
        }
    }
    else {
        lv_collisionTestLeftLow = lib3_gf_UnitGetPresetPointNext(lp_unit, lib3_ge_UnitCollisionTestPoint_LeftLow);
        if ((lv_resolvedPosition == null) && (RegionContainsPoint(lv_collisionRegion, lv_collisionTestLeftLow) == true)) {
            lv_collisionUnit = lib3_gf_GetCollisionUnitFromPoint(lv_collisionTestLeftLow);
            if ((lib3_gf_CollisionDirectionIsDown2(lv_collisionTestLeftLow, lv_collisionUnit) == false) && (lib3_gf_CollisionDirectionIsDown(lv_collisionTestLeftLow, lv_collisionUnit) == false)) {
                lv_resolvedPosition = Point((lib3_gf_XOfCollisionUnitRight(lv_collisionUnit) + lv_unitWidthOffset), PointGetY(UnitGetPosition(lp_unit)));
            }
        }
        lv_collisionTestLeftHigh = lib3_gf_UnitGetPresetPointNext(lp_unit, lib3_ge_UnitCollisionTestPoint_LeftHigh);
        if ((lv_resolvedPosition == null) && (RegionContainsPoint(lv_collisionRegion, lv_collisionTestLeftHigh) == true)) {
            lv_collisionUnit = lib3_gf_GetCollisionUnitFromPoint(lv_collisionTestLeftHigh);
            if ((lib3_gf_CollisionDirectionIsDown2(lv_collisionTestLeftHigh, lv_collisionUnit) == false) && (lib3_gf_CollisionDirectionIsDown(lv_collisionTestLeftHigh, lv_collisionUnit) == false)) {
                lv_resolvedPosition = Point((lib3_gf_XOfCollisionUnitRight(lv_collisionUnit) + lv_unitWidthOffset), PointGetY(UnitGetPosition(lp_unit)));
            }
        }
        if ((lv_resolvedPosition == null) && (lv_unitHeight > lib3_gv_minimumHorizontalTest) && (lv_unitHeight < lib3_gv_maximumHorizontalTest)) {
            lv_collisionTestLeftIntermediate = lib3_gf_UnitGetCollisionTestPoint2(lp_unit, lib3_ge_UnitCollisionTestPoint_LeftMid);
            if ((RegionContainsPoint(lv_collisionRegion, lv_collisionTestLeftIntermediate) == true)) {
                lv_collisionUnit = lib3_gf_GetCollisionUnitFromPoint(lv_collisionTestLeftIntermediate);
                if ((lib3_gf_CollisionDirectionIsDown2(lv_collisionTestLeftIntermediate, lv_collisionUnit) == false) && (lib3_gf_CollisionDirectionIsDown(lv_collisionTestLeftIntermediate, lv_collisionUnit) == false)) {
                    lv_resolvedPosition = Point((lib3_gf_XOfCollisionUnitRight(lv_collisionUnit) + lv_unitWidthOffset), PointGetY(UnitGetPosition(lp_unit)));
                }
            }
        }
        else if ((lv_resolvedPosition == null) && (lv_unitHeight >= lib3_gv_maximumHorizontalTest)) {
            auto8A3A4DF7_ae = (lib1_gf_PresetCustomValue(lp_unit, lib3_ge_UnitCustomValue_HighHeight) - lib3_gv_minimumCollisionLength);
            auto8A3A4DF7_ai = lib3_gv_minimumCollisionLength;
            lv_intermediateHeightTest = (lib1_gf_PresetCustomValue(lp_unit, lib3_ge_UnitCustomValue_LowHeight) + lib3_gv_minimumCollisionLength);
            for ( ; ( (auto8A3A4DF7_ai >= 0 && lv_intermediateHeightTest <= auto8A3A4DF7_ae) || (auto8A3A4DF7_ai <= 0 && lv_intermediateHeightTest >= auto8A3A4DF7_ae) ) ; lv_intermediateHeightTest += auto8A3A4DF7_ai ) {
                lv_collisionTestLeftIntermediate = Point(PointGetX(lv_collisionTestLeftLow), (PointGetY(UnitGetPosition(lp_unit)) + lv_intermediateHeightTest));
                if ((lv_resolvedPosition == null) && (RegionContainsPoint(lv_collisionRegion, lv_collisionTestLeftIntermediate) == true)) {
                    lv_collisionUnit = lib3_gf_GetCollisionUnitFromPoint(lv_collisionTestLeftIntermediate);
                    if ((lib3_gf_CollisionDirectionIsDown2(lv_collisionTestLeftIntermediate, lv_collisionUnit) == false) && (lib3_gf_CollisionDirectionIsDown(lv_collisionTestLeftIntermediate, lv_collisionUnit) == false)) {
                        lv_resolvedPosition = Point((lib3_gf_XOfCollisionUnitRight(lv_collisionUnit) + lv_unitWidthOffset), PointGetY(UnitGetPosition(lp_unit)));
                    }
                }
            }
        }
    }
    if ((lv_resolvedPosition != null)) {
        if ((lib1_gf_PresetCustomValue(lp_unit, lib3_ge_UnitCustomValue_StoredVelocityX) == 0.0)) {
            lib1_gf_ModifyUnitCustomValue2(lp_unit, lib3_ge_UnitCustomValue_StoredVelocityX, lib1_gf_PresetCustomValue(lp_unit, lib3_ge_UnitCustomValue_CurrentVelocityX));
        }
        lib3_gf_MoveUnitAndHitboxUnitsInstantly(lp_unit, lv_resolvedPosition);
        lib3_gf_SetUnitHorizontalVelocity(lp_unit, 0.0);
    }
}

void lib3_gf_UnitResolveVerticalCollision (unit lp_unit) {
    // Variable Declarations
    region lv_collisionRegion;
    point lv_collisionTestOrigin;
    point lv_collisionTestTop;
    unit lv_collisionUnit;
    point lv_resolvedPosition;

    // Variable Initialization

    // Implementation
    lv_collisionRegion = lib3_gv_gameCollisionRegion;
    lv_collisionTestTop = lib3_gf_UnitGetPresetPointNext(lp_unit, lib3_ge_UnitCollisionTestPoint_Top);
    lv_collisionTestOrigin = lib3_gf_UnitGetPresetPointNext(lp_unit, lib3_ge_UnitCollisionTestPoint_Origin);
    if ((RegionContainsPoint(lv_collisionRegion, lv_collisionTestTop) == true) && (RegionContainsPoint(lv_collisionRegion, lv_collisionTestOrigin) == true)) {
        lv_resolvedPosition = Point((PointGetX(UnitGetPosition(lp_unit)) - lib3_gf_PresetCustomValue(lp_unit)), (PointGetY(UnitGetPosition(lp_unit)) - lib3_gf_PresetCustomValue2(lp_unit)));
        lib3_gf_MoveUnitAndHitboxUnitsInstantly(lp_unit, lv_resolvedPosition);
        lib3_gf_SetUnitVerticalVelocity(lp_unit, 0.0);
        lib3_gf_SetUnitHorizontalVelocity(lp_unit, 0.0);
        return ;
    }
    if ((lib3_gf_PresetCustomValue2(lp_unit) == 0.0)) {
        return ;
    }
    if ((RegionContainsPoint(lv_collisionRegion, lv_collisionTestTop) == false) && (RegionContainsPoint(lv_collisionRegion, lv_collisionTestOrigin) == true) && (lib1_gf_PresetCustomValue(lp_unit, lib3_ge_UnitCustomValue_GroundedState) == BoolToInt(false))) {
        return ;
    }
    if ((lib3_gf_PresetCustomValue2(lp_unit) > 0.0)) {
        if ((RegionContainsPoint(lv_collisionRegion, lv_collisionTestTop) == true) && (RegionContainsPoint(lv_collisionRegion, lv_collisionTestOrigin) == false)) {
            lv_collisionUnit = lib3_gf_GetCollisionUnitFromPoint(lv_collisionTestTop);
            lv_resolvedPosition = Point(PointGetX(UnitGetPosition(lp_unit)), (lib3_gf_YOfCollisionUnitBottom(lv_collisionUnit) - lib1_gf_PresetCustomValue(lp_unit, lib3_ge_UnitCustomValue_Height)));
            if ((lib1_gf_PresetCustomValue(lp_unit, lib3_ge_UnitCustomValue_StoredVelocityY) == 0.0)) {
                lib1_gf_ModifyUnitCustomValue2(lp_unit, lib3_ge_UnitCustomValue_StoredVelocityY, lib1_gf_PresetCustomValue(lp_unit, lib3_ge_UnitCustomValue_CurrentVelocityY));
            }
            lib3_gf_MoveUnitAndHitboxUnitsInstantly(lp_unit, lv_resolvedPosition);
            lib3_gf_SetUnitVerticalVelocity(lp_unit, 0.0);
            DataTableSetUnit(false, lib3_gf_PresetGenericEvent2(lib3_ge_GenericEvent_StaticCollisionBottom, lib3_ge_GenericEventParameter_TargetUnit), lp_unit);
            DataTableSetUnit(false, lib3_gf_PresetGenericEvent2(lib3_ge_GenericEvent_StaticCollisionBottom, lib3_ge_GenericEventParameter_CollisionUnit), lv_collisionUnit);
            lib3_gf_SendGenericEventPreset(lib3_ge_GenericEvent_StaticCollisionBottom);
        }
    }
    else {
    }
}

void lib3_gf_ResolveGravityForUnit (unit lp_unit) {
    // Variable Declarations
    region lv_collisionRegion;
    region lv_collisionRegionOneWay;
    point lv_collisionTestOrigin;
    point lv_collisionTestTop;
    unit lv_collisionUnit;
    point lv_resolvedPosition;
    int lv_p;

    // Variable Initialization

    // Implementation
    lv_collisionRegion = lib3_gv_gameCollisionRegion;
    lv_collisionRegionOneWay = lib3_gv_gameCollisionRegionOneWay;
    lv_collisionTestOrigin = lib3_gf_UnitGetPresetPointNext(lp_unit, lib3_ge_UnitCollisionTestPoint_Origin);
    lv_collisionTestTop = lib3_gf_UnitGetPresetPointNext(lp_unit, lib3_ge_UnitCollisionTestPoint_Top);
    lv_p = UnitGetOwner(lp_unit);
    if ((lib1_gf_PresetCustomValue(lp_unit, lib3_ge_UnitCustomValue_GroundedState) == IntToFixed(BoolToInt(true))) && (RegionContainsPoint(lib3_gv_gameCollisionRegion, lv_collisionTestOrigin) == false) && ((RegionContainsPoint(lib3_gv_gameCollisionRegionOneWay, lv_collisionTestOrigin) == false) || ((RegionContainsPoint(lib3_gv_gameCollisionRegionOneWay, lv_collisionTestOrigin) == true) && (lib1_gf_PresetCustomValue(lp_unit, lib3_ge_UnitCustomValue_OneWayPlatformPhaseState) == IntToFixed(BoolToInt(true)))))) {
        lib1_gf_ModifyUnitCustomValue2(lp_unit, lib3_ge_UnitCustomValue_GroundedState, IntToFixed(BoolToInt(false)));
    }
    if ((lib1_gf_PresetCustomValue(lp_unit, lib3_ge_UnitCustomValue_GroundedState) == IntToFixed(BoolToInt(false)))) {
        if ((lib3_gf_PresetCustomValue2(lp_unit) <= 0.0) && (RegionContainsPoint(lv_collisionRegion, lv_collisionTestTop) == false) && ((RegionContainsPoint(lv_collisionRegion, lv_collisionTestOrigin) == true) || ((RegionContainsPoint(lv_collisionRegionOneWay, lv_collisionTestOrigin) == true) && (lib1_gf_PresetCustomValue(lp_unit, lib3_ge_UnitCustomValue_OneWayPlatformPhaseState) == BoolToInt(false))))) {
            if ((lib3_gf_UnitIsHeroUnit(lp_unit) == true)) {
                UnitBehaviorRemove(lp_unit, "UnitStateJumpingAnimation", 1);
                UnitBehaviorRemove(lp_unit, "UnitStateFallingAnimation", 1);
                lib1_gf_ModifyUnitCustomValue2(lp_unit, lib3_ge_UnitCustomValue_JumpChargesCurrent, lib1_gf_PresetCustomValue(lp_unit, lib3_ge_UnitCustomValue_JumpChargesMax));
            }
            lib1_gf_ModifyUnitCustomValue2(lp_unit, lib3_ge_UnitCustomValue_GroundedState, IntToFixed(BoolToInt(true)));
            lv_collisionUnit = lib3_gf_GetCollisionUnitFromPoint(lv_collisionTestOrigin);
            lv_resolvedPosition = Point(PointGetX(UnitGetPosition(lp_unit)), lib3_gf_YOfCollisionUnitTop(lv_collisionUnit));
            if ((lib1_gf_PresetCustomValue(lp_unit, lib3_ge_UnitCustomValue_StoredVelocityY) == 0.0)) {
                lib1_gf_ModifyUnitCustomValue2(lp_unit, lib3_ge_UnitCustomValue_StoredVelocityY, lib1_gf_PresetCustomValue(lp_unit, lib3_ge_UnitCustomValue_CurrentVelocityY));
            }
            lib3_gf_MoveUnitAndHitboxUnitsInstantly(lp_unit, lv_resolvedPosition);
            lib3_gf_SetUnitVerticalVelocity(lp_unit, 0.0);
            lib3_gf_SetUnitHorizontalVelocity(lp_unit, lib3_gf_UnitCalculatedLandingHorizontalVelocity(lp_unit));
        }
        else {
            lib3_gf_AddVerticalVelocity(lp_unit, lib3_gv_game.lv_gravity);
            if ((lib3_gf_UnitIsHeroUnit(lp_unit) == true)) {
                if ((UnitHasBehavior2(lp_unit, "UnitStateFallingAnimation") == false)) {
                    lib3_gf_UnitRemoveJumpChargeAfterBuffer(lp_unit, 0.25);
                }
                UnitBehaviorAdd(lp_unit, "UnitStateFallingAnimation", lp_unit, 1);
            }
        }
    }
}

trigger auto_lib3_gf_ResolveRestitutionForUnit_Trigger = null;
unit auto_lib3_gf_ResolveRestitutionForUnit_lp_unit;

void lib3_gf_ResolveRestitutionForUnit (unit lp_unit) {
    auto_lib3_gf_ResolveRestitutionForUnit_lp_unit = lp_unit;

    if (auto_lib3_gf_ResolveRestitutionForUnit_Trigger == null) {
        auto_lib3_gf_ResolveRestitutionForUnit_Trigger = TriggerCreate("auto_lib3_gf_ResolveRestitutionForUnit_TriggerFunc");
    }

    TriggerExecute(auto_lib3_gf_ResolveRestitutionForUnit_Trigger, false, false);
}

bool auto_lib3_gf_ResolveRestitutionForUnit_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_lib3_gf_ResolveRestitutionForUnit_lp_unit;

    // Variable Declarations
    fixed lv_unitStoredXVelocity;
    fixed lv_unitStoredYVelocity;
    fixed lv_unitRestitution;
    fixed lv_inputBlockDuration;
    fixed lv_inputBlockDurationMinimum;
    fixed lv_inputBlockFactor;
    int lv_p;

    // Variable Initialization

    // Implementation
    Wait(0.0, c_timeGame);
    lv_inputBlockDurationMinimum = 0.25;
    lv_inputBlockFactor = 0.0625;
    lv_unitStoredXVelocity = lib1_gf_PresetCustomValue(lp_unit, lib3_ge_UnitCustomValue_StoredVelocityX);
    lv_unitStoredYVelocity = lib1_gf_PresetCustomValue(lp_unit, lib3_ge_UnitCustomValue_StoredVelocityY);
    lv_unitRestitution = lib1_gf_PresetCustomValue(lp_unit, lib3_ge_UnitCustomValue_Restitution);
    lv_p = UnitGetOwner(lp_unit);
    if ((lv_unitStoredXVelocity != 0.0)) {
        lv_unitStoredXVelocity = ((-1.0 * lv_unitRestitution) * lv_unitStoredXVelocity);
        lib3_gf_SetUnitHorizontalVelocity(lp_unit, lv_unitStoredXVelocity);
        if ((lib3_gf_PresetCustomValue(lp_unit) != 0.0) && (UnitGetType(lp_unit) == "Hero")) {
            lv_inputBlockDuration = MaxF(AbsF((lv_unitStoredXVelocity * lv_inputBlockFactor)), lv_inputBlockDurationMinimum);
            lib1_gf_AddTimeToTimer(lib3_gv_player[lv_p].lv_controlLoss, lv_inputBlockDuration);
        }
    }
    if ((lv_unitStoredYVelocity != 0.0) && (AbsF(lv_unitStoredYVelocity) > (lib1_gf_PresetCustomValue(lp_unit, lib3_ge_UnitCustomValue_HalfHeight) * lv_unitRestitution))) {
        lv_unitStoredYVelocity = ((-1.0 * lv_unitRestitution) * lv_unitStoredYVelocity);
        lib3_gf_SetUnitVerticalVelocity(lp_unit, lv_unitStoredYVelocity);
        if ((lib3_gf_PresetCustomValue2(lp_unit) != 0.0) && (UnitGetType(lp_unit) == "Hero")) {
            lv_inputBlockDuration = MaxF(AbsF((lv_unitStoredYVelocity * lv_inputBlockFactor)), lv_inputBlockDurationMinimum);
            lib1_gf_AddTimeToTimer(lib3_gv_player[lv_p].lv_controlLoss, lv_inputBlockDuration);
        }
    }
    return true;
}

void lib3_gf_TranslateUnit (unit lp_unit) {
    // Implementation
    lib3_gf_TranslateUnit3(lp_unit);
    lib3_gf_TranslateUnit2(lp_unit);
}

void lib3_gf_TranslateUnit2 (unit lp_unit) {
    int auto834531A9_ae;
    int auto834531A9_ai;

    // Variable Declarations
    fixed lv_velocityY;
    fixed lv_absVelocity;
    int lv_i;
    int lv_kineticDotHundred;
    int lv_kineticDotTen;
    int lv_kineticOne;
    int lv_directionIndex;
    string lv_hitboxIndex;
    unitgroup lv_hitboxGroup;
    int lv_hitboxCount;
    unit lv_hitboxUnit;

    // Variable Initialization
    lv_hitboxIndex = "";
    lv_hitboxGroup = UnitGroupEmpty();

    // Implementation
    lv_velocityY = lib3_gf_PresetCustomValue2(lp_unit);
    lv_absVelocity = AbsF(lv_velocityY);
    if ((lv_velocityY == 0.0)) {
        return ;
    }
    if ((lv_velocityY > 0.0)) {
        lv_directionIndex = lib3_ge_KineticArrayDirections_Up;
    }
    else {
        lv_directionIndex = lib3_ge_KineticArrayDirections_Down;
    }
    lv_kineticOne = TruncI(lv_absVelocity);
    lv_kineticDotTen = TruncI(((lv_absVelocity * 10.0) - (lv_kineticOne * 10.0)));
    lv_kineticDotHundred = (RoundI((lv_absVelocity * 100.0)) - ((lv_kineticDotTen * 10) + (lv_kineticOne * 100)));
    if ((lv_kineticDotHundred == 10)) {
        lv_kineticDotHundred = 0;
        lv_kineticDotTen += 1;
    }
    if (((lv_kineticDotHundred >= 1) && (lv_kineticDotHundred <= 9))) {
        PlayerCreateEffectUnit(0, lib3_gv_kineticTranslate[(lv_directionIndex)][lv_kineticDotHundred], lp_unit);
        lib3_gv_totalLiveKinetics += 1;
    }
    if (((lv_kineticDotTen >= 1) && (lv_kineticDotTen <= 9))) {
        PlayerCreateEffectUnit(0, lib3_gv_kineticTranslate2[(lv_directionIndex)][lv_kineticDotTen], lp_unit);
        lib3_gv_totalLiveKinetics += 1;
    }
    if (((lv_kineticOne >= 1) && (lv_kineticOne <= 9))) {
        PlayerCreateEffectUnit(0, lib3_gv_kineticTranslate3[(lv_directionIndex)][lv_kineticOne], lp_unit);
        lib3_gv_totalLiveKinetics += 1;
    }
    lv_hitboxIndex = lib3_gf_UnitGetHitboxGroupCode(lp_unit);
    if ((DataTableValueExists(true, lv_hitboxIndex) == true)) {
        lv_hitboxGroup = DataTableGetUnitGroup(true, lv_hitboxIndex);
        lv_hitboxCount = UnitGroupCount(lv_hitboxGroup, c_unitCountAll);
        auto834531A9_ae = lv_hitboxCount;
        auto834531A9_ai = 1;
        lv_i = 1;
        for ( ; ( (auto834531A9_ai >= 0 && lv_i <= auto834531A9_ae) || (auto834531A9_ai <= 0 && lv_i >= auto834531A9_ae) ) ; lv_i += auto834531A9_ai ) {
            lv_hitboxUnit = UnitGroupUnit(lv_hitboxGroup, lv_i);
            if (((lv_kineticOne >= 1) && (lv_kineticOne <= 9))) {
                PlayerCreateEffectUnit(0, lib3_gv_kineticTranslate3[(lv_directionIndex)][lv_kineticOne], lv_hitboxUnit);
                lib3_gv_totalLiveKinetics += 1;
            }
            if (((lv_kineticDotTen >= 1) && (lv_kineticDotTen <= 9))) {
                PlayerCreateEffectUnit(0, lib3_gv_kineticTranslate2[(lv_directionIndex)][lv_kineticDotTen], lv_hitboxUnit);
                lib3_gv_totalLiveKinetics += 1;
            }
            if (((lv_kineticDotHundred >= 1) && (lv_kineticDotHundred <= 9))) {
                PlayerCreateEffectUnit(0, lib3_gv_kineticTranslate[(lv_directionIndex)][lv_kineticDotHundred], lv_hitboxUnit);
                lib3_gv_totalLiveKinetics += 1;
            }
        }
    }
}

void lib3_gf_TranslateUnit3 (unit lp_unit) {
    int auto9E0FEAD1_ae;
    int auto9E0FEAD1_ai;

    // Variable Declarations
    fixed lv_velocityX;
    fixed lv_absVelocity;
    int lv_i;
    int lv_kineticDotHundred;
    int lv_kineticDotTen;
    int lv_kineticOne;
    int lv_directionIndex;
    string lv_hitboxIndex;
    unitgroup lv_hitboxGroup;
    int lv_hitboxCount;
    unit lv_hitboxUnit;

    // Variable Initialization
    lv_hitboxIndex = "";
    lv_hitboxGroup = UnitGroupEmpty();

    // Implementation
    lv_velocityX = lib3_gf_PresetCustomValue(lp_unit);
    lv_absVelocity = AbsF(lv_velocityX);
    if ((lv_velocityX == 0.0)) {
        return ;
    }
    if ((lv_velocityX > 0.0)) {
        lv_directionIndex = lib3_ge_KineticArrayDirections_Right;
    }
    else {
        lv_directionIndex = lib3_ge_KineticArrayDirections_Left;
    }
    lv_kineticOne = TruncI(lv_absVelocity);
    lv_kineticDotTen = TruncI(((lv_absVelocity * 10.0) - (lv_kineticOne * 10.0)));
    lv_kineticDotHundred = (RoundI((lv_absVelocity * 100.0)) - ((lv_kineticDotTen * 10) + (lv_kineticOne * 100)));
    if ((lv_kineticDotHundred == 10)) {
        lv_kineticDotHundred = 0;
        lv_kineticDotTen += 1;
    }
    if (((lv_kineticDotHundred >= 1) && (lv_kineticDotHundred <= 9))) {
        PlayerCreateEffectUnit(0, lib3_gv_kineticTranslate[(lv_directionIndex)][lv_kineticDotHundred], lp_unit);
        lib3_gv_totalLiveKinetics += 1;
    }
    if (((lv_kineticDotTen >= 1) && (lv_kineticDotTen <= 9))) {
        PlayerCreateEffectUnit(0, lib3_gv_kineticTranslate2[(lv_directionIndex)][lv_kineticDotTen], lp_unit);
        lib3_gv_totalLiveKinetics += 1;
    }
    if (((lv_kineticOne >= 1) && (lv_kineticOne <= 9))) {
        PlayerCreateEffectUnit(0, lib3_gv_kineticTranslate3[(lv_directionIndex)][lv_kineticOne], lp_unit);
        lib3_gv_totalLiveKinetics += 1;
    }
    lv_hitboxIndex = lib3_gf_UnitGetHitboxGroupCode(lp_unit);
    if ((DataTableValueExists(true, lv_hitboxIndex) == true)) {
        lv_hitboxGroup = DataTableGetUnitGroup(true, lv_hitboxIndex);
        lv_hitboxCount = UnitGroupCount(lv_hitboxGroup, c_unitCountAll);
        auto9E0FEAD1_ae = lv_hitboxCount;
        auto9E0FEAD1_ai = 1;
        lv_i = 1;
        for ( ; ( (auto9E0FEAD1_ai >= 0 && lv_i <= auto9E0FEAD1_ae) || (auto9E0FEAD1_ai <= 0 && lv_i >= auto9E0FEAD1_ae) ) ; lv_i += auto9E0FEAD1_ai ) {
            lv_hitboxUnit = UnitGroupUnit(lv_hitboxGroup, lv_i);
            if (((lv_kineticOne >= 1) && (lv_kineticOne <= 9))) {
                PlayerCreateEffectUnit(0, lib3_gv_kineticTranslate3[(lv_directionIndex)][lv_kineticOne], lv_hitboxUnit);
                lib3_gv_totalLiveKinetics += 1;
            }
            if (((lv_kineticDotTen >= 1) && (lv_kineticDotTen <= 9))) {
                PlayerCreateEffectUnit(0, lib3_gv_kineticTranslate2[(lv_directionIndex)][lv_kineticDotTen], lv_hitboxUnit);
                lib3_gv_totalLiveKinetics += 1;
            }
            if (((lv_kineticDotHundred >= 1) && (lv_kineticDotHundred <= 9))) {
                PlayerCreateEffectUnit(0, lib3_gv_kineticTranslate[(lv_directionIndex)][lv_kineticDotHundred], lv_hitboxUnit);
                lib3_gv_totalLiveKinetics += 1;
            }
        }
    }
}

void lib3_gf_HeroSetHurtboxArea (unit lp_unit) {
    // Variable Declarations
    int lv_p;
    fixed lv_velocityY;
    fixed lv_hurtboxDefaultHeightOffset;
    fixed lv_hurtboxHeight;
    fixed lv_hurtboxWidth;
    fixed lv_hurtboxOffset;
    point lv_hurtboxTestpoint;

    // Variable Initialization

    // Implementation
    lv_p = UnitGetOwner(lp_unit);
    lv_velocityY = lib3_gf_PresetCustomValue2(lp_unit);
    lv_hurtboxDefaultHeightOffset = -0.8;
    if ((lv_velocityY <= lv_hurtboxDefaultHeightOffset)) {
        lv_hurtboxTestpoint = lib3_gf_UnitGetPresetPointNext(lp_unit, lib3_ge_UnitCollisionTestPoint_Origin);
        if (((RegionContainsPoint(lib3_gv_gameCollisionRegion, lv_hurtboxTestpoint) == true) || (RegionContainsPoint(lib3_gv_gameCollisionRegionOneWay, lv_hurtboxTestpoint) == true))) {
            UnitCreateEffectPoint(lp_unit, "HeroStompHurtboxArea", UnitGetPosition(lp_unit));
        }
        lv_hurtboxHeight = AbsF(lv_velocityY);
        lv_hurtboxOffset = (((lv_velocityY + 0.8) / 2.0) - 0.0);
        CatalogReferenceSet("Effect,HeroStompHurtboxOffset,InitialOffset", lv_p, ("0," + FixedToString(lv_hurtboxOffset, c_fixedPrecisionAny) + ",0"));
        CatalogReferenceSet("Effect,HeroStompHurtboxArea,AreaArray[0].RectangleHeight", lv_p, FixedToString(lv_hurtboxHeight, c_fixedPrecisionAny));
    }
}

void lib3_gf_BlockUnitSpawnCarriedObejct (unit lp_collisionUnit) {
    // Variable Declarations
    unit lv_spawnedObject;

    // Variable Initialization

    // Implementation
    if ((UnitHasBehavior2(lp_collisionUnit, "BlockCarriesCoins") == true)) {
        SoundPlayAtPointForPlayer(SoundLink("GameQuestionBlockSpawnObjectSound", -1), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(lp_collisionUnit), 0.0, 100.0, 0.0);
        UnitBehaviorRemove(lp_collisionUnit, "BlockCarriesCoins", 1);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "ObjectCoin", c_unitCreateIgnorePlacement, 0, UnitGetPosition(lp_collisionUnit));
        lv_spawnedObject = UnitLastCreated();
        lib3_gf_AddVerticalVelocity(lv_spawnedObject, 0.6);
        lib3_gf_AddHorizontalVelocity(lv_spawnedObject, RandomFixed(-0.2, 0.2));
    }
    if ((UnitHasBehavior2(lp_collisionUnit, "BlockCarriesHealthGlobe") == true)) {
        SoundPlayAtPointForPlayer(SoundLink("GameQuestionBlockSpawnObjectSound", -1), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(lp_collisionUnit), 0.0, 100.0, 0.0);
        UnitBehaviorRemove(lp_collisionUnit, "BlockCarriesHealthGlobe", 1);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "ObjectHealthGlobe", c_unitCreateIgnorePlacement, 0, UnitGetPosition(lp_collisionUnit));
        lv_spawnedObject = UnitLastCreated();
        lib3_gf_AddVerticalVelocity(lv_spawnedObject, 0.6);
        lib3_gf_AddHorizontalVelocity(lv_spawnedObject, RandomFixed(-0.2, 0.2));
    }
}

void lib3_gf_RemoveCollisionUnitData (unit lp_collisionUnit) {
    int autoF4336479_ae;
    int autoF4336479_ai;

    // Variable Declarations
    int lv_collisionIndexRemoved;
    int lv_collisionIndex;
    int lv_collisionIndexNext;

    // Variable Initialization

    // Implementation
    UnitGroupRemove(lib3_gv_staticCollisionUnits, lp_collisionUnit);
    lv_collisionIndexRemoved = FixedToInt(lib1_gf_PresetCustomValue(lp_collisionUnit, lib3_ge_UnitCustomValue_CollisionIndex));
    autoF4336479_ae = lib3_gv_staticCollisionArrayCount;
    autoF4336479_ai = 1;
    lv_collisionIndex = lv_collisionIndexRemoved;
    for ( ; ( (autoF4336479_ai >= 0 && lv_collisionIndex <= autoF4336479_ae) || (autoF4336479_ai <= 0 && lv_collisionIndex >= autoF4336479_ae) ) ; lv_collisionIndex += autoF4336479_ai ) {
        lv_collisionIndexNext = (lv_collisionIndex + 1);
        lib3_gv_staticCollision[lv_collisionIndex].lv_unit = lib3_gv_staticCollision[lv_collisionIndexNext].lv_unit;
        lib3_gv_staticCollision[lv_collisionIndex].lv_region = lib3_gv_staticCollision[lv_collisionIndexNext].lv_region;
        lib3_gv_staticCollision[lv_collisionIndex].lv_oneWayState = lib3_gv_staticCollision[lv_collisionIndexNext].lv_oneWayState;
        lib1_gf_ModifyUnitCustomValue2(lib3_gv_staticCollision[lv_collisionIndex].lv_unit, lib3_ge_UnitCustomValue_CollisionIndex, IntToFixed(lv_collisionIndex));
    }
    lib3_gv_staticCollisionArrayCount -= 1;
    lib3_gf_RedrawGameCollisionRegion();
}

void lib3_gf_BlockUnitBounceUnitsOnBlock (unit lp_collisionUnit) {
    // Variable Declarations
    region lv_bounceRegion;
    fixed lv_bounceRegionHeight;
    fixed lv_minX;
    fixed lv_maxX;
    fixed lv_minY;
    fixed lv_maxY;

    // Variable Initialization

    // Implementation
    lv_bounceRegionHeight = 1.0;
    lv_minX = lib3_gf_XOfCollisionUnitLeft(lp_collisionUnit);
    lv_maxX = lib3_gf_XOfCollisionUnitRight(lp_collisionUnit);
    lv_minY = (lib3_gf_YOfCollisionUnitTop(lp_collisionUnit) - lv_bounceRegionHeight);
    lv_maxY = (lib3_gf_YOfCollisionUnitTop(lp_collisionUnit) + (lv_bounceRegionHeight * 0.5));
    lv_bounceRegion = RegionRect(lv_minX, lv_minY, lv_maxX, lv_maxY);
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, lv_bounceRegion, UnitFilter(0, 0, (1 << c_targetFilterWorker), 0), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        lib3_gf_AddVerticalVelocity(UnitGroupLoopCurrent(), 0.6);
        lib3_gf_AddHorizontalVelocity(UnitGroupLoopCurrent(), RandomFixed(-0.2, 0.2));
    }
    UnitGroupLoopEnd();
}

void lib3_gf_RedrawGameCollisionRegion () {
    int autoA4460AE1_ae;
    int autoA4460AE1_ai;

    // Variable Declarations
    int lv_collisionIndex;

    // Variable Initialization

    // Implementation
    lib3_gv_gameCollisionRegion = RegionCircle(Point(0.0, 0.0), 0.1);
    lib3_gv_gameCollisionRegionOneWay = RegionCircle(Point(0.0, 0.0), 0.1);
    autoA4460AE1_ae = lib3_gv_staticCollisionArrayCount;
    autoA4460AE1_ai = 1;
    lv_collisionIndex = 1;
    for ( ; ( (autoA4460AE1_ai >= 0 && lv_collisionIndex <= autoA4460AE1_ae) || (autoA4460AE1_ai <= 0 && lv_collisionIndex >= autoA4460AE1_ae) ) ; lv_collisionIndex += autoA4460AE1_ai ) {
        if ((lib3_gv_staticCollision[lv_collisionIndex].lv_oneWayState == true)) {
            RegionAddRegion(lib3_gv_gameCollisionRegionOneWay, lib3_gv_staticCollision[lv_collisionIndex].lv_region);
        }
        else {
            RegionAddRegion(lib3_gv_gameCollisionRegion, lib3_gv_staticCollision[lv_collisionIndex].lv_region);
        }
    }
}

trigger auto_lib3_gf_PatrollerAIController_Trigger = null;
unit auto_lib3_gf_PatrollerAIController_lp_aIUnit;

void lib3_gf_PatrollerAIController (unit lp_aIUnit) {
    auto_lib3_gf_PatrollerAIController_lp_aIUnit = lp_aIUnit;

    if (auto_lib3_gf_PatrollerAIController_Trigger == null) {
        auto_lib3_gf_PatrollerAIController_Trigger = TriggerCreate("auto_lib3_gf_PatrollerAIController_TriggerFunc");
    }

    TriggerExecute(auto_lib3_gf_PatrollerAIController_Trigger, false, false);
}

bool auto_lib3_gf_PatrollerAIController_TriggerFunc (bool testConds, bool runActions) {
    unit lp_aIUnit = auto_lib3_gf_PatrollerAIController_lp_aIUnit;

    // Variable Declarations
    fixed lv_patrollingPauseDuration;
    fixed lv_patrollingDistance;

    // Variable Initialization

    // Implementation
    lv_patrollingPauseDuration = 0.375;
    lv_patrollingDistance = 12.0;
    while ((UnitIsAlive(lp_aIUnit) == true)) {
        lib3_gf_UnitSet2DFacing(lp_aIUnit, lib3_ge__2DUnitFacing_Left);
        lib3_gf_UnitIssueWalkOrder(lp_aIUnit, (-1.0 * lv_patrollingDistance));
        Wait(lv_patrollingPauseDuration, c_timeGame);
        lib3_gf_UnitSet2DFacing(lp_aIUnit, lib3_ge__2DUnitFacing_Right);
        lib3_gf_UnitIssueWalkOrder(lp_aIUnit, lv_patrollingDistance);
        Wait(lv_patrollingPauseDuration, c_timeGame);
    }
    return true;
}

trigger auto_lib3_gf_RoverAIController_Trigger = null;
unit auto_lib3_gf_RoverAIController_lp_aIUnit;

void lib3_gf_RoverAIController (unit lp_aIUnit) {
    auto_lib3_gf_RoverAIController_lp_aIUnit = lp_aIUnit;

    if (auto_lib3_gf_RoverAIController_Trigger == null) {
        auto_lib3_gf_RoverAIController_Trigger = TriggerCreate("auto_lib3_gf_RoverAIController_TriggerFunc");
    }

    TriggerExecute(auto_lib3_gf_RoverAIController_Trigger, false, false);
}

bool auto_lib3_gf_RoverAIController_TriggerFunc (bool testConds, bool runActions) {
    unit lp_aIUnit = auto_lib3_gf_RoverAIController_lp_aIUnit;

    // Variable Declarations
    fixed lv_rovingPauseDuration;
    fixed lv_rovingDistance;

    // Variable Initialization

    // Implementation
    lv_rovingPauseDuration = 0.125;
    lv_rovingDistance = 256.0;
    while ((UnitIsAlive(lp_aIUnit) == true)) {
        lib3_gf_UnitSet2DFacing(lp_aIUnit, lib3_ge__2DUnitFacing_Left);
        lib3_gf_UnitIssueWalkOrder(lp_aIUnit, (-1.0 * lv_rovingDistance));
        Wait(lv_rovingPauseDuration, c_timeGame);
        lib3_gf_UnitSet2DFacing(lp_aIUnit, lib3_ge__2DUnitFacing_Right);
        lib3_gf_UnitIssueWalkOrder(lp_aIUnit, lv_rovingDistance);
        Wait(lv_rovingPauseDuration, c_timeGame);
    }
    return true;
}

void lib3_gf_UnitIssueWalkOrder (unit lp_unit, fixed lp_orderTargetOffset) {
    fixed auto0D93E240_ae;
    fixed auto0D93E240_ai;

    // Variable Declarations
    fixed lv_i;
    fixed lv_walkSpeedIncrement;
    fixed lv_targetSign;

    // Variable Initialization

    // Implementation
    lv_walkSpeedIncrement = lib1_gf_PresetCustomValue(lp_unit, lib3_ge_UnitCustomValue_GroundSpeed);
    lv_targetSign = lib1_gf_SignReal(lp_orderTargetOffset);
    auto0D93E240_ae = AbsF(lp_orderTargetOffset);
    auto0D93E240_ai = lv_walkSpeedIncrement;
    lv_i = 0.0;
    for ( ; ( (auto0D93E240_ai >= 0 && lv_i <= auto0D93E240_ae) || (auto0D93E240_ai <= 0 && lv_i >= auto0D93E240_ae) ) ; lv_i += auto0D93E240_ai ) {
        if ((lv_targetSign == -1.0) && (RegionContainsPoint(lib3_gv_gameCollisionRegion, lib3_gf_UnitGetPresetPointNext(lp_unit, lib3_ge_UnitCollisionTestPoint_LeftLow)) == true)) {
            break;
        }
        if ((lv_targetSign == 1.0) && (RegionContainsPoint(lib3_gv_gameCollisionRegion, lib3_gf_UnitGetPresetPointNext(lp_unit, lib3_ge_UnitCollisionTestPoint_RightLow)) == true)) {
            break;
        }
        if ((RegionContainsPoint(lib3_gv_gameCollisionRegion, Point((PointGetX(UnitGetPosition(lp_unit)) + (4.0 * lib3_gf_PresetCustomValue(lp_unit))), PointGetY(UnitGetPosition(lp_unit)))) == false)) {
            break;
        }
        if ((UnitIsAlive(lp_unit) == true)) {
            UnitBehaviorAdd(lp_unit, "UnitStateWalkingAnimation", lp_unit, 1);
            if ((lib1_gf_PresetCustomValue(lp_unit, lib3_ge_UnitCustomValue_GroundedState) == BoolToInt(true))) {
                lib3_gf_AddHorizontalVelocity(lp_unit, (lv_targetSign * lib1_gf_PresetCustomValue(lp_unit, lib3_ge_UnitCustomValue_GroundSpeed)));
            }
            else {
                lib3_gf_AddHorizontalVelocity(lp_unit, (lv_targetSign * lib1_gf_PresetCustomValue(lp_unit, lib3_ge_UnitCustomValue_AirSpeed)));
            }
            Wait(0.0625, c_timeGame);
        }
        else {
            break;
        }
    }
}

string lib3_gf_PresetGenericEvent (int lp_event) {
    // Implementation
    return IntToString((lp_event));
}

string lib3_gf_PresetGenericEvent2 (int lp_event, int lp_parameter) {
    // Implementation
    return TriggerEventParamName(IntToString((lp_event)), IntToString((lp_parameter)));
}

void lib3_gf_SendGenericEventPreset (int lp_event) {
    // Implementation
    TriggerSendEvent(IntToString((lp_event)));
}

void lib3_gf_SetStaticCollisionVisibility (bool lp_show) {
    // Implementation
    if ((lp_show == true)) {
        libNtve_gf_SetUpgradeLevelForPlayer(0, "DebugStaticCollisionAreaOff", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(0, "DebugStaticCollisionAreaOn", 1);
    }
    else {
        libNtve_gf_SetUpgradeLevelForPlayer(0, "DebugStaticCollisionAreaOn", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(0, "DebugStaticCollisionAreaOff", 1);
    }
}

void lib3_gf_DebugUnitCollisionTestsNext (unit lp_unit) {
    // Implementation
    if ((lib1_gf_PrintCategoryIsEnabled(lib1_ge_DebugCategory_Global) == true)) {
        lib1_gf_DebugPoint(lib3_gf_UnitGetPresetPointNext(lp_unit, lib3_ge_UnitCollisionTestPoint_Origin));
        lib1_gf_DebugPoint(lib3_gf_UnitGetPresetPointNext(lp_unit, lib3_ge_UnitCollisionTestPoint_LeftHigh));
        lib1_gf_DebugPoint(lib3_gf_UnitGetPresetPointNext(lp_unit, lib3_ge_UnitCollisionTestPoint_LeftLow));
        lib1_gf_DebugPoint(lib3_gf_UnitGetPresetPointNext(lp_unit, lib3_ge_UnitCollisionTestPoint_RightHigh));
        lib1_gf_DebugPoint(lib3_gf_UnitGetPresetPointNext(lp_unit, lib3_ge_UnitCollisionTestPoint_RightLow));
        lib1_gf_DebugPoint(lib3_gf_UnitGetPresetPointNext(lp_unit, lib3_ge_UnitCollisionTestPoint_Top));
    }
}

void lib3_gf_DebugUnitCollisionTests (unit lp_unit) {
    // Implementation
    if ((lib1_gf_PrintCategoryIsEnabled(lib1_ge_DebugCategory_Global) == true)) {
        lib1_gf_DebugPoint(lib3_gf_UnitGetCollisionTestPoint2(lp_unit, lib3_ge_UnitCollisionTestPoint_Origin));
        lib1_gf_DebugPoint(lib3_gf_UnitGetCollisionTestPoint2(lp_unit, lib3_ge_UnitCollisionTestPoint_LeftLow));
        lib1_gf_DebugPoint(lib3_gf_UnitGetCollisionTestPoint2(lp_unit, lib3_ge_UnitCollisionTestPoint_LeftHigh));
        lib1_gf_DebugPoint(lib3_gf_UnitGetCollisionTestPoint2(lp_unit, lib3_ge_UnitCollisionTestPoint_RightLow));
        lib1_gf_DebugPoint(lib3_gf_UnitGetCollisionTestPoint2(lp_unit, lib3_ge_UnitCollisionTestPoint_RightHigh));
        lib1_gf_DebugPoint(lib3_gf_UnitGetCollisionTestPoint2(lp_unit, lib3_ge_UnitCollisionTestPoint_Top));
    }
}

void lib3_gf_ConfigureDebugPanelforUnitPhysics (unit lp_unit, playergroup lp_targetPlayers) {
    int auto1534E422_ae;
    int auto1534E422_ai;
    int auto05E1EE6B_ae;
    int auto05E1EE6B_ai;

    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Implementation
    libNtve_gf_SetDialogItemText(lib1_gv_supportPanel.lv_header, StringExternal("Param/Value/lib_3_059A1AF1"), lp_targetPlayers);
    auto1534E422_ae = lib1_gv_supportPanel.lv_maxEntryCount;
    auto1534E422_ai = 1;
    lv_i = 1;
    for ( ; ( (auto1534E422_ai >= 0 && lv_i <= auto1534E422_ae) || (auto1534E422_ai <= 0 && lv_i >= auto1534E422_ae) ) ; lv_i += auto1534E422_ai ) {
        libNtve_gf_SetDialogItemText(lib1_gv_supportPanel.lv_field[(lv_i - 1)], StringToText(""), lp_targetPlayers);
        libNtve_gf_SetDialogItemText(lib1_gv_supportPanel.lv_value[(lv_i - 1)], StringToText(""), lp_targetPlayers);
    }
    libNtve_gf_SetDialogItemText(lib1_gv_supportPanel.lv_field[0], StringExternal("Param/Value/lib_3_F84B0EB7"), lp_targetPlayers);
    libNtve_gf_SetDialogItemText(lib1_gv_supportPanel.lv_field[1], StringExternal("Param/Value/lib_3_B9E78CA8"), lp_targetPlayers);
    libNtve_gf_SetDialogItemText(lib1_gv_supportPanel.lv_field[2], StringExternal("Param/Value/lib_3_B2BEFF3A"), lp_targetPlayers);
    libNtve_gf_SetDialogItemText(lib1_gv_supportPanel.lv_field[3], StringExternal("Param/Value/lib_3_72105690"), lp_targetPlayers);
    libNtve_gf_SetDialogItemText(lib1_gv_supportPanel.lv_field[4], StringExternal("Param/Value/lib_3_2AB4CEC7"), lp_targetPlayers);
    libNtve_gf_SetDialogItemText(lib1_gv_supportPanel.lv_field[5], StringExternal("Param/Value/lib_3_F32CCE1C"), lp_targetPlayers);
    libNtve_gf_SetDialogItemText(lib1_gv_supportPanel.lv_field[6], StringExternal("Param/Value/lib_3_E17E52A5"), lp_targetPlayers);
    auto05E1EE6B_ae = lib1_gv_supportPanel.lv_maxEntryCount;
    auto05E1EE6B_ai = 1;
    lv_i = 8;
    for ( ; ( (auto05E1EE6B_ai >= 0 && lv_i <= auto05E1EE6B_ae) || (auto05E1EE6B_ai <= 0 && lv_i >= auto05E1EE6B_ae) ) ; lv_i += auto05E1EE6B_ai ) {
        DialogControlSetVisible(lib1_gv_supportPanel.lv_entry[(lv_i - 1)], PlayerGroupAll(), false);
    }
}

void lib3_gf_ConfigureDebugPanelforUnitPhysics2 (unit lp_unit, playergroup lp_targetPlayers) {
    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Implementation
    if ((UnitIsAlive(lp_unit) == false)) {
        return ;
    }
    libNtve_gf_SetDialogItemText(lib1_gv_supportPanel.lv_value[0], StringToText((FixedToString(PointGetX(UnitGetPosition(lp_unit)), c_fixedPrecisionAny) + ", " + FixedToString(PointGetY(UnitGetPosition(lp_unit)), c_fixedPrecisionAny))), lp_targetPlayers);
    libNtve_gf_SetDialogItemText(lib1_gv_supportPanel.lv_value[1], StringToText(lib3_gf_ConvertUnitVelocityToString(lp_unit)), lp_targetPlayers);
    libNtve_gf_SetDialogItemText(lib1_gv_supportPanel.lv_value[2], StringToText(lib3_gf_ConvertUnitPhysicsStateToString(lp_unit)), lp_targetPlayers);
    libNtve_gf_SetDialogItemText(lib1_gv_supportPanel.lv_value[3], StringToText(lib3_gf_ConvertUnitGroundedStateToString(lp_unit)), lp_targetPlayers);
    libNtve_gf_SetDialogItemText(lib1_gv_supportPanel.lv_value[4], StringToText(FixedToString(lib1_gf_PresetCustomValue(lp_unit, lib3_ge_UnitCustomValue_JumpChargesCurrent), 0)), lp_targetPlayers);
    libNtve_gf_SetDialogItemText(lib1_gv_supportPanel.lv_value[5], StringToText(IntToString((lib3_gv_totalLiveKinetics2 + lib3_gv_totalLiveKinetics))), lp_targetPlayers);
    libNtve_gf_SetDialogItemText(lib1_gv_supportPanel.lv_value[6], StringToText(IntToString(UnitGroupCount(lib3_gv_activePhysicsUnits, c_unitCountAll))), lp_targetPlayers);
}

string lib3_gf_ConvertUnitVelocityToString (unit lp_unit) {
    // Variable Declarations
    string lv_velocityString;

    // Variable Initialization
    lv_velocityString = "";

    // Implementation
    lv_velocityString = (FixedToString(lib1_gf_PresetCustomValue(lp_unit, lib3_ge_UnitCustomValue_CurrentVelocityX), c_fixedPrecisionAny) + ", " + FixedToString(lib1_gf_PresetCustomValue(lp_unit, lib3_ge_UnitCustomValue_CurrentVelocityY), c_fixedPrecisionAny));
    return lv_velocityString;
}

string lib3_gf_ConvertUnitPhysicsStateToString (unit lp_unit) {
    // Variable Declarations
    string lv_stateString;

    // Variable Initialization
    lv_stateString = "";

    // Implementation
    if ((UnitGroupHasUnit(lib3_gv_activePhysicsUnits, lp_unit) == true)) {
        lv_stateString = "Active";
    }
    else {
        lv_stateString = "Stationary";
    }
    return lv_stateString;
}

string lib3_gf_ConvertUnitGroundedStateToString (unit lp_unit) {
    // Variable Declarations
    string lv_stateString;

    // Variable Initialization
    lv_stateString = "";

    // Implementation
    if ((lib1_gf_PresetCustomValue(lp_unit, lib3_ge_UnitCustomValue_GroundedState) == IntToFixed(BoolToInt(true)))) {
        lv_stateString = "Grounded";
    }
    else {
        lv_stateString = "Aerial";
    }
    return lv_stateString;
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: Each Game Tick
//--------------------------------------------------------------------------------------------------
bool lib3_gt_EachGameTick_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib3_gv_totalLiveKinetics = 0;
    PlayerGroupLoopBegin(PlayerGroupActive());
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        lib3_gf_PlayerResolveInput(PlayerGroupLoopCurrent());
    }
    PlayerGroupLoopEnd();
    UnitGroupLoopBegin(lib3_gv_activePhysicsUnits);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        lib1_gf_ModifyUnitCustomValue2(UnitGroupLoopCurrent(), lib3_ge_UnitCustomValue_StoredVelocityX, 0.0);
        lib1_gf_ModifyUnitCustomValue2(UnitGroupLoopCurrent(), lib3_ge_UnitCustomValue_StoredVelocityY, 0.0);
        if ((lib3_gf_UnitIsInMotion(UnitGroupLoopCurrent()) == true)) {
            if ((lib1_gf_PresetCustomValue(UnitGroupLoopCurrent(), lib3_ge_UnitCustomValue_GroundedState) == BoolToInt(true))) {
                lib3_gf_SetUnitHorizontalVelocity(UnitGroupLoopCurrent(), (lib3_gf_PresetCustomValue(UnitGroupLoopCurrent()) * lib3_gv_game.lv_friction));
            }
            else {
                if ((UnitGetType(UnitGroupLoopCurrent()) != "ObjectCoin")) {
                    lib3_gf_SetUnitHorizontalVelocity(UnitGroupLoopCurrent(), (lib3_gf_PresetCustomValue(UnitGroupLoopCurrent()) * lib3_gv_game.lv_airResistance));
                }
            }
            if ((UnitGetType(UnitGroupLoopCurrent()) == "Hero")) {
                lib3_gf_HeroSetHurtboxArea(UnitGroupLoopCurrent());
            }
            if ((lib1_gf_PresetCustomValue(UnitGroupLoopCurrent(), lib3_ge_UnitCustomValue_IgnoreCollisionState) == IntToFixed(BoolToInt(false)))) {
                lib3_gf_UnitResolveSpeculativeContact(UnitGroupLoopCurrent());
            }
            lib3_gf_TranslateUnit(UnitGroupLoopCurrent());
            if ((lib1_gf_PresetCustomValue(UnitGroupLoopCurrent(), lib3_ge_UnitCustomValue_IgnoreCollisionState) == IntToFixed(BoolToInt(false)))) {
                lib3_gf_UnitResolveHorizontalCollision(UnitGroupLoopCurrent());
                lib3_gf_UnitResolveVerticalCollision(UnitGroupLoopCurrent());
            }
            lib3_gf_ResolveGravityForUnit(UnitGroupLoopCurrent());
            if ((lib1_gf_PresetCustomValue(UnitGroupLoopCurrent(), lib3_ge_UnitCustomValue_Restitution) > 0.0)) {
                lib3_gf_ResolveRestitutionForUnit(UnitGroupLoopCurrent());
            }
        }
    }
    UnitGroupLoopEnd();
    lib3_gf_ConfigureDebugPanelforUnitPhysics2(lib3_gv_player[1].lv_hero, PlayerGroupSingle(1));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib3_gt_EachGameTick_Init () {
    lib3_gt_EachGameTick = TriggerCreate("lib3_gt_EachGameTick_Func");
    TriggerEnable(lib3_gt_EachGameTick, false);
    TriggerAddEventTimePeriodic(lib3_gt_EachGameTick, 0.0625, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Input Key Down
//--------------------------------------------------------------------------------------------------
bool lib3_gt_PlayerInputKeyDown_Func (bool testConds, bool runActions) {
    int auto57691DAB_val;

    // Variable Declarations
    int lv_p;
    unit lv_targetUnit;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_p = EventPlayer();
    lv_targetUnit = lib3_gv_player[lv_p].lv_hero;
    auto57691DAB_val = EventKeyPressed();
    if (auto57691DAB_val == c_keyW) {
        lib3_gv_player[lv_p].lv_input_KeyW_isPressed = true;
    }
    else if (auto57691DAB_val == c_keyS) {
        if ((lib3_gv_player[lv_p].lv_input_KeyS_isPressed == false)) {
            lib3_gv_player[lv_p].lv_input_KeyS_isPressed = true;
            lib3_gv_player[lv_p].lv_input_KeyS_isHeld = true;
            Wait(0.25, c_timeGame);
            lib3_gv_player[lv_p].lv_input_KeyS_isHeld = false;
        }
    }
    else if (auto57691DAB_val == c_keyA) {
        if ((lib3_gv_player[lv_p].lv_input_KeyA_isPressed == false)) {
            lib3_gv_player[lv_p].lv_input_KeyA_isPressed = true;
            lib3_gf_HeroSetFacingFromInput(lv_targetUnit);
        }
    }
    else if (auto57691DAB_val == c_keyD) {
        if ((lib3_gv_player[lv_p].lv_input_KeyD_isPressed == false)) {
            lib3_gv_player[lv_p].lv_input_KeyD_isPressed = true;
            lib3_gf_HeroSetFacingFromInput(lv_targetUnit);
        }
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib3_gt_PlayerInputKeyDown_Init () {
    lib3_gt_PlayerInputKeyDown = TriggerCreate("lib3_gt_PlayerInputKeyDown_Func");
    TriggerAddEventKeyPressed(lib3_gt_PlayerInputKeyDown, c_playerAny, c_keyW, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
    TriggerAddEventKeyPressed(lib3_gt_PlayerInputKeyDown, c_playerAny, c_keyA, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
    TriggerAddEventKeyPressed(lib3_gt_PlayerInputKeyDown, c_playerAny, c_keyS, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
    TriggerAddEventKeyPressed(lib3_gt_PlayerInputKeyDown, c_playerAny, c_keyD, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Input Key Up
//--------------------------------------------------------------------------------------------------
bool lib3_gt_PlayerInputKeyUp_Func (bool testConds, bool runActions) {
    int auto8214855C_val;

    // Variable Declarations
    int lv_p;
    unit lv_targetUnit;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_p = EventPlayer();
    lv_targetUnit = lib3_gv_player[lv_p].lv_hero;
    auto8214855C_val = EventKeyPressed();
    if (auto8214855C_val == c_keyW) {
        lib3_gv_player[lv_p].lv_input_KeyW_isPressed = false;
    }
    else if (auto8214855C_val == c_keyS) {
        lib3_gv_player[lv_p].lv_input_KeyS_isPressed = false;
    }
    else if (auto8214855C_val == c_keyA) {
        lib3_gv_player[lv_p].lv_input_KeyA_isPressed = false;
        UnitBehaviorRemove(lv_targetUnit, "UnitStateWalkingAnimation", 1);
        lib3_gf_HeroSetFacingFromInput(lv_targetUnit);
    }
    else if (auto8214855C_val == c_keyD) {
        lib3_gv_player[lv_p].lv_input_KeyD_isPressed = false;
        UnitBehaviorRemove(lv_targetUnit, "UnitStateWalkingAnimation", 1);
        lib3_gf_HeroSetFacingFromInput(lv_targetUnit);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib3_gt_PlayerInputKeyUp_Init () {
    lib3_gt_PlayerInputKeyUp = TriggerCreate("lib3_gt_PlayerInputKeyUp_Func");
    TriggerAddEventKeyPressed(lib3_gt_PlayerInputKeyUp, c_playerAny, c_keyW, false, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
    TriggerAddEventKeyPressed(lib3_gt_PlayerInputKeyUp, c_playerAny, c_keyA, false, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
    TriggerAddEventKeyPressed(lib3_gt_PlayerInputKeyUp, c_playerAny, c_keyS, false, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
    TriggerAddEventKeyPressed(lib3_gt_PlayerInputKeyUp, c_playerAny, c_keyD, false, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit Enters Bottomless Pit
//--------------------------------------------------------------------------------------------------
bool lib3_gt_UnitEntersBottomlessPit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;
    fixed lv_yofDeathRegionHeight;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), 0, UnitFilter(0, (1 << (c_targetFilterMapBoss - 32)), 0, 0)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_p = UnitGetOwner(EventUnit());
    lv_yofDeathRegionHeight = (libNtve_gf_HeightOfRegion(RegionFromId(2)) + 5.0);
    UnitKill(EventUnit());
    if ((UnitGetType(EventUnit()) == "Hero")) {
        lib3_gf_CreateUnitDeathFlareAtPoint(Point(PointGetX(UnitGetPosition(EventUnit())), lv_yofDeathRegionHeight));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib3_gt_UnitEntersBottomlessPit_Init () {
    lib3_gt_UnitEntersBottomlessPit = TriggerCreate("lib3_gt_UnitEntersBottomlessPit_Func");
    TriggerAddEventUnitRegion(lib3_gt_UnitEntersBottomlessPit, null, RegionFromId(2), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit Dies
//--------------------------------------------------------------------------------------------------
bool lib3_gt_UnitDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_dyingUnit;
    int lv_p;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitFilterMatch(EventUnit(), 0, UnitFilter(0, (1 << (c_targetFilterMapBoss - 32)), (1 << c_targetFilterUser1), 0)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_dyingUnit = EventUnit();
    lv_p = UnitGetOwner(lv_dyingUnit);
    if ((DataTableValueExists(true, lib3_gf_UnitGetHitboxGroupCode(lv_dyingUnit)) == true)) {
        lib3_gf_UnitRemoveHitboxGroup(lv_dyingUnit);
    }
    if ((UnitGetType(lv_dyingUnit) == "Hero")) {
        PlayerOptionOverride(lv_p, "camerafollow", "1");
        Wait(2.0, c_timeGame);
        lib3_gf_HeroRespawnForPlayer(lib3_gv_player[lv_p].lv_respawnPoint, lv_p);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib3_gt_UnitDies_Init () {
    lib3_gt_UnitDies = TriggerCreate("lib3_gt_UnitDies_Func");
    TriggerAddEventUnitDied(lib3_gt_UnitDies, null);
    TriggerAddEventUnitRemoved(lib3_gt_UnitDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Coin Enters Map
//--------------------------------------------------------------------------------------------------
bool lib3_gt_CoinEntersMap_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_object;
    int lv_p;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "ObjectCoin"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_object = EventUnit();
    lib1_gf_ModifyUnitCustomValue2(lv_object, lib3_ge_UnitCustomValue_Height, lib3_gv_entityCoin.lv_height);
    lib1_gf_ModifyUnitCustomValue2(lv_object, lib3_ge_UnitCustomValue_Width, lib3_gv_entityCoin.lv_width);
    lib1_gf_ModifyUnitCustomValue2(lv_object, lib3_ge_UnitCustomValue_Restitution, lib3_gv_entityCoin.lv_restitution);
    lib1_gf_ModifyUnitCustomValue2(lv_object, lib3_ge_UnitCustomValue_HalfHeight, (lib3_gv_entityCoin.lv_height * 0.5));
    lib1_gf_ModifyUnitCustomValue2(lv_object, lib3_ge_UnitCustomValue_HalfWidth, (lib3_gv_entityCoin.lv_width * 0.5));
    lib1_gf_ModifyUnitCustomValue2(lv_object, lib3_ge_UnitCustomValue_LowHeight, (lib3_gv_entityCoin.lv_height * lib3_gv_speculativeContactStep2));
    lib1_gf_ModifyUnitCustomValue2(lv_object, lib3_ge_UnitCustomValue_HighHeight, (lib3_gv_entityCoin.lv_height * lib3_gv_speculativeContactStep3));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib3_gt_CoinEntersMap_Init () {
    lib3_gt_CoinEntersMap = TriggerCreate("lib3_gt_CoinEntersMap_Func");
    TriggerAddEventUnitRegion(lib3_gt_CoinEntersMap, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Coin Pickup
//--------------------------------------------------------------------------------------------------
bool lib3_gt_HeroCoinPickup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_coinUnit;
    int lv_p;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(EventPlayerEffectUsedUnit(c_effectUnitCaster)) == true))) {
            return false;
        }

        if (!((UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitTarget)) == "HeroHitboxUnit"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_coinUnit = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_p = UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitTarget));
    UnitSetPosition(lv_coinUnit, EventPlayerEffectUsedPoint(c_effectLocationSourcePoint), true);
    lib3_gv_player[lv_p].lv_coins += 1;
    libNtve_gf_SetDialogItemText(lib3_gv_uI.lv_coinsCollected, IntToText(lib3_gv_player[lv_p].lv_coins), PlayerGroupSingle(lv_p));
    lib3_gf_PlayerAddPoints(lv_p, 20);
    SoundPlayAtPointForPlayer(SoundLink("UICoinCollect", -1), c_maxPlayers, PlayerGroupSingle(lv_p), UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster)), 0.0, 100.0, 0.0);
    lib3_gf_SetUnitVerticalVelocity(lv_coinUnit, 0.0);
    lib3_gf_SetUnitHorizontalVelocity(lv_coinUnit, 0.0);
    lib1_gf_ModifyUnitCustomValue2(lv_coinUnit, lib3_ge_UnitCustomValue_GroundedState, IntToFixed(BoolToInt(true)));
    UnitKill(lv_coinUnit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib3_gt_HeroCoinPickup_Init () {
    lib3_gt_HeroCoinPickup = TriggerCreate("lib3_gt_HeroCoinPickup_Func");
    TriggerAddEventPlayerEffectUsed(lib3_gt_HeroCoinPickup, c_playerAny, "ObjectCoinSearchHook");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Health Globe Enters Map
//--------------------------------------------------------------------------------------------------
bool lib3_gt_HealthGlobeEntersMap_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_object;
    int lv_p;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "ObjectHealthGlobe"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_object = EventUnit();
    lib1_gf_ModifyUnitCustomValue2(lv_object, lib3_ge_UnitCustomValue_Height, lib3_gv_entityHealthGlobe.lv_height);
    lib1_gf_ModifyUnitCustomValue2(lv_object, lib3_ge_UnitCustomValue_Width, lib3_gv_entityHealthGlobe.lv_width);
    lib1_gf_ModifyUnitCustomValue2(lv_object, lib3_ge_UnitCustomValue_Restitution, lib3_gv_entityHealthGlobe.lv_restitution);
    lib1_gf_ModifyUnitCustomValue2(lv_object, lib3_ge_UnitCustomValue_HalfHeight, (lib3_gv_entityHealthGlobe.lv_height * 0.5));
    lib1_gf_ModifyUnitCustomValue2(lv_object, lib3_ge_UnitCustomValue_HalfWidth, (lib3_gv_entityHealthGlobe.lv_width * 0.5));
    lib1_gf_ModifyUnitCustomValue2(lv_object, lib3_ge_UnitCustomValue_LowHeight, (lib3_gv_entityHealthGlobe.lv_height * lib3_gv_speculativeContactStep2));
    lib1_gf_ModifyUnitCustomValue2(lv_object, lib3_ge_UnitCustomValue_HighHeight, (lib3_gv_entityHealthGlobe.lv_height * lib3_gv_speculativeContactStep3));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib3_gt_HealthGlobeEntersMap_Init () {
    lib3_gt_HealthGlobeEntersMap = TriggerCreate("lib3_gt_HealthGlobeEntersMap_Func");
    TriggerAddEventUnitRegion(lib3_gt_HealthGlobeEntersMap, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Health Pickup
//--------------------------------------------------------------------------------------------------
bool lib3_gt_HeroHealthPickup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_healthGlobeUnit;
    unit lv_targetUnit;
    int lv_p;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(EventPlayerEffectUsedUnit(c_effectUnitCaster)) == true))) {
            return false;
        }

        if (!((UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitTarget)) == "HeroHitboxUnit"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_healthGlobeUnit = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_targetUnit = lib3_gf_UnitGetParent(EventPlayerEffectUsedUnit(c_effectUnitTarget));
    lv_p = UnitGetOwner(lv_targetUnit);
    UnitSetPosition(lv_healthGlobeUnit, EventPlayerEffectUsedPoint(c_effectLocationSourcePoint), true);
    lib3_gf_PlayerAddPoints(lv_p, 100);
    SoundPlayAtPointForPlayer(SoundLink("UIHealthGlobeCollect", -1), c_maxPlayers, PlayerGroupSingle(lv_p), UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster)), 0.0, 100.0, 0.0);
    libNtve_gf_SendActorMessageToUnit(lv_targetUnit, "Create ObjectHealthGlobeHeal");
    lib3_gf_SetUnitVerticalVelocity(lv_healthGlobeUnit, 0.0);
    lib3_gf_SetUnitHorizontalVelocity(lv_healthGlobeUnit, 0.0);
    lib1_gf_ModifyUnitCustomValue2(lv_healthGlobeUnit, lib3_ge_UnitCustomValue_GroundedState, IntToFixed(BoolToInt(true)));
    UnitBehaviorAdd(lv_targetUnit, "ObjectHealthGlobeRegen", lv_healthGlobeUnit, 1);
    UnitKill(lv_healthGlobeUnit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib3_gt_HeroHealthPickup_Init () {
    lib3_gt_HeroHealthPickup = TriggerCreate("lib3_gt_HeroHealthPickup_Func");
    TriggerAddEventPlayerEffectUsed(lib3_gt_HeroHealthPickup, c_playerAny, "ObjectHealthGlobeSearchHook");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Enters Map
//--------------------------------------------------------------------------------------------------
bool lib3_gt_HeroEntersMap_Func (bool testConds, bool runActions) {
    fixed auto65E93F56_ae;
    fixed auto65E93F56_ai;

    // Variable Declarations
    unit lv_hero;
    int lv_p;
    fixed lv_hitboxHeightOffset;
    unitgroup lv_hitboxUnits;

    // Variable Initialization
    lv_hitboxUnits = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Hero"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_hero = EventUnit();
    lv_p = UnitGetOwner(lv_hero);
    lib1_gf_ModifyUnitCustomValue2(lv_hero, lib3_ge_UnitCustomValue_Height, lib3_gv_entityHero.lv_height);
    lib1_gf_ModifyUnitCustomValue2(lv_hero, lib3_ge_UnitCustomValue_Width, lib3_gv_entityHero.lv_width);
    lib1_gf_ModifyUnitCustomValue2(lv_hero, lib3_ge_UnitCustomValue_GroundSpeed, lib3_gv_entityHero.lv_groundSpeed);
    lib1_gf_ModifyUnitCustomValue2(lv_hero, lib3_ge_UnitCustomValue_AirSpeed, lib3_gv_entityHero.lv_airSpeed);
    lib1_gf_ModifyUnitCustomValue2(lv_hero, lib3_ge_UnitCustomValue_JumpForce, lib3_gv_entityHero.lv_jumpForce);
    lib1_gf_ModifyUnitCustomValue2(lv_hero, lib3_ge_UnitCustomValue_JumpForceSecondary, lib3_gv_entityHero.lv_jumpForceSecondary);
    lib1_gf_ModifyUnitCustomValue2(lv_hero, lib3_ge_UnitCustomValue_JumpChargesMax, lib3_gv_entityHero.lv_jumpChargesMax);
    lib1_gf_ModifyUnitCustomValue2(lv_hero, lib3_ge_UnitCustomValue_JumpChargesCurrent, lib3_gv_entityHero.lv_jumpChargesCurrent);
    lib1_gf_ModifyUnitCustomValue2(lv_hero, lib3_ge_UnitCustomValue_HalfHeight, (lib3_gv_entityHero.lv_height * 0.5));
    lib1_gf_ModifyUnitCustomValue2(lv_hero, lib3_ge_UnitCustomValue_HalfWidth, (lib3_gv_entityHero.lv_width * 0.5));
    lib1_gf_ModifyUnitCustomValue2(lv_hero, lib3_ge_UnitCustomValue_LowHeight, (lib3_gv_entityHero.lv_height * lib3_gv_speculativeContactStep2));
    lib1_gf_ModifyUnitCustomValue2(lv_hero, lib3_ge_UnitCustomValue_HighHeight, (lib3_gv_entityHero.lv_height * lib3_gv_speculativeContactStep3));
    lib1_gf_ModifyUnitCustomValue2(lv_hero, lib3_ge_UnitCustomValue_Facing, (lib3_ge__2DUnitFacing_Right));
    UnitGroupAdd(lib3_gv_activePhysicsUnits, lv_hero);
    CameraFollowUnitGroup(lv_p, libNtve_gf_ConvertUnitToUnitGroup(lv_hero), true, false);
    PlayerOptionOverride(lv_p, "camerafollow", "1");
    auto65E93F56_ae = lib1_gf_PresetCustomValue(lv_hero, lib3_ge_UnitCustomValue_Height);
    auto65E93F56_ai = 0.4375;
    lv_hitboxHeightOffset = 0.0;
    for ( ; ( (auto65E93F56_ai >= 0 && lv_hitboxHeightOffset <= auto65E93F56_ae) || (auto65E93F56_ai <= 0 && lv_hitboxHeightOffset >= auto65E93F56_ae) ) ; lv_hitboxHeightOffset += auto65E93F56_ai ) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "HeroHitboxUnit", 0, lv_p, Point(PointGetX(UnitGetPosition(lv_hero)), (PointGetY(UnitGetPosition(lv_hero)) + lv_hitboxHeightOffset)));
        UnitBehaviorAdd(UnitLastCreated(), "KineticGroupBehavior", lv_hero, 1);
        lib1_gf_ModifyUnitCustomValue2(UnitLastCreated(), lib3_ge_UnitCustomValue_YOffset, lv_hitboxHeightOffset);
        UnitGroupAdd(lv_hitboxUnits, UnitLastCreated());
        lib3_gv_totalLiveKinetics2 += 1;
    }
    DataTableSetUnitGroup(true, lib3_gf_UnitGetHitboxGroupCode(lv_hero), lv_hitboxUnits);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib3_gt_HeroEntersMap_Init () {
    lib3_gt_HeroEntersMap = TriggerCreate("lib3_gt_HeroEntersMap_Func");
    TriggerAddEventUnitRegion(lib3_gt_HeroEntersMap, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Movement Trail Animation
//--------------------------------------------------------------------------------------------------
bool lib3_gt_HeroMovementTrailAnimation_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_targetUnit;
    fixed lv_targetUnitHorizontalVelocity;
    fixed lv_minimumTrailVelocity;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Hero"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_targetUnit = EventUnit();
    lv_targetUnitHorizontalVelocity = lib3_gf_PresetCustomValue(lv_targetUnit);
    lv_minimumTrailVelocity = 0.2;
    if (((lv_targetUnitHorizontalVelocity > lv_minimumTrailVelocity) || (lv_targetUnitHorizontalVelocity < (-1.0 * lv_minimumTrailVelocity)))) {
        libNtve_gf_SendActorMessageToUnit(lv_targetUnit, "Create HeroSuddenMovementTrail");
    }
    else {
        Wait(0.0625, c_timeGame);
        libNtve_gf_SendActorMessageToUnit(lv_targetUnit, "Create HeroSuddenMovementDown");
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib3_gt_HeroMovementTrailAnimation_Init () {
    lib3_gt_HeroMovementTrailAnimation = TriggerCreate("lib3_gt_HeroMovementTrailAnimation_Func");
    TriggerAddEventUnitBehaviorChange(lib3_gt_HeroMovementTrailAnimation, null, "UnitStateFallingAnimation", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Rover Enters Map
//--------------------------------------------------------------------------------------------------
bool lib3_gt_RoverEntersMap_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_enemy;
    fixed lv_i;
    int lv_p;
    unitgroup lv_hitboxUnits;

    // Variable Initialization
    lv_hitboxUnits = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Rover"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_enemy = EventUnit();
    lv_p = UnitGetOwner(lv_enemy);
    lib1_gf_ModifyUnitCustomValue2(lv_enemy, lib3_ge_UnitCustomValue_Height, lib3_gv_entityPatroller.lv_height);
    lib1_gf_ModifyUnitCustomValue2(lv_enemy, lib3_ge_UnitCustomValue_Width, lib3_gv_entityPatroller.lv_width);
    lib1_gf_ModifyUnitCustomValue2(lv_enemy, lib3_ge_UnitCustomValue_HalfHeight, (lib3_gv_entityPatroller.lv_height * 0.5));
    lib1_gf_ModifyUnitCustomValue2(lv_enemy, lib3_ge_UnitCustomValue_HalfWidth, (lib3_gv_entityPatroller.lv_width * 0.5));
    lib1_gf_ModifyUnitCustomValue2(lv_enemy, lib3_ge_UnitCustomValue_LowHeight, (lib3_gv_entityPatroller.lv_height * lib3_gv_speculativeContactStep2));
    lib1_gf_ModifyUnitCustomValue2(lv_enemy, lib3_ge_UnitCustomValue_HighHeight, (lib3_gv_entityPatroller.lv_height * lib3_gv_speculativeContactStep3));
    lib1_gf_ModifyUnitCustomValue2(lv_enemy, lib3_ge_UnitCustomValue_GroundSpeed, lib3_gv_entityPatroller.lv_groundSpeed);
    lib1_gf_ModifyUnitCustomValue2(lv_enemy, lib3_ge_UnitCustomValue_AirSpeed, lib3_gv_entityPatroller.lv_airSpeed);
    UnitGroupAdd(lib3_gv_activePhysicsUnits, lv_enemy);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PatrollerHitboxUnit", 0, lv_p, Point((PointGetX(UnitGetPosition(lv_enemy)) - 0.2), (PointGetY(UnitGetPosition(lv_enemy)) + 0.9)));
    lib1_gf_ModifyUnitCustomValue2(UnitLastCreated(), lib3_ge_UnitCustomValue_XOffset, -0.2);
    lib1_gf_ModifyUnitCustomValue2(UnitLastCreated(), lib3_ge_UnitCustomValue_YOffset, 0.9);
    UnitBehaviorAdd(UnitLastCreated(), "KineticGroupBehavior", lv_enemy, 1);
    UnitGroupAdd(lv_hitboxUnits, UnitLastCreated());
    lib3_gv_totalLiveKinetics2 += 1;
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PatrollerHitboxHeadUnit", 0, lv_p, Point((PointGetX(UnitGetPosition(lv_enemy)) - 0.2), (PointGetY(UnitGetPosition(lv_enemy)) + 0.9375)));
    lib1_gf_ModifyUnitCustomValue2(UnitLastCreated(), lib3_ge_UnitCustomValue_XOffset, -0.2);
    lib1_gf_ModifyUnitCustomValue2(UnitLastCreated(), lib3_ge_UnitCustomValue_YOffset, 0.9375);
    UnitBehaviorAdd(UnitLastCreated(), "KineticGroupBehavior", lv_enemy, 1);
    UnitGroupAdd(lv_hitboxUnits, UnitLastCreated());
    lib3_gv_totalLiveKinetics2 += 1;
    DataTableSetUnitGroup(true, lib3_gf_UnitGetHitboxGroupCode(lv_enemy), lv_hitboxUnits);
    lib3_gf_RoverAIController(lv_enemy);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib3_gt_RoverEntersMap_Init () {
    lib3_gt_RoverEntersMap = TriggerCreate("lib3_gt_RoverEntersMap_Func");
    TriggerAddEventUnitRegion(lib3_gt_RoverEntersMap, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Patroller Enters Map
//--------------------------------------------------------------------------------------------------
bool lib3_gt_PatrollerEntersMap_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_enemy;
    fixed lv_i;
    int lv_p;
    unitgroup lv_hitboxUnits;

    // Variable Initialization
    lv_hitboxUnits = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Patroller"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_enemy = EventUnit();
    lv_p = UnitGetOwner(lv_enemy);
    lib1_gf_ModifyUnitCustomValue2(lv_enemy, lib3_ge_UnitCustomValue_Height, lib3_gv_entityPatroller.lv_height);
    lib1_gf_ModifyUnitCustomValue2(lv_enemy, lib3_ge_UnitCustomValue_Width, lib3_gv_entityPatroller.lv_width);
    lib1_gf_ModifyUnitCustomValue2(lv_enemy, lib3_ge_UnitCustomValue_HalfHeight, (lib3_gv_entityPatroller.lv_height * 0.5));
    lib1_gf_ModifyUnitCustomValue2(lv_enemy, lib3_ge_UnitCustomValue_HalfWidth, (lib3_gv_entityPatroller.lv_width * 0.5));
    lib1_gf_ModifyUnitCustomValue2(lv_enemy, lib3_ge_UnitCustomValue_LowHeight, (lib3_gv_entityPatroller.lv_height * lib3_gv_speculativeContactStep2));
    lib1_gf_ModifyUnitCustomValue2(lv_enemy, lib3_ge_UnitCustomValue_HighHeight, (lib3_gv_entityPatroller.lv_height * lib3_gv_speculativeContactStep3));
    lib1_gf_ModifyUnitCustomValue2(lv_enemy, lib3_ge_UnitCustomValue_GroundSpeed, lib3_gv_entityPatroller.lv_groundSpeed);
    lib1_gf_ModifyUnitCustomValue2(lv_enemy, lib3_ge_UnitCustomValue_AirSpeed, lib3_gv_entityPatroller.lv_airSpeed);
    UnitGroupAdd(lib3_gv_activePhysicsUnits, lv_enemy);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PatrollerHitboxUnit", 0, lv_p, Point((PointGetX(UnitGetPosition(lv_enemy)) - 0.2), (PointGetY(UnitGetPosition(lv_enemy)) + 0.9)));
    lib1_gf_ModifyUnitCustomValue2(UnitLastCreated(), lib3_ge_UnitCustomValue_XOffset, -0.1);
    lib1_gf_ModifyUnitCustomValue2(UnitLastCreated(), lib3_ge_UnitCustomValue_YOffset, 0.4375);
    UnitBehaviorAdd(UnitLastCreated(), "KineticGroupBehavior", lv_enemy, 1);
    UnitGroupAdd(lv_hitboxUnits, UnitLastCreated());
    lib3_gv_totalLiveKinetics2 += 1;
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PatrollerHitboxHeadUnit", 0, lv_p, Point((PointGetX(UnitGetPosition(lv_enemy)) - 0.2), (PointGetY(UnitGetPosition(lv_enemy)) + 0.9375)));
    lib1_gf_ModifyUnitCustomValue2(UnitLastCreated(), lib3_ge_UnitCustomValue_XOffset, -0.1);
    lib1_gf_ModifyUnitCustomValue2(UnitLastCreated(), lib3_ge_UnitCustomValue_YOffset, 0.4375);
    UnitBehaviorAdd(UnitLastCreated(), "KineticGroupBehavior", lv_enemy, 1);
    UnitGroupAdd(lv_hitboxUnits, UnitLastCreated());
    lib3_gv_totalLiveKinetics2 += 1;
    DataTableSetUnitGroup(true, lib3_gf_UnitGetHitboxGroupCode(lv_enemy), lv_hitboxUnits);
    lib3_gf_PatrollerAIController(lv_enemy);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib3_gt_PatrollerEntersMap_Init () {
    lib3_gt_PatrollerEntersMap = TriggerCreate("lib3_gt_PatrollerEntersMap_Func");
    TriggerAddEventUnitRegion(lib3_gt_PatrollerEntersMap, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Patroller Hits Hero
//--------------------------------------------------------------------------------------------------
bool lib3_gt_PatrollerHitsHero_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_patroller;
    string lv_attackIndex;
    unit lv_targetUnit;
    int lv_targetIndex;
    fixed lv_hitDirection;
    fixed lv_hitImmunityDuration;
    fixed lv_hitDamage;

    // Variable Initialization
    lv_attackIndex = "";

    // Actions
    if (!runActions) {
        return true;
    }

    lv_patroller = UnitBehaviorEffectUnit(EventUnitDamageSourceUnit(), "KineticGroupBehavior", c_effectUnitCaster, 0);
    lv_targetUnit = UnitBehaviorEffectUnit(EventUnit(), "KineticGroupBehavior", c_effectUnitCaster, 0);
    lv_targetIndex = UnitGetOwner(lv_targetUnit);
    lv_attackIndex = ("Unit" + IntToString(UnitGetTag(lv_patroller)) + "AttackIndex" + IntToString(UnitGetTag(lv_targetUnit)));
    Wait(0.0, c_timeGame);
    if ((UnitIsAlive(lv_patroller) == false)) {
        return true;
    }
    if ((lib3_gf_UnitHasAttackImmunityFrames(lv_targetUnit, lv_attackIndex) == false)) {
        lv_hitDirection = lib1_gf_SignReal(((PointGetX(UnitGetPosition(lv_targetUnit)) - lib3_gf_PresetCustomValue(lv_targetUnit)) - (PointGetX(UnitGetPosition(lv_patroller)) - lib3_gf_PresetCustomValue(lv_patroller))));
        lv_hitImmunityDuration = 0.375;
        lv_hitDamage = 10.0;
        lib1_gf_DebugFlashUnit(lv_targetUnit);
        lib3_gf_SeparateTargetUnitFromKnockbackUnit(lv_targetUnit, lv_patroller, lv_hitDirection);
        lib3_gf_KnockbackYOverTime(lv_targetUnit, 0.2, 0.0);
        lib3_gf_KnockbackXOverTime(lv_targetUnit, (lv_hitDirection * 0.9), 0.1875);
        lib1_gf_AddTimeToTimer(lib3_gv_player[lv_targetIndex].lv_controlLoss, 0.5);
        lib3_gf_UnitAddAttackImmunityFrames(lv_targetUnit, lv_attackIndex, lv_hitImmunityDuration);
        lib1_gf_ShakeCameraForPlayer(UnitGetOwner(lv_targetUnit), "Medium");
        UnitDamage(lv_patroller, "GenericEnemyAttackHook", lv_targetUnit, 0.0);
        if ((UnitGetPropertyFixed(lv_targetUnit, c_unitPropLife, c_unitPropCurrent) <= lv_hitDamage)) {
            UnitBehaviorAdd(lv_targetUnit, "UnitStateDying", lv_patroller, 1);
            UnitSetPropertyFixed(lv_targetUnit, c_unitPropLife, 0.01);
            Wait(lv_hitImmunityDuration, c_timeGame);
            Wait(0.0, c_timeGame);
        }
        UnitDamage(lv_patroller, "GenericEnemyDamage", lv_targetUnit, lv_hitDamage);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib3_gt_PatrollerHitsHero_Init () {
    lib3_gt_PatrollerHitsHero = TriggerCreate("lib3_gt_PatrollerHitsHero_Func");
    TriggerAddEventUnitDamaged(lib3_gt_PatrollerHitsHero, null, c_unitDamageTypeAny, c_unitDamageEither, "PatrollerBodyHurtboxHook");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Patroller Gets Stomped
//--------------------------------------------------------------------------------------------------
bool lib3_gt_PatrollerGetsStomped_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_patroller;
    unit lv_attackingUnit;
    fixed lv_newVelocity;
    fixed lv_minimumBounceHeight;
    fixed lv_bounceFactor;
    int lv_p;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "PatrollerHitboxHeadUnit") || (UnitGetType(EventUnit()) == "PatrollerHitboxUnit")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_patroller = UnitBehaviorEffectUnit(EventUnit(), "KineticGroupBehavior", c_effectUnitCaster, 0);
    lv_attackingUnit = EventUnitDamageSourceUnit();
    lv_p = UnitGetOwner(lv_attackingUnit);
    lv_minimumBounceHeight = 0.8;
    lv_bounceFactor = 0.8;
    if ((UnitIsAlive(lv_patroller) == true)) {
        UnitKill(lv_patroller);
        lib3_gf_PlayerAddPoints(lv_p, 10);
        if ((lib1_gf_PresetCustomValue(lv_attackingUnit, lib3_ge_UnitCustomValue_StoredVelocityY) == 0.0)) {
            lv_newVelocity = MaxF(lv_minimumBounceHeight, ((-1.0 * lv_bounceFactor) * lib1_gf_PresetCustomValue(lv_attackingUnit, lib3_ge_UnitCustomValue_CurrentVelocityY)));
        }
        else {
            lv_newVelocity = MaxF(lv_minimumBounceHeight, ((-1.0 * lv_bounceFactor) * lib1_gf_PresetCustomValue(lv_attackingUnit, lib3_ge_UnitCustomValue_StoredVelocityY)));
        }
        lib3_gf_SetUnitVerticalVelocity(lv_attackingUnit, 0.0);
        lib3_gf_AddVerticalVelocity(lv_attackingUnit, lv_newVelocity);
        lib1_gf_ModifyUnitCustomValue2(lv_attackingUnit, lib3_ge_UnitCustomValue_JumpChargesCurrent, 0.0);
        libNtve_gf_SendActorMessageToUnit(lv_attackingUnit, "Create HeroSuddenMovementTrail");
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib3_gt_PatrollerGetsStomped_Init () {
    lib3_gt_PatrollerGetsStomped = TriggerCreate("lib3_gt_PatrollerGetsStomped_Func");
    TriggerAddEventUnitDamaged(lib3_gt_PatrollerGetsStomped, null, c_unitDamageTypeAny, c_unitDamageEither, "HeroStompHurtboxHook");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Hits Breakable Block
//--------------------------------------------------------------------------------------------------
bool lib3_gt_HeroHitsBreakableBlock_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_targetUnit;
    unit lv_collisionUnit;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(DataTableGetUnit(false, lib3_gf_PresetGenericEvent2(lib3_ge_GenericEvent_StaticCollisionBottom, lib3_ge_GenericEventParameter_TargetUnit))) == "Hero"))) {
            return false;
        }

        if (!((UnitGetType(DataTableGetUnit(false, lib3_gf_PresetGenericEvent2(lib3_ge_GenericEvent_StaticCollisionBottom, lib3_ge_GenericEventParameter_CollisionUnit))) == "GameBreakableBlock1x1"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_collisionUnit = DataTableGetUnit(false, lib3_gf_PresetGenericEvent2(lib3_ge_GenericEvent_StaticCollisionBottom, lib3_ge_GenericEventParameter_CollisionUnit));
    lv_targetUnit = DataTableGetUnit(false, lib3_gf_PresetGenericEvent2(lib3_ge_GenericEvent_StaticCollisionBottom, lib3_ge_GenericEventParameter_TargetUnit));
    lib3_gf_BlockUnitBounceUnitsOnBlock(lv_collisionUnit);
    Wait(0.125, c_timeGame);
    lib3_gf_RemoveCollisionUnitData(lv_collisionUnit);
    UnitKill(lv_collisionUnit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib3_gt_HeroHitsBreakableBlock_Init () {
    lib3_gt_HeroHitsBreakableBlock = TriggerCreate("lib3_gt_HeroHitsBreakableBlock_Func");
    TriggerAddEventGeneric(lib3_gt_HeroHitsBreakableBlock, lib3_gf_PresetGenericEvent(lib3_ge_GenericEvent_StaticCollisionBottom));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Hits Question Block
//--------------------------------------------------------------------------------------------------
bool lib3_gt_HeroHitsQuestionBlock_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_targetUnit;
    unit lv_collisionUnit;
    unit lv_spawnedObject;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(DataTableGetUnit(false, lib3_gf_PresetGenericEvent2(lib3_ge_GenericEvent_StaticCollisionBottom, lib3_ge_GenericEventParameter_TargetUnit))) == "Hero"))) {
            return false;
        }

        if (!((UnitGetType(DataTableGetUnit(false, lib3_gf_PresetGenericEvent2(lib3_ge_GenericEvent_StaticCollisionBottom, lib3_ge_GenericEventParameter_CollisionUnit))) == "GameQuestionBlock1x1"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_collisionUnit = DataTableGetUnit(false, lib3_gf_PresetGenericEvent2(lib3_ge_GenericEvent_StaticCollisionBottom, lib3_ge_GenericEventParameter_CollisionUnit));
    lv_targetUnit = DataTableGetUnit(false, lib3_gf_PresetGenericEvent2(lib3_ge_GenericEvent_StaticCollisionBottom, lib3_ge_GenericEventParameter_TargetUnit));
    lib3_gf_BlockUnitBounceUnitsOnBlock(lv_collisionUnit);
    Wait(0.125, c_timeGame);
    lib3_gf_TranslateUnit5(lv_collisionUnit, 0.6);
    libNtve_gf_SendActorMessageToUnit(lv_collisionUnit, "Signal Impact");
    Wait(0.0625, c_timeGame);
    lib3_gf_BlockUnitSpawnCarriedObejct(lv_collisionUnit);
    Wait(0.0625, c_timeGame);
    lib3_gf_TranslateUnit5(lv_collisionUnit, -0.6);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib3_gt_HeroHitsQuestionBlock_Init () {
    lib3_gt_HeroHitsQuestionBlock = TriggerCreate("lib3_gt_HeroHitsQuestionBlock_Func");
    TriggerAddEventGeneric(lib3_gt_HeroHitsQuestionBlock, lib3_gf_PresetGenericEvent(lib3_ge_GenericEvent_StaticCollisionBottom));
}

void lib3_InitTriggers () {
    lib3_gt_EachGameTick_Init();
    lib3_gt_PlayerInputKeyDown_Init();
    lib3_gt_PlayerInputKeyUp_Init();
    lib3_gt_UnitEntersBottomlessPit_Init();
    lib3_gt_UnitDies_Init();
    lib3_gt_CoinEntersMap_Init();
    lib3_gt_HeroCoinPickup_Init();
    lib3_gt_HealthGlobeEntersMap_Init();
    lib3_gt_HeroHealthPickup_Init();
    lib3_gt_HeroEntersMap_Init();
    lib3_gt_HeroMovementTrailAnimation_Init();
    lib3_gt_RoverEntersMap_Init();
    lib3_gt_PatrollerEntersMap_Init();
    lib3_gt_PatrollerHitsHero_Init();
    lib3_gt_PatrollerGetsStomped_Init();
    lib3_gt_HeroHitsBreakableBlock_Init();
    lib3_gt_HeroHitsQuestionBlock_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool lib3_InitLib_completed = false;

void lib3_InitLib () {
    if (lib3_InitLib_completed) {
        return;
    }

    lib3_InitLib_completed = true;

    lib3_InitLibraries();
    lib3_InitVariables();
    lib3_InitTriggers();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    lib1_InitLib();
    lib3_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
void gf_HideStaticCollisionUnitsAboveLevelHeight ();

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_GameInitialization;
trigger gt_HeroEntersUndergroundArea;
trigger gt_HeroLeavesUndergroundArea;

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
void gf_HideStaticCollisionUnitsAboveLevelHeight () {
    // Implementation
    UnitGroupLoopBegin(UnitGroup("GameStaticCollisionOneWay1", c_playerAny, RegionFromId(6), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_SendActorMessageToUnit(UnitGroupLoopCurrent(), "SetOpacity");
        ActorSendTo(libNtve_gf_MainActorofUnit(UnitGroupLoopCurrent()), "_Snapshot", "SetVisibility");
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("GameStaticCollisionOneWay2", c_playerAny, RegionFromId(6), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_SendActorMessageToUnit(UnitGroupLoopCurrent(), "SetOpacity");
        ActorSendTo(libNtve_gf_MainActorofUnit(UnitGroupLoopCurrent()), "_Snapshot", "SetVisibility");
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("GameStaticCollisionDot5xDot5", c_playerAny, RegionFromId(6), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_SendActorMessageToUnit(UnitGroupLoopCurrent(), "SetOpacity");
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("GameStaticCollision1x1", c_playerAny, RegionFromId(6), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_SendActorMessageToUnit(UnitGroupLoopCurrent(), "SetOpacity");
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("GameStaticCollision2x2", c_playerAny, RegionFromId(6), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_SendActorMessageToUnit(UnitGroupLoopCurrent(), "SetOpacity");
    }
    UnitGroupLoopEnd();
}

//--------------------------------------------------------------------------------------------------
// Trigger: Game Initialization
//--------------------------------------------------------------------------------------------------
bool gt_GameInitialization_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UISetCursorVisible(PlayerGroupAll(), false);
    lib3_gf_Initialize2DGameLib();
    CameraSetBounds(PlayerGroupAll(), RegionFromId(1), true);
    lib3_gv_player[1].lv_hero = UnitFromId(1);
    lib3_gv_player[1].lv_respawnPoint = Point(12.0, 34.0);
    CameraFollowUnitGroup(1, libNtve_gf_ConvertUnitToUnitGroup(lib3_gv_player[1].lv_hero), true, false);
    UnitGroupAdd(lib3_gv_activePhysicsUnits, lib3_gv_player[1].lv_hero);
    libNtve_gf_SetDialogItemUnit(lib3_gv_uI.lv_heroStatus, lib3_gv_player[1].lv_hero, PlayerGroupSingle(1));
    gf_HideStaticCollisionUnitsAboveLevelHeight();
    ActorSend(ActorFromDoodad(DoodadFromId(108)), "SetVisibility");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GameInitialization_Init () {
    gt_GameInitialization = TriggerCreate("gt_GameInitialization_Func");
    TriggerAddEventMapInit(gt_GameInitialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Enters Underground Area
//--------------------------------------------------------------------------------------------------
bool gt_HeroEntersUndergroundArea_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Hero"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    ActorSend(ActorFromDoodad(DoodadFromId(108)), "SetVisibility 1");
    lv_p = UnitGetOwner(EventUnit());
    CameraSetBounds(PlayerGroupSingle(lv_p), RegionFromId(3), false);
    CameraSetValue(lv_p, c_cameraValueDistance, 24.0, 0.0, -1, 10.0);
    CameraFollowUnitGroup(lv_p, libNtve_gf_ConvertUnitToUnitGroup(lib3_gv_player[lv_p].lv_hero), false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HeroEntersUndergroundArea_Init () {
    gt_HeroEntersUndergroundArea = TriggerCreate("gt_HeroEntersUndergroundArea_Func");
    TriggerAddEventUnitRegion(gt_HeroEntersUndergroundArea, null, RegionFromId(4), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Leaves Underground Area
//--------------------------------------------------------------------------------------------------
bool gt_HeroLeavesUndergroundArea_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Hero"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    ActorSend(ActorFromDoodad(DoodadFromId(108)), "SetVisibility");
    lv_p = UnitGetOwner(EventUnit());
    CameraSetBounds(PlayerGroupSingle(lv_p), RegionFromId(1), false);
    CameraSetValue(lv_p, c_cameraValueDistance, 42.0, 0.0, -1, 10.0);
    lib1_gf_AddTimeToTimer(lib3_gv_player[lv_p].lv_controlLoss, 1.0);
    lib1_gf_ModifyUnitCustomValue2(EventUnit(), lib3_ge_UnitCustomValue_IgnoreCollisionState, IntToFixed(BoolToInt(true)));
    UnitSetPosition(EventUnit(), PointFromId(51), false);
    lib3_gf_AddVerticalVelocity(EventUnit(), 0.8);
    lib3_gf_SetUnitHorizontalVelocity(EventUnit(), 0.0);
    CameraFollowUnitGroup(lv_p, libNtve_gf_ConvertUnitToUnitGroup(lib3_gv_player[lv_p].lv_hero), true, false);
    Wait(1.0, c_timeGame);
    lib1_gf_ModifyUnitCustomValue2(EventUnit(), lib3_ge_UnitCustomValue_IgnoreCollisionState, IntToFixed(BoolToInt(false)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HeroLeavesUndergroundArea_Init () {
    gt_HeroLeavesUndergroundArea = TriggerCreate("gt_HeroLeavesUndergroundArea_Func");
    TriggerAddEventUnitRegion(gt_HeroLeavesUndergroundArea, null, RegionFromId(5), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_GameInitialization_Init();
    gt_HeroEntersUndergroundArea_Init();
    gt_HeroLeavesUndergroundArea_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitTriggers();
}
